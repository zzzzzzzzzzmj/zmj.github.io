<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>4 个鲜为人知的 GitHub 神技巧</title>
    <url>/2022/05/25/4%E4%B8%AA%E9%B2%9C%E4%B8%BA%E4%BA%BA%E7%9F%A5%E7%9A%84GitHub%E7%A5%9E%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="⭐️-在线阅读代码"><a class="header-anchor" href="#⭐️-在线阅读代码"> </a>⭐️ 在线阅读代码</h1>
<p><strong>在仓库详情界面，按下 <code>.</code> 键</strong>，即可利用在线的 VSCode 阅读代码，而无需下载到本地。</p>
<p><img src="https://s2.loli.net/2022/05/25/QivIAyOBlJwtW17.png" alt="image-20220525221133638"></p>
<h1 id="⭐️-在线运行项目"><a class="header-anchor" href="#⭐️-在线运行项目"> </a>⭐️ 在线运行项目</h1>
<p><strong>在项目的浏览器地址前，加上 <code>gitpod.io/#/</code> 前缀</strong>，即可在线运行项目。</p>
<p><img src="https://s2.loli.net/2022/05/25/tf4hTWp6zEawcbl.png" alt="image-20220525220206900"></p>
<h1 id="实用快捷键总结"><a class="header-anchor" href="#实用快捷键总结"> </a>实用快捷键总结</h1>
<h2 id="查找文件"><a class="header-anchor" href="#查找文件"> </a>查找文件</h2>
<p><strong>在仓库详情界面，按 <code>T</code> 键，然后输入要查找的文件名。</strong></p>
<p><img src="https://s2.loli.net/2022/05/25/nt8vwl9GhS5agNj.png" alt="image-20220525221044873"></p>
<h2 id="跳转至某行代码"><a class="header-anchor" href="#跳转至某行代码"> </a>跳转至某行代码</h2>
<p>**在源代码界面，按 <code>L</code> 键，然后输入要跳转至的行号。**还可以：</p>
<ul>
<li>
<p>复制该行代码</p>
</li>
<li>
<p>生成永久链接（permalink）</p>
<p><img src="https://s2.loli.net/2022/05/25/efQlqLiWrKacjdo.png" alt="image-20220525220504285"></p>
</li>
</ul>
<h2 id="查看文件改动记录"><a class="header-anchor" href="#查看文件改动记录"> </a>查看文件改动记录</h2>
<p><strong>在源代码界面，按 <code>B</code> 键</strong>，即可查看该文件的改动记录。</p>
<p><img src="https://s2.loli.net/2022/05/25/5Yso6KmMBgJGbNH.png" alt="image-20220525222522439"></p>
<h2 id="更多"><a class="header-anchor" href="#更多"> </a>更多</h2>
<p>除此之外，GitHub还有超多快捷键，详见 <a href="https://docs.github.com/cn/get-started/using-github/keyboard-shortcuts">官方文档</a>。</p>
<h1 id="订阅-GitHub-项目推送"><a class="header-anchor" href="#订阅-GitHub-项目推送"> </a>订阅 GitHub 项目推送</h1>
<p><strong>在 GitHub 中的 <code>Explore</code> 页面中，点击 <code>Get email updates</code></strong>，即可让 GitHub 定期地推送自己可能感兴趣的优质项目，到自己的邮箱，以了解开源动态。</p>
<p><img src="https://s2.loli.net/2022/05/25/TlqjEupSJ7F93xs.png" alt="image-20220525221835589"></p>
<p><img src="https://s2.loli.net/2022/05/25/PKC19zry2vl8mha.png" alt="image-20220525222103562"></p>
<h1 id="参考资料"><a class="header-anchor" href="#参考资料"> </a>参考资料</h1>
<p>再次强调，<strong>本文基于 B 站 UP 主 <a href="https://space.bilibili.com/12890453">@程序员鱼皮</a> 的《5 个隐藏的 GitHub 神技巧，助你秒变大佬！》视频总结而成</strong>，视频如下：</p>
<iframe src="//player.bilibili.com/player.html?aid=853844464&amp;bvid=BV1q54y1f7h6&amp;cid=712063846&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>搬运</tag>
      </tags>
  </entry>
  <entry>
    <title>技术分享06-Chromium多进程模型</title>
    <url>/2021/09/22/Chromium%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="概述"><a class="header-anchor" href="#概述"> </a>概述</h1>
<p>相信你一定有这样的经历：打开很多个页面，不幸的是其中某个页面不响应了或者崩溃了，随之而来的是更不幸的事，所有页面都不响应或者都崩溃了。最让人崩溃的是其中一些页面还有未保存或者未发送的信息！但是，现在好了，现代浏览器很多都支持多进程模型，这个模型可以很好地避免上面的问题，虽然它很复杂而且也有自身的问题，例如更多的资源消耗，但是它的优势也是非常明显的。</p>
<p>Chromium被构建得像一个操作系统，使用多进程隔离每个网站和浏览器自身，以一种安全而鲁棒的方式运行这些程序即使崩溃也不会互相影响。用户也可以在Chromium的任务管理器里查看每个进程的资源使用情况。</p>
<h2 id="多进程架构的好处"><a class="header-anchor" href="#多进程架构的好处"> </a>多进程架构的好处</h2>
<p>Chromium的多进程架构至少带来三点好处：</p>
<ol>
<li>避免单个页面的不响应或者奔溃影响整个浏览器的稳定性；</li>
<li>当第三方插件奔溃时候不会影响页面或者浏览器的稳定性；</li>
<li>方便了安全模型的实施，也就是说沙箱模型是基于多进程架构的。</li>
</ol>
<p>其实，这很大程度上也是WebKit2产生的原因。</p>
<blockquote>
<p><strong>WebKit：</strong></p>
<p>​		**广义上来说，WebKit是一个开源的项目。该项目专注于网页内容的展示，开发出一流的网页渲染引擎。**该项目包含两个部分，第一是WebCore，其中包含了对HTML，CSS等很多W3C规范的实现；第二部分就是狭义上的WebKit，它主要是各个平台的的移植并提供相对应的Web接口，也就是WebView或者类似WebView，这些接口提供操作和显示网页的能力。目前使用WebKit的主流的浏览器或者WebView包括Chrome，Safari，QtWebKit，Android Browser以及众多的移动平台的浏览器。</p>
<p><strong>WebKit2：</strong></p>
<p>​        WebKit2相对于狭义上的WebKit而言，**它不是WebKit简单的第二个版本，它是一个新的API层，其最主要的变化在于将网页的渲染置于单独的进程，而接口层则在另外一个进程，它们之间通过IPC来通讯。**对于接口的调用者来说，中间的IPC和底下的实现是透明的，这样做的好处有很多，一个很明显的好处是，当网页的渲染出现问题时，不会阻碍Web接口的调用者进程，这会在很大程度上解决或者帮助解决浏览器或者这些调用者的稳定性和安全性等问题。</p>
<p><strong>Chromium：</strong></p>
<p>​		**Chromium是一个建立在WebKit之上的浏览器开源项目，由Google发起的。**该项目被创建以来发展迅速，很多先进的技术被采用，如跨进程模型，沙箱模型等等。同时，很多新的规范被支持，例如WebGL，Canvas2D，CSS3以及其他很多的HTML5特性，基本上每天你都可以看到它的变化，它的版本升级很快。在性能方面，其也备受称赞，包括快速启动，网页加载迅速等。</p>
<p><strong>Chrome：</strong></p>
<p>​		Chrome是Google公司的浏览器产品，它基于Chromium开源项目，**一般选择稳定的版本作为它的基础，它和Chromium的不同点在于Chromium是开源试验场，会尝试很多新的东西，当这些东西稳定之后，Chrome才会集成进来，这也就是说Chrome的版本会落后于Chromium。**另外一个就是，Chrome里面会加入一些私有的codec，这些仅在Chrome中才会出现。再次，Chrome还会整合Google的很多服务， 最后Chrome还会有自动更新的功能，这也是Chromium所没有的。</p>
</blockquote>
<blockquote>
<p>​        <strong>在每个多进程架构里，Chromium的渲染器进程运行在一个沙箱进程中，它对用户电脑只有有限的访问权限。这些进程对用户的文件系统，显示器，或者大部分其他的资源没有直接的接触。相反，他们只通过浏览器进程获得对允许的资源的访问，而浏览器进程可以在这种访问上附加安全策略。</strong></p>
<p><strong>沙盒模型：</strong></p>
<p>​		一般而言，对于网络上的网页中的JavaScript代码和插件都是不受信的（除非是经过认证的网站），特别是一些故意设计侵入浏览器运行的主机代码更是非常危险，通过一些手段或者浏览器中的漏洞，这些代码可能获取了主机的管理权限，这对主机系统来说是非常危险的，所以保证网页本身之外，还需要保证浏览器和浏览器所在的系统不存在危险。</p>
<p>如果有一种机制，将网页的运行限制在一个特定的环境中，也就是一个沙箱中，使它只能访问有限的功能。那么，即使网页工作的渲染引擎被攻击，它也不能够获取渲染引擎工作的主机系统中的任何权限，这一思想就是沙箱模型。</p>
<p>“沙盒”技术与主动防御技术原理截然不同。主动防御是发现程序有可疑行为时立即拦截并终止运行。“沙盒”技术则是发现可疑行为后让程序继续运行，当发现的确是病毒时才会终止。<strong>“沙盒”技术的实践运用流程是：让疑似病毒文件的可疑行为在虚拟的“沙盒”里充分表演，“沙盒”会记下它的每一个动作；当疑似病毒充分暴露了其病毒属性后，“沙盒”就会执行“回滚”机制——将病毒的痕迹和动作抹去，恢复系统到正常状态。</strong></p>
<p>简单来说就是，在一个装满了平整细沙的盒子里，我们可以尽情随意地在上面作画、涂写，无论画的好坏，最后轻轻一抹，沙盒又回到了原来的平整状态。沙盒的魅力就在于他允许你出错，还可以给你改正的机会。</p>
</blockquote>
<h1 id="Chromium-的进程模型"><a class="header-anchor" href="#Chromium-的进程模型"> </a>Chromium 的进程模型</h1>
<p>下图给出了缺省的Chromium浏览器的进程模型。方框代表进程，连接线代表IPC（InterProcess Communication 进程间通信）。</p>
<p><img src="https://i.loli.net/2021/09/27/rs5ITSegvcAh9qd.png" alt=""></p>
<p>通常来讲，chromium浏览器包括以下主要进程类型：</p>
<ol>
<li>
<p>Browser进程：浏览器的主进程，负责浏览器界面的显示，各个页面的管理，其他各种进程的管理；</p>
</li>
<li>
<p>Render进程：页面的渲染进程，负责页面的渲染工作，WebKit的工作主要在这个进程中完成；</p>
</li>
<li>
<p>NPAPI插件进程：每种类型的插件只会有一个进程，每个插件进程可以被多个Render进程共享；</p>
</li>
<li>
<p>GPU进程：最多只有一个，当且仅当GPU硬件加速打开的时候才会被创建，主要用于对3D加速调用的实现；</p>
</li>
<li>
<p>Pepper插件进程：同NPAPI插件进程，不同的是为Pepper插件而创建的进程。</p>
</li>
</ol>
<p>Chromium浏览器的进程模型，包括以下特征：</p>
<ol>
<li>
<p>Browser进程和页面是分开的，这保证了页面的奔溃不会导致浏览器主界面的奔溃；</p>
</li>
<li>
<p>每个页面是独立的进程，这保证了页面之间相互不影响；</p>
</li>
<li>
<p>插件进程也是独立的，插件的问题不会影响浏览器主界面和页面；</p>
</li>
<li>
<p>GPU硬件加速进程也是独立的。</p>
</li>
</ol>
<p>因为这么多的进程，开发者通常需要知道进程列表中的进程类别，这很简单，可以通过进程的命令行参数"–type"来识别。</p>
<h1 id="Chromium-支持的模型"><a class="header-anchor" href="#Chromium-支持的模型"> </a>Chromium 支持的模型</h1>
<p>Chromium支持四种不同的模型，它们影响浏览器分配页面给渲染进程的行为。</p>
<h2 id="单网站实例单进程（默认）"><a class="header-anchor" href="#单网站实例单进程（默认）"> </a>单网站实例单进程（默认）</h2>
<p>默认情况下，Chromium为用户访问的每个网站实例创建一个渲染器进程。这保证了不同网站的网页独立渲染，让对同一个网站的不同访问相互独立。因此一个网站实例中的失败（比如，渲染器崩溃）或者重的资源使用不会影响浏览器的其他部分。</p>
<p>一个网站实例是一些相同网站的相连网页的集合。我们这样认为两个页面是相连的：如果他们可以在脚本代码中获取彼此的引用的话（比如：如果一个页面被另一个页面用Javascript在一个新窗口中打开）。因此，两个标签页可以在同一个渲染进程里展示页面，同时在给定的一个标签页中导航到网站外的一个网页，可能切换标签页的渲染进程。</p>
<p><strong>优点</strong></p>
<ul>
<li>隔离不同网站的内容。这提供了网页内容的命运共享的一种有意义的形式，在这种形式中，网页间的失败不会相互影响。</li>
<li>隔离展示相同网站的独立标签页。在不同的标签页中独立访问同样的网站会创建不同的进程。这可以避免同个实例中的争夺与失败，使其不会影响其他实例。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>更多的内存负载。在大多数工作负载下，这个模型会比下面的每个网站一个进程创建更多渲染器进程。这虽然能增加稳定性并且增加并发的机会，但它也增加了内存负载。</li>
<li>更复杂的实现。不像每个标签页一个进程或者单进程，这个模型需要复杂的逻辑以支持标签在网页间导航时的进程交换，以及代理一些允许的源之间的JavaScript行为，比如传递消息。</li>
</ul>
<h2 id="单网站单进程"><a class="header-anchor" href="#单网站单进程"> </a>单网站单进程</h2>
<p>Chromium也支持这样一种进程模式，隔离不同的网站，但将相同网站的所有实例组合到一块。这创建更少的渲染进程，用鲁棒性交换更少的内存占用。这个模型基于内容的源，而非标签页间的关系。</p>
<p><strong>优点</strong></p>
<ul>
<li>隔离不同网站的内容。正如每个网站实例一个进程的模型那样，不同网站的页面不会共享命运（不会同生共死）。</li>
<li>更少的内存占用。这个模型比上一个模型和每个标签一个进程的模型可能创建更少的并行进程。这对于减少Chromium的内存足迹可能是需要的。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>可能导致更大的渲染进程。像google.com这样的站点上有着大量的应用程序，它们可能在浏览器里被同时打开，并且全部在同一个进程里渲染。因此，这些应用程序中的资源争夺与失败会影响许多标签页，使得浏览器看起来不能更好地响应。</li>
<li>实现更加复杂。与每个网站实例一个进程的模型相似，这需要在导航中交换进程以及代理一些javascript操作的逻辑。</li>
</ul>
<h2 id="单标签页单进程"><a class="header-anchor" href="#单标签页单进程"> </a>单标签页单进程</h2>
<p>每个网站或每个网站实例一个进程都需要在创建渲染进程时考虑网站内容的源。Chromium也支持一种简单的模型，将一个渲染器进程分配给每组脚本相关的标签页。这个模型可以使用 --process-per-tab命令行开关来选中。</p>
<p>特别地，Chromium会把一些脚本相关联的标签页成为一个浏览实例，它也与HTML5范畴中的“一个浏览上下文”对应。这个集合由一个标签以及这个标签用javascript代码所打开的标签组合而成。这样的标签必须在同一个进程中渲染，以允许在这些标签页间执行javascript调用（大多数通常发生在同源页面之间）。</p>
<p><strong>优点</strong></p>
<ul>
<li>容易理解。每个标签页分配有一个渲染进程。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>导致不想要的页面之间的命运共享。如果用户在浏览实例中导航一个标签页到一个不同的网站中，新的页面会和其他在同一个浏览实例中的任何其他标签页共享命运。</li>
<li>在实践中并没有比单个网站实例单进程更简单。</li>
</ul>
<h2 id="单进程"><a class="header-anchor" href="#单进程"> </a>单进程</h2>
<p>最后，出于比较的目的，Chromium支持单进程模型。在这个模型中，浏览器和渲染引擎跑在同一个操作系统进程里。</p>
<p>单进程模型提供了一个衡量多进程架构带来的负荷的基线。这不是一个安全的架构，也不是一个鲁棒的架构，因为任何渲染器的崩溃会导致整个浏览器进程挂掉。它只是设计用于测试和开发目的，并且可能包含在其他架构中没有的bug。</p>
<h1 id="参考资料"><a class="header-anchor" href="#参考资料"> </a>参考资料</h1>
<p><a href="https://www.cntofu.com/book/101/zh/General_Architecture/Process_Models.md">进程模型 - Chromium中文文档</a></p>
<p><a href="https://blog.csdn.net/milado_nju/article/details/7292164">理解WebKit和Chromium: WebKit, WebKit2, Chromium和Chrome介绍 - CSDN</a></p>
<p><a href="https://blog.csdn.net/haima1998/article/details/9292047">webkit和webkit2的区别 - CSDN</a></p>
<p><a href="https://www.cnblogs.com/slly/p/6639173.html">浏览器沙箱模型 - 博客园</a></p>
<p><a href="https://blog.csdn.net/iteye_10668/article/details/81618053">Google Chrome漫画书中文版  - CSDN</a></p>
]]></content>
      <categories>
        <category>浏览器</category>
      </categories>
      <tags>
        <tag>技术分享</tag>
        <tag>Chromium</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode | 双指针I 167/633/345/680 | java实现</title>
    <url>/2020/01/20/Leetcode-%E5%8F%8C%E6%8C%87%E9%92%88I-167-633-345-680-java%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="167-两数之和-II-输入有序数组"><a class="header-anchor" href="#167-两数之和-II-输入有序数组"> </a>167. 两数之和 II - 输入有序数组</h1>
<h2 id="问题描述"><a class="header-anchor" href="#问题描述"> </a>问题描述</h2>
<blockquote>
<p><strong>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</strong><br>
<strong>说明:</strong><br>
返回的下标值（index1 和 index2）不是从零开始的。 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。 示例:<br>
<strong>输入:</strong><br>
numbers = [2, 7, 11, 15], target = 9 输出: [1,2] 解释: 2 与 7 之和等于目标数 9。因此 index1 = 1, index2 = 2 。</p>
</blockquote>
<h2 id="参考代码"><a class="header-anchor" href="#参考代码"> </a>参考代码</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>numbers <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span> j<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="NOTES"><a class="header-anchor" href="#NOTES"> </a>NOTES</h3>
<ul>
<li>时间复杂度O(n)，空间复杂度O(1)</li>
<li>最初的思路是两层for循环嵌套，显然采用双指针将大大降低时间复杂度</li>
</ul>
<h1 id="633-平方数之和"><a class="header-anchor" href="#633-平方数之和"> </a>633. 平方数之和</h1>
<h2 id="问题描述-v2"><a class="header-anchor" href="#问题描述-v2"> </a>问题描述</h2>
<blockquote>
<p><strong>给定一个非负整数 c ，你要判断是否存在两个整数 a 和 b，使得 a<sup>2</sup> + b<sup>2</sup> = c。</strong><br>
<strong>示例1:</strong><br>
输入: 5 输出: True 解释: 1 * 1 + 2 * 2 = 5<br>
<strong>示例2:</strong><br>
输入: 3 输出: False</p>
</blockquote>
<h2 id="参考代码-v2"><a class="header-anchor" href="#参考代码-v2"> </a>参考代码</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">judgeSquareSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token operator">*</span>i <span class="token operator">+</span> j<span class="token operator">*</span>j<span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">&lt;</span>c<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">&gt;</span>c<span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="NOTES-v2"><a class="header-anchor" href="#NOTES-v2"> </a>NOTES</h3>
<ul>
<li>时间复杂度O(n)，空间复杂度O(1)</li>
<li>对c开根号，穷举小于根号c的所有数  <s>而不是穷举小于c的所有数</s></li>
<li>采用双指针，若结果小于c，则<strong>左指针</strong>向右移；若结果大于c，则<strong>右指针</strong>向左移</li>
<li>应考虑到c为0和1的情况，所以<strong>左指针</strong>应从0开始</li>
<li>while的循环条件应为<strong>左指针</strong>&lt;=<strong>右指针</strong>，若仅仅为"&lt;"，就没有考虑到c=2的情况</li>
</ul>
<h1 id="345-反转字符串中的元音字母"><a class="header-anchor" href="#345-反转字符串中的元音字母"> </a>345. 反转字符串中的元音字母</h1>
<h2 id="问题描述-v3"><a class="header-anchor" href="#问题描述-v3"> </a>问题描述</h2>
<blockquote>
<p><strong>编写一个函数，以字符串作为输入，反转该字符串中的元音字母。</strong><br>
<strong>示例 1:</strong><br>
输入: “hello” 输出: “holle”<br>
<strong>示例 2:</strong><br>
输入: “leetcode” 输出: “leotcede”<br>
<strong>说明:</strong><br>
元音字母不包含字母"y"。</p>
</blockquote>
<h2 id="参考代码-v3"><a class="header-anchor" href="#参考代码-v3"> </a>参考代码</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token comment">//private static final HashSet&lt;String&gt; vowels = new HashSet&lt;&gt;("aeiouAEIOU");</span>
    <span class="token comment">// private final static HashSet&lt;Character&gt; vowels = new HashSet&lt;&gt;(</span>
    <span class="token comment">//     Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'));</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isVowel</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'a'</span><span class="token operator">||</span>c<span class="token operator">==</span><span class="token string">'e'</span><span class="token operator">||</span>c<span class="token operator">==</span><span class="token string">'i'</span><span class="token operator">||</span>c<span class="token operator">==</span><span class="token string">'o'</span><span class="token operator">||</span>c<span class="token operator">==</span><span class="token string">'u'</span><span class="token operator">||</span>c<span class="token operator">==</span><span class="token string">'A'</span><span class="token operator">||</span>c<span class="token operator">==</span><span class="token string">'E'</span><span class="token operator">||</span>c<span class="token operator">==</span><span class="token string">'I'</span><span class="token operator">||</span>c<span class="token operator">==</span><span class="token string">'O'</span><span class="token operator">||</span>c<span class="token operator">==</span><span class="token string">'U'</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseVowels</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">char</span> ci <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">char</span> cj <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isVowel</span><span class="token punctuation">(</span>ci<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    result<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> ci<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isVowel</span><span class="token punctuation">(</span>cj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    result<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> cj<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span><span class="token punctuation">{</span>
                    result<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cj<span class="token punctuation">;</span>
                    result<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> ci<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="NOTES-v3"><a class="header-anchor" href="#NOTES-v3"> </a>NOTES</h3>
<ul>
<li>
<p>时间复杂度O(n)，空间复杂度O(1)</p>
</li>
<li>
<p>本题<strong>算法</strong>类似于快速排序算法，左右指针一首一尾向中移动，遇到元音字母停下交换位置</p>
</li>
<li>
<p>注意while的循环条件仍为<strong>左指针</strong>&lt;=<strong>右指针</strong><br>
若为“&lt;”，结果如下：</p>
<blockquote>
<p>输入 “hello”<br>
输出 “hol\u0000e”<br>
预期结果 “holle”</p>
</blockquote>
<table>
<thead>
<tr>
<th>Step</th>
<th>左指针 i</th>
<th>右指针 j</th>
<th>操作</th>
<th>Result</th>
<th>Explain</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>0</td>
<td>4</td>
<td>Move</td>
<td>“h  _ _ _ _”</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>4</td>
<td>Exchange</td>
<td>“h o _ _ e”</td>
<td>ij都遇到元音字母，交换</td>
</tr>
<tr>
<td>3</td>
<td>2</td>
<td>3</td>
<td>Move</td>
<td>“h o l _ e”</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>3</td>
<td>3</td>
<td>跳出循环</td>
<td>“h o l _ e”</td>
<td>不满足 i &lt; j</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>另外不要忘记大写的元音字母！</p>
</li>
</ul>
<h1 id="680-验证回文字符串-Ⅱ"><a class="header-anchor" href="#680-验证回文字符串-Ⅱ"> </a>680. 验证回文字符串 Ⅱ</h1>
<h2 id="问题描述-v4"><a class="header-anchor" href="#问题描述-v4"> </a>问题描述</h2>
<blockquote>
<p><strong>给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。</strong><br>
<strong>示例 1:</strong><br>
输入: “aba”<br>
输出: True<br>
<strong>示例 2:</strong><br>
输入: “abca”<br>
输出: True<br>
解释: 你可以删除c字符。<br>
<strong>注意:</strong><br>
字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。</p>
</blockquote>
<h2 id="参考代码-v4"><a class="header-anchor" href="#参考代码-v4"> </a>参考代码</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
	<span class="token comment">//判断子字符串是否为回文</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    i<span class="token operator">++</span><span class="token punctuation">;</span>
                    j<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
                	<span class="token function">isPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span><span class="token punctuation">{</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
                j<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="NOTES-v4"><a class="header-anchor" href="#NOTES-v4"> </a>NOTES</h3>
<ul>
<li>
<p>时间复杂度O(n)，空间复杂度O(1)</p>
</li>
<li>
<p>本题<strong>算法</strong>为左右指针一首一尾，若相等则向中间移动，若不等则判断字符串的 <strong>i+1 到 j</strong> 的子字符串是否为回文 以及 <strong>i 到 j-1</strong> 的子字符串是否为回文。<br><br>
按照逻辑，调用substring方法的参数应为 (i+1, j) 和 (i, j-1)，<br>
但是 <strong>注意</strong> <a href="https://www.runoob.com/java/java-string-substring.html">substring()方法</a> 的参数：</p>
<ul>
<li>beginIndex – 起始索引（包括）, 索引从 0 开始。</li>
<li>endIndex – 结束索引（不包括）。</li>
</ul>
<p><br>因此代码如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<h1 id="说明"><a class="header-anchor" href="#说明"> </a>说明</h1>
<p>语言：Java<br><br>
如有错误，还望指正</p>
<h1 id="参考资料"><a class="header-anchor" href="#参考资料"> </a>参考资料</h1>
<p><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E5%8F%8C%E6%8C%87%E9%92%88.md">CyC2018/CS-Notes/Leetcode题解-双指针</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>算法</tag>
        <tag>Leetcode</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode | 双指针II 88/141/524 | 内含双指针问题的总结 | java实现</title>
    <url>/2020/01/21/Leetcode-%E5%8F%8C%E6%8C%87%E9%92%88II-88-141-524-%E5%86%85%E5%90%AB%E5%8F%8C%E6%8C%87%E9%92%88%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%BB%E7%BB%93-java%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p><strong>本文结尾有关于双指针问题的总结，如有更好的归纳方法，欢迎补充！</strong></p>
<h1 id="88-合并两个有序数组"><a class="header-anchor" href="#88-合并两个有序数组"> </a>88. 合并两个有序数组</h1>
<h2 id="问题描述"><a class="header-anchor" href="#问题描述"> </a>问题描述</h2>
<blockquote>
<p><strong>给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。</strong><br>
<strong>说明:</strong><br>
初始化 nums1 和 nums2 的元素数量分别为 m 和 n。<br>
你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。<br>
<strong>示例:</strong><br>
输入:<br>
nums1 = [1,2,3,0,0,0], m = 3<br>
nums2 = [2,5,6],       n = 3<br>
输出: [1,2,2,3,5,6]</p>
</blockquote>
<h2 id="参考代码【较为直观的方法】"><a class="header-anchor" href="#参考代码【较为直观的方法】"> </a>参考代码【较为直观的方法】</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token comment">//当nums2为空时，直接返回；</span>
    	<span class="token comment">//这里不用考虑nums1为空，由题不存在这样的情况</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//创建一个临时数组</span>
            <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//临时数组的下标</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//nums1的指针下标</span>
            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//nums2的指针下标</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">&lt;</span>m<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>
            	<span class="token comment">//下面有说明</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>n <span class="token operator">||</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">!=</span>m<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>m <span class="token operator">||</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> q <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> q<span class="token operator">&lt;</span>m<span class="token operator">+</span>n<span class="token punctuation">;</span> q<span class="token operator">++</span><span class="token punctuation">)</span> nums1<span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="NOTES"><a class="header-anchor" href="#NOTES"> </a>NOTES</h3>
<ul>
<li>
<p>时间复杂度O(2*(m+n))==O(m+n)，空间复杂度O(m+n)</p>
</li>
<li>
<p>这个方法时最直观的，<strong>算法</strong>是nums1的开头放一个指针，nums2的开头放一个指针，二者比较，将指针所指的较小的数放进临时数组，然后该指针向后移动，直到指针下标等于m或n。<br><br>
我在这里分了两种情况：</p>
<ul>
<li>将nums1中的数放入临时数组 的条件</li>
</ul>
<ol>
<li>nums1的指针所指的数更小</li>
<li><strong>并且</strong> nums1的指针的下标不等于m<br>
说明：如下图所示，此时nums1的指针下标为m，它指向的值将永远小于等于nums2中的数，因此，若不排除这种情况，将导致临时数组被一直填入0<br>
<img src="1.png" alt="条件2说明图">
</li>
<li><strong>或者</strong> nums2的指针的下标已经等于n（即nums2中的数已经都放进了临时数组，指针超出了数组边界）</li>
</ol>
<ul>
<li>将nums2中的数放入临时数组</li>
</ul>
<ol>
<li>nums2的指针所指的数更小</li>
<li><strong>或者</strong> nums的指针的下标已经等于n（即nums2中的数已经都放进了临时数组，指针超出了数组边界）</li>
</ol>
<p>==注意== 标有“<strong>或者</strong>”的条件需要，放在其他条件之前，这是因为，若不这样将对两个数组进行越界访问，所以如果先判断了满足该条件，就不会在对数组进行访问。<br><br>
因此，代码如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>n <span class="token operator">||</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">!=</span>m<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>m <span class="token operator">||</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> temp<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<p><br><strong>但是这种方法有一定的缺陷，即创建了一个临时数组，提高了空间复杂度。那么有没有可能不创建数组，而是直接边排序边覆盖nums1呢？CyC2018为我们提供了这种算法！</strong></p>
<h2 id="参考代码【更高效的方法】"><a class="header-anchor" href="#参考代码【更高效的方法】"> </a>参考代码【更高效的方法】</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//nums1指针的下标</span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//nums2指针的下标</span>
        <span class="token keyword">int</span> mergeIndex <span class="token operator">=</span> m<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//归并后nums1的下标</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">||</span> j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> nums1<span class="token punctuation">[</span>mergeIndex<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> nums1<span class="token punctuation">[</span>mergeIndex<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> nums1<span class="token punctuation">[</span>mergeIndex<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> nums1<span class="token punctuation">[</span>mergeIndex<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="NOTES-v2"><a class="header-anchor" href="#NOTES-v2"> </a>NOTES</h3>
<ul>
<li>时间复杂度O(m+n)，空间复杂度O(1)</li>
<li>为了避免还没有排序的nums1中的数字被覆盖，<s>所以我被迫想出了第一种方法，我怎么也想不到，指针可以从后往前遍历，是我输了！</s> 两个指针从后往前遍历数组，代码不难理解</li>
<li>值得注意的是，if 语句的条件的顺序，之所以将 i&lt;0 和 j&lt;0 放在最前面，也是为了避免数组被越界访问。同样，判断过了两个指针已经到了数组外面，就不会再访问数组了</li>
</ul>
<h1 id="141-环形链表"><a class="header-anchor" href="#141-环形链表"> </a>141. 环形链表</h1>
<h2 id="问题描述-v2"><a class="header-anchor" href="#问题描述-v2"> </a>问题描述</h2>
<blockquote>
<p><strong>给定一个链表，判断链表中是否有环。</strong><br>
为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。<br>
<strong>示例 1：</strong><br>
输入：head = [3,2,0,-4], pos = 1<br>
输出：true<br>
解释：链表中有一个环，其尾部连接到第二个节点。<br>
<img src="2.png" alt="在这里插入图片描述"><br>
<strong>示例 2：</strong><br>
输入：head = [1,2], pos = 0<br>
输出：true<br>
解释：链表中有一个环，其尾部连接到第一个节点。<br>
<img src="3.png" alt="在这里插入图片描述"><br>
<strong>示例 3：</strong><br>
输入：head = [1], pos = -1<br>
输出：false<br>
解释：链表中没有环。<br>
<img src="4.png" alt="在这里插入图片描述"><br>
<strong>进阶：<br>
你能用 O(1)（即，常量）内存解决此问题吗？</strong></p>
</blockquote>
<h2 id="参考代码【最基础的做法（没用双指针）】"><a class="header-anchor" href="#参考代码【最基础的做法（没用双指针）】"> </a>参考代码【最基础的做法（没用双指针）】</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListNode</span><span class="token punctuation">&gt;</span></span> nodesHash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ListNode</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>nodesHash<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span> nodesHash<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="NOTES-v3"><a class="header-anchor" href="#NOTES-v3"> </a>NOTES</h3>
<ul>
<li>
<p>时间复杂度O(n)，空间复杂度O(n)</p>
</li>
<li>
<p>这个方法主要是使用了哈希表，下面引用官方题解：</p>
<blockquote>
<p><strong>思路</strong>：我们可以通过检查一个结点此前是否被访问过来判断链表是否为环形链表。常用的方法是使用哈希表。</p>
</blockquote>
<p><strong>算法</strong>：从头遍历链表，将结点一个个不重复的放入哈希表。我们通过HashSet类中的contains()方法来逐个判断该结点是不是在哈希表中已经存在，如果不存在就把它放进去；如果存在说明链表中存在一个环。<br><br>
是不是超级简单！至于为什么使用哈希表，恐怕是contains()这个方法比较方便吧？<strong>（如果另有原因，请务必赐教！）</strong></p>
</li>
</ul>
<p><strong>但是这个方法并不能实现空间复杂度为O(1)的进阶问题，我们还需要另辟蹊径！官方题解同样给了我一个新的思路。</strong></p>
<h2 id="参考代码【实现进阶问题的方法（利用双指针】"><a class="header-anchor" href="#参考代码【实现进阶问题的方法（利用双指针】"> </a>参考代码【实现进阶问题的方法（利用双指针】</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token class-name">ListNode</span> l1 <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment">//速度较慢的指针</span>
            <span class="token class-name">ListNode</span> l2 <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//速度较快的指针</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>l2 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> l1<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> l2<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>l1 <span class="token operator">==</span> l2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//两指针相遇，说明链表带环</span>
                l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//一次走两“格”</span>
                l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//一次走一“格”</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>   
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="NOTES-v4"><a class="header-anchor" href="#NOTES-v4"> </a>NOTES</h3>
<ul>
<li>
<p>时间复杂度O(n)，空间复杂度O(1)</p>
</li>
<li>
<p><strong>思路</strong>：想象一下！龟兔赛跑，如果是环形跑道，速度更快的兔子势必会和乌龟相遇。</p>
</li>
<li>
<p><strong>算法</strong>：设置一快（兔子）一慢（龟）的两个指针。快指针通过每次走两“格”实现，慢指针一次走一“格”，如此循环下去。若两指针相等（龟兔相遇），说明链表带环。且当其中一个指针为null（不止如此，下面有说明），即指针指到了链表结尾时，退出循环，同时也说明链表不带环。如下代码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ListNode</span> l1 <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment">//速度较慢的指针</span>
<span class="token class-name">ListNode</span> l2 <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//速度较快的指针</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>l2 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> l1<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> l2<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l1 <span class="token operator">==</span> l2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//两指针相遇，说明链表带环</span>
    <span class="token comment">// l2 = l2.next; //第一次我写成了这样，</span>
                      <span class="token comment">//显然我没有理解快指针是什么意思</span>
                      <span class="token comment">//我以为在前面的指针就是快的</span>
    l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//快指针，一次走两“格”</span>
    l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//慢指针，一次走一“格”</span>
    <span class="token punctuation">}</span>
<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p><strong>注意！</strong> while的循环条件：不光要两个指针不等于null，还要考虑到链表中只有两个结点的情况，所以要加上快结点的下一个结点也不等于null（l2.next != null）。没有该条件的后果如下：<br>
<img src="5.png" alt="不加l2.next != null所产生的后果"></p>
</li>
<li>
<p>也别忘了链表为空的情况嗷</p>
</li>
</ul>
<h1 id="524-通过删除字母匹配到字典里最长单词"><a class="header-anchor" href="#524-通过删除字母匹配到字典里最长单词"> </a>524. 通过删除字母匹配到字典里最长单词</h1>
<h2 id="问题描述-v3"><a class="header-anchor" href="#问题描述-v3"> </a>问题描述</h2>
<blockquote>
<p><strong>给定一个字符串和一个字符串字典，找到字典里面最长的字符串，该字符串可以通过删除给定字符串的某些字符来得到。如果答案不止一个，返回长度最长且字典顺序最小的字符串。如果答案不存在，则返回空字符串。</strong><br>
<strong>示例 1:</strong><br>
输入:<br>
s = “abpcplea”, d = [“ale”,“apple”,“monkey”,“plea”]<br>
输出:<br>
“apple”<br>
<strong>示例 2:</strong><br>
输入:<br>
s = “abpcplea”, d = [“a”,“b”,“c”]<br>
输出:<br>
“a”<br>
<strong>说明:</strong><br>
所有输入的字符串只包含小写字母。<br>
字典的大小不会超过 1000。<br>
所有输入的字符串长度不会超过 1000。</p>
</blockquote>
<h2 id="参考代码"><a class="header-anchor" href="#参考代码"> </a>参考代码</h2>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSubstr</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> substr<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> substr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> substr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> substr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">findLongestWord</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> longestStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> strInDic <span class="token operator">:</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> longestLen <span class="token operator">=</span> longestStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> strInDicLen <span class="token operator">=</span> strInDic<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>longestLen <span class="token operator">&lt;</span> strInDicLen<span class="token punctuation">)</span> <span class="token operator">||</span> 
            <span class="token punctuation">(</span>longestLen <span class="token operator">==</span> strInDicLen <span class="token operator">&amp;&amp;</span> longestStr<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>strInDic<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isSubstr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> strInDic<span class="token punctuation">)</span><span class="token punctuation">)</span> longestStr <span class="token operator">=</span> strInDic<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> longestStr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="NOTES-v5"><a class="header-anchor" href="#NOTES-v5"> </a>NOTES</h3>
<ul>
<li>时间复杂度O(n<sup>2</sup>)，空间复杂度O(n)</li>
<li>千万不要被这道题是中等难度而被吓倒了，理清思路后可以发现并不复杂。<br><br>
<strong>思路</strong>：解决此题可以分为两个步骤：
<ol>
<li>找到“最长”（如果在字典里还有跟它一样长的，就选择字典顺序最小的）的字符串，这个字符串不光要最长，还要具备下面的条件</li>
<li>是s字符串的子字符串substr，即删除s字符串中的几个字符就能得到substr。<strong>这里要用到双指针！</strong><br>
综上，只有一个字符串<strong>先后</strong>满足第二个和第一个条件，这才是我们的所求。<br><br>
明白了解题思路，相信代码也就不难看懂了。看懂容易，我还是<strong>建议自己写一遍</strong>。这样你才会明白为什么longestStr的初始值为什么是""，而不是d.get(0)；你才会明白为什么在isSubStr()方法中，为什么当 j 等于substr.length()时，才说明 “it is substr” ······</li>
</ol>
</li>
</ul>
<h1 id="Summary"><a class="header-anchor" href="#Summary"> </a>Summary</h1>
<p>终于刷完了关于双指针的基本问题，那么今后当我们碰到什么样类型的题时应该想起来使用双指针呢？</p>
<ul>
<li><strong>在一个数组/字符串中，需要两个变量进行某种操作</strong>【一个数组/字符串放两个指针】
<ul>
<li>求和 - 167. 两数之和 II - 输入有序数组 / 633. 平方数之和（平方求和）</li>
<li>调换位置 - 345. 反转字符串中的元音字母（调换元音字母的位置）</li>
<li>比较 - 快速排序算法（比较大小 / 相当于小的数和大的数调换位置）</li>
<li>巧妙的操作 - 141. 环形链表（让一个指针追赶另一个指针，还记得龟兔赛跑嘛）</li>
</ul>
</li>
<li><strong>对两个数组/字符串相互进行某种操作</strong>【两个数组/字符串各放一个指针】
<ul>
<li>比较 - 524. 通过删除字母匹配到字典里最长单词（判断一个字符串是不是另一个字符串的子字符串）/ 88. 合并两个有序数组（比较指针所指的数的大小）</li>
</ul>
</li>
</ul>
<p><s><strong>总而言之，以我为数不多的做题经验，或许碰到 有序数组 / 调换子母或数字的位置 这样的问题，我们应该想到双指针法。</strong></s></p>
<h1 id="说明"><a class="header-anchor" href="#说明"> </a>说明</h1>
<p>语言：Java<br><br>
如有错误，还望指正</p>
<h1 id="参考资料"><a class="header-anchor" href="#参考资料"> </a>参考资料</h1>
<ul>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E5%8F%8C%E6%8C%87%E9%92%88.md">CyC2018/CS-Notes/Leetcode题解-双指针</a></li>
<li><a href="https://leetcode-cn.com/problems/linked-list-cycle/solution/huan-xing-lian-biao-by-leetcode/">141题-力扣官方题解</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>算法</tag>
        <tag>Leetcode</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven创建项目报错</title>
    <url>/2022/03/06/Maven%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h1 id="问题描述"><a class="header-anchor" href="#问题描述"> </a>问题描述</h1>
<p>根据<a href="https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html">官方文档</a>，创建项目时输入</p>
<p><code>mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false</code></p>
<p>时，打印</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Scanning <span class="token keyword">for</span> projects<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> ------------------------------------------------------------------------
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> BUILD FAILURE
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> ------------------------------------------------------------------------
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Total time:  <span class="token number">0.070</span> s
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Finished at: <span class="token number">2022</span>-03-06T16:11:14+08:00
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> ------------------------------------------------------------------------
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> The goal you specified requires a project to execute but there is no POM <span class="token keyword">in</span> this directory <span class="token punctuation">(</span>D:<span class="token punctuation">\</span>work<span class="token punctuation">\</span>workspace<span class="token punctuation">)</span>. Please verify you invoked Maven from the correct directory. -<span class="token operator">&gt;</span> <span class="token punctuation">[</span>Help <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span>
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> To see the full stack trace of the errors, re-run Maven with the -e switch.
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> Re-run Maven using the -X switch to <span class="token builtin class-name">enable</span> full debug logging.
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span>
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> For <span class="token function">more</span> information about the errors and possible solutions, please <span class="token builtin class-name">read</span> the following articles:
<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> <span class="token punctuation">[</span>Help <span class="token number">1</span><span class="token punctuation">]</span> http://cwiki.apache.org/confluence/display/MAVEN/MissingProjectException<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://s2.loli.net/2022/03/06/yEidoNcLu1nM8zw.png" alt="image-20220306161148498"></p>
<h1 id="解决方法"><a class="header-anchor" href="#解决方法"> </a>解决方法</h1>
<p><strong>😎 给命令打上双引号（“”）！</strong></p>
<p><code>mvn archetype:generate "-DgroupId=com.mycompany.app" "-DartifactId=my-app" "-DarchetypeArtifactId=maven-archetype-quickstart" "-DarchetypeVersion=1.4" "-DinteractiveMode=false"</code></p>
<p>成功！</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Scanning <span class="token keyword">for</span> projects<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> ------------------<span class="token operator">&lt;</span> org.apache.maven:standalone-pom <span class="token operator">&gt;</span>-------------------
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Building Maven Stub Project <span class="token punctuation">(</span>No POM<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --------------------------------<span class="token punctuation">[</span> pom <span class="token punctuation">]</span>---------------------------------
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> maven-archetype-plugin:3.2.1:generate <span class="token punctuation">(</span>default-cli<span class="token punctuation">)</span> <span class="token operator">&gt;</span> generate-sources @ standalone-pom <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;&lt;</span> maven-archetype-plugin:3.2.1:generate <span class="token punctuation">(</span>default-cli<span class="token punctuation">)</span> <span class="token operator">&lt;</span> generate-sources @ standalone-pom <span class="token operator">&lt;&lt;&lt;</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span>
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> --- maven-archetype-plugin:3.2.1:generate <span class="token punctuation">(</span>default-cli<span class="token punctuation">)</span> @ standalone-pom ---
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Generating project <span class="token keyword">in</span> Batch mode
<span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> No archetype found <span class="token keyword">in</span> remote catalog. Defaulting to internal catalog
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> ----------------------------------------------------------------------------
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Using following parameters <span class="token keyword">for</span> creating project from Archetype: maven-archetype-quickstart:1.4
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> ----------------------------------------------------------------------------
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Parameter: groupId, Value: com.mycompany.app
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Parameter: artifactId, Value: my-app
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Parameter: version, Value: <span class="token number">1.0</span>-SNAPSHOT
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Parameter: package, Value: com.mycompany.app
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Parameter: packageInPathFormat, Value: com/mycompany/app
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Parameter: version, Value: <span class="token number">1.0</span>-SNAPSHOT
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Parameter: package, Value: com.mycompany.app
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Parameter: groupId, Value: com.mycompany.app
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Parameter: artifactId, Value: my-app
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Project created from Archetype <span class="token keyword">in</span> dir: D:<span class="token punctuation">\</span>work<span class="token punctuation">\</span>workspace<span class="token punctuation">\</span>my-app
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> ------------------------------------------------------------------------
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> BUILD SUCCESS
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> ------------------------------------------------------------------------
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Total time:  <span class="token number">2.114</span> s
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Finished at: <span class="token number">2022</span>-03-06T16:35:49+08:00
<span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> ------------------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://s2.loli.net/2022/03/06/kGqC14vs5Wb6MhA.png" alt="image-20220306161451136"></p>
<h1 id="参考资料"><a class="header-anchor" href="#参考资料"> </a>参考资料</h1>
<p><a href="https://stackoverflow.com/questions/60234708/mvn-command-returns-error-the-goal-you-specified-requires-a-project-to-execut">mvn command returns: The goal you specified requires a project to execute but there is no POM in this directory - StackOverflow</a></p>
]]></content>
      <categories>
        <category>报错</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>报错</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手教你在Hexo中使用Github贡献日历（以Next主题为例）</title>
    <url>/2021/07/14/Next%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8Github%E8%B4%A1%E7%8C%AE%E6%97%A5%E5%8E%86%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="起因"><a class="header-anchor" href="#起因"> </a>起因</h1>
<p><strong>以下都是废话，可以直接跳到下一节~</strong></p>
<p>其实，我对能够将 Github 贡献日历（Contribution Calendar）放进自己的博客这件事，早就垂涎久矣。当初尝试了各种<a href="https://www.freesion.com/article/7086773921/">方法</a>，都没有能够在我的 Next 主题上实现，得知 <a href="https://gitee.com/cungudafa/hexo-theme-sakuraplus">sakuraplus主题</a> 已经融合了这个功能实在是羡慕。</p>
<p>最近准备校招，压力有些大，不想学习，就开始琢磨着折腾一下自己的博客，妄想能给面试官留个特别的印象（bushi）。今天，打开 Github 看见贡献日历，又动了试试看的念头。百度一下，发现了<a href="https://zfe.space/">小冰</a>大神写的 hexo-githubcalendar 插件，他实现的效果实在是太棒了，引入方法也很简单，而且很多主题都能使用。</p>
<img src="https://img-blog.csdnimg.cn/20210714211823720.png" alt="小冰的插件效果" style="zoom: 67%;">
<p>但是，我按照他的<a href="https://zfe.space/post/hexo-githubcalendar.html">教程</a>一步步做了，却总是显示不出。于是，我在 Github <a href="https://github.com/Zfour">Zfour</a>/<a href="https://github.com/Zfour/hexo-github-calendar">hexo-github-calendar</a> 中的 <a href="https://github.com/Zfour/hexo-github-calendar/issues/10">Next theme Issue</a> 下，看见了<a href="https://github.com/aixiu">叶叶菜</a>的回复，试图和他取得联系，问问他是怎么做的。很幸运，叶叶菜不久就加了我 QQ，他说，他嫌麻烦没有用这个插件，并且热心地推荐了一个<a href="https://www.rshah.org/">老外</a>实现的方法。</p>
<p>Github 地址：<a href="https://github.com/2016rshah/githubchart-api">https://github.com/2016rshah/githubchart-api</a></p>
<p><strong>这个方法最绝的地方是，将你自己的贡献日历变成了图片，只需要使用一行 HTML 语句，就可以在任何地方使用贡献日历。</strong></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ghchart.rshah.org/2016rshah<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2016rshah<span class="token punctuation">'</span>s Github chart<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>但缺点是，不像小冰的插件那样可以显示上传日期以及提交次数等等。</strong></p>
<h1 id="现在开始！"><a class="header-anchor" href="#现在开始！"> </a>现在开始！</h1>
<p><strong>此方法的 Github 地址：<a href="https://github.com/2016rshah/githubchart-api">https://github.com/2016rshah/githubchart-api</a></strong></p>
<h2 id="最简单的方法"><a class="header-anchor" href="#最简单的方法"> </a>最简单的方法</h2>
<p>如果你想以最简单方法使用贡献日历，那么只需要在你的 Markdown 文本中，使用：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ghchart.rshah.org/你的Github用户名<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>???<span class="token punctuation">'</span>s Github chart<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>例如，若你想在“关于”页面使用贡献日历，那么可以在 <code>Blog\source\about</code> 目录下，打开 <code>index.md</code>，在需要的位置插入上面的语句即可。</p>
<img src="https://i.loli.net/2021/07/14/SkvfZVcC1RdUazy.png" alt="示例" style="zoom: 50%;">
<p>注意，要使用自己的 Github 用户名哦！</p>
<p>效果如下：</p>
<img src="https://i.loli.net/2021/07/14/c3YE5OrWsTMKvnj.png" alt="image-20210714201121590" style="zoom:50%;">
<h2 id="自定义贡献日历的配色方案"><a class="header-anchor" href="#自定义贡献日历的配色方案"> </a>自定义贡献日历的配色方案</h2>
<p>这个方法的作者很贴心地允许我们自定义贡献日历的配色方案。</p>
<p>我们只需要将 <code>src</code> 属性改为 <code>https://ghchart.rshah.org/&lt;HEX-COLOR&gt;/你的Github用户名</code>，其中 <code>&lt;HEX_COLOR&gt;</code> 为任意的十六进制颜色代码。它将根据这个颜色，自动为日历修改配色。</p>
<p>完整语句如下：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ghchart.rshah.org/409ba5/你的Github用户名<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>???<span class="token punctuation">'</span>s Blue Github Chart<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>效果图：</p>
<img src="https://ghchart.rshah.org/409ba5/gainii" alt="Gainii's Blue Github Chart">
<h1 id="放进首页和归档页（以Next主题为例）"><a class="header-anchor" href="#放进首页和归档页（以Next主题为例）"> </a>放进首页和归档页（以Next主题为例）</h1>
<p>首先，打开 <code>Blog\themes\next\layout</code> 目录下的 <code>_layout.njk</code> 文件。</p>
<p>找到 <code>{%- include '_partials/header/sub-menu.njk' -%}</code>，在这条 twig 语句下方添加如下代码：</p>
<pre class="line-numbers language-twig" data-language="twig"><code class="language-twig"><span class="token tag"><span class="token ld"><span class="token punctuation">{%-</span> <span class="token keyword">if</span></span> <span class="token property">page</span><span class="token punctuation">.</span><span class="token property">type</span> <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string"><span class="token punctuation">'</span>categories<span class="token punctuation">'</span></span> <span class="token operator">and</span> <span class="token property">page</span><span class="token punctuation">.</span><span class="token property">type</span> <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string"><span class="token punctuation">'</span>tags<span class="token punctuation">'</span></span> <span class="token operator">and</span> <span class="token property">page</span><span class="token punctuation">.</span><span class="token property">type</span> <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string"><span class="token punctuation">'</span>schedule<span class="token punctuation">'</span></span> <span class="token operator">and</span> <span class="token property">page</span><span class="token punctuation">.</span><span class="token property">type</span> <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string"><span class="token punctuation">'</span>works<span class="token punctuation">'</span></span> <span class="token operator">and</span> <span class="token property">page</span><span class="token punctuation">.</span><span class="token property">type</span> <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string"><span class="token punctuation">'</span>about<span class="token punctuation">'</span></span> <span class="token operator">and</span> <span class="token property">page</span><span class="token punctuation">.</span><span class="token property">type</span> <span class="token operator">!=</span><span class="token operator">=</span> <span class="token string"><span class="token punctuation">'</span>post<span class="token punctuation">'</span></span><span class="token rd"><span class="token punctuation">%}</span></span></span>
	<span class="token other"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-block animated fadeIn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-title<span class="token punctuation">"</span></span> <span class="token attr-name">itemprop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name headline<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/你的Github用户名<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-title-link<span class="token punctuation">"</span></span> <span class="token attr-name">itemprop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Github Contribution Calendar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-body animated fadeInDown<span class="token punctuation">"</span></span> <span class="token attr-name">itemprop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>articleBody<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">margin-top</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ghchart.rshah.org/e77c8e/你的Github用户名<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>???<span class="token punctuation">'</span>s Blue Github Chart<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="token tag"><span class="token ld"><span class="token punctuation">{%-</span> <span class="token keyword">endif</span></span> <span class="token rd"><span class="token punctuation">%}</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我的代码：</p>
<p><img src="https://i.loli.net/2021/07/14/gkOJsnQHBAZ4bNY.png" alt="image-20210714202715120"></p>
<h2 id="⚠️-注意"><a class="header-anchor" href="#⚠️-注意"> </a>⚠️ 注意</h2>
<p>☝️<strong>第一，要把<span style="color: orange;">黄色框框</span>里面的代码换成你的信息！</strong></p>
<p>✌️<strong>第二，<span style="color: green;">绿色框框</span>要根据你博客的情况写。</strong></p>
<p>其中，<code>page.type</code> 是在对应页面的 <code>index.md</code> 文件的首部设置的，语句为 <code>type: "对应类型"</code>。</p>
<p><strong>以 about 页面为例</strong>，<code>page.type</code>在 <code>Blog\source\about</code> 目录下的 <code>index.md</code> 文件的首部添加 <code>type: "about"</code>，如下：</p>
<p><img src="https://i.loli.net/2021/07/14/fKGS7puCMB6eUcT.png" alt="image-20210714204150830"></p>
<p><strong>因此，如果你不想在你的每篇文章顶部都显示贡献日历，那么你将不得不在每篇文章的 Markdown 文件首部都添加 <code>type: "post"</code>。</strong></p>
<p>没错，我也觉得很麻烦，如果你有更好的办法，请告诉我！😋</p>
<p>另外，如果你想让贡献日历显示在 about 页面，只需要将 <code>page.type !== 'about'</code> 删掉即可。</p>
<h1 id="最终效果"><a class="header-anchor" href="#最终效果"> </a>最终效果</h1>
<p>首页的效果如下：</p>
<img src="https://i.loli.net/2021/07/14/NI71t4XqQ3uYG6w.png" alt="image-20210714203427808" style="zoom:50%;">
<p>归档页效果如下：</p>
<img src="https://i.loli.net/2021/07/14/YBlDadXzsfWH36Z.png" alt="image-20210714203456597" style="zoom:50%;">
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>Hexo博客</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue响应式原理</title>
    <url>/2021/04/22/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="Vue响应式原理"><a class="header-anchor" href="#Vue响应式原理"> </a>Vue响应式原理</h1>
<h2 id="1-什么是Vue响应"><a class="header-anchor" href="#1-什么是Vue响应"> </a>1. 什么是Vue响应</h2>
<blockquote>
<p>数据发生变化后，会重新对页面渲染，这就是Vue响应式</p>
</blockquote>
<img src="https://user-gold-cdn.xitu.io/2020/7/12/17343bec8052a2ff?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="响应式图例" style="zoom:67%;">
<p><img src="https://user-gold-cdn.xitu.io/2020/7/12/17343bec82aa9093?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="流程图"></p>
<h2 id="2-Vue响应过程"><a class="header-anchor" href="#2-Vue响应过程"> </a>2. Vue响应过程</h2>
<ul>
<li><strong>数据劫持 / 数据代理</strong>：侦测数据的变化</li>
<li><strong>依赖收集</strong>：收集视图依赖了哪些数据</li>
<li><strong>发布订阅者模式</strong>：数据变化时，自动“通知”需要更新的试图部分，并进行更新</li>
</ul>
<h2 id="3-如何侦测数据变化"><a class="header-anchor" href="#3-如何侦测数据变化"> </a>3. 如何侦测数据变化</h2>
<p>两种方法：</p>
<ul>
<li><strong>Object.defineProperty</strong>：数据劫持</li>
<li>ES6的<strong>Proxy</strong>：数据代理</li>
</ul>
<h3 id="3-1-Object-defineProperty-实现"><a class="header-anchor" href="#3-1-Object-defineProperty-实现"> </a>3.1. Object.defineProperty 实现</h3>
<p>Vue通过设定对象属性的 <code>setter/getter</code> 方法来监听数据的变化：</p>
<ul>
<li><code>getter</code>收集依赖</li>
<li>每个<code>setter</code>方法都是一个<code>观察者</code>，在<code>数据变更</code>时，通知<code>订阅者</code>更新视图</li>
</ul>
<p>代码如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">function render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//set的时候会走这里，重新渲染</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'模拟视图渲染'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
let data <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">'gagaLab'</span><span class="token punctuation">,</span>
  location<span class="token operator">:</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>定义核心函数 <code>observe</code></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">observe</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 我们来用它使对象变成可观察的</span>
  <span class="token comment">// 判断类型</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">defineReactive</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 递归子属性</span>
    <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//可枚举（可以遍历）</span>
      configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//可配置（比如可以删除）</span>
      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">reactiveGetter</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token comment">// 监听</span>
        <span class="token keyword">return</span> value
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">reactiveSetter</span> <span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">observe</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token comment">//如果赋值是一个对象，也要递归子属性</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'set'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span> <span class="token comment">// 监听</span>
          <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          value <span class="token operator">=</span> newVal
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>改变data的属性，触发set；获取data的属性，触发get。</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">data<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
  y<span class="token operator">:</span> <span class="token number">1000</span>
<span class="token punctuation">}</span> <span class="token comment">//打印     set {x: 1000,y: 1000} 模拟视图渲染</span>
data<span class="token punctuation">.</span>name <span class="token comment">//打印   get gagaLab</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>以上代码的主要作用：</strong></p>
<p>observe这个函数传入一个 <code>obj（需要被追踪变化的对象）</code>，通过遍历所有属性的方式对该对象的每一个属性都通过 <code>defineReactive</code> 处理，给每个属性加上<code>set</code>和<code>get</code>方法，以此来达到实现侦测对象变化。值得注意的是，observe 会进行递归调用。</p>
<p><strong>如何侦测Vue中data的数据：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Vue</span> <span class="token punctuation">{</span>
    <span class="token comment">/* Vue构造类 */</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_data <span class="token operator">=</span> options<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
        <span class="token function">observer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是！<strong>上面的代码无法检测到对象属性的<code>添加或删除</code>(如data.location.a=1,增加一个a属性)。</strong></p>
<p>因为 Vue 通过Object.defineProperty来将对象的key转换成getter/setter的形式来追踪变化，但getter/setter只能追踪一个数据<code>是否被修改</code>，无法追踪<code>新增属性和删除</code>属性。</p>
<ul>
<li>
<p>如果要删除属性，可以用<code>vm.$delete</code>实现。</p>
</li>
<li>
<p>如果要新增属性</p>
<ul>
<li>可以使用 Vue.set(location, a, 1) 方法向嵌套对象添加响应式属性;</li>
<li>也可以给这个对象重新赋值，比如data.location = {…data.location,a:1}</li>
</ul>
</li>
</ul>
<p>另外，Object.defineProperty 不能监听数组的变化，需要进行数组方法的重写</p>
<h3 id="📌-我的代码"><a class="header-anchor" href="#📌-我的代码"> </a>📌 我的代码</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 监听数据变化</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">'Jack'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> value <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我监听到了value发生变化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      value <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我获取到了value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3-2-Proxy实现"><a class="header-anchor" href="#3-2-Proxy实现"> </a>3.2.  Proxy实现</h3>
<p>Proxy 是 <code>JavaScript 2015</code> 的一个新特性。</p>
<p>Proxy 的<code>代理</code>是针对<code>整个对象</code>的，而不是对象的某个属性，因此不同于 Object.defineProperty 的必须遍历对象每个属性，<strong>Proxy 只需要做<code>一层代理</code>就可以监听<code>同级结构</code>下的所有属性变化</strong>，当然对于<code>深层结构</code>，递归还是需要进行的。此外Proxy支持代理<code>数组</code>的变化。</p>
<p>这种方法，代码不仅精简，而且还是实现一套代码对对象和数组的侦测都适用。</p>
<p>不过Proxy兼容性不太好！</p>
<p>代码如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'模拟视图的更新'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">'前端工匠'</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  arr<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果取的值是对象就再对这个对象进行数据劫持</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//key为length时，表示遍历完了最后一个属性</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">'length'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
proxy<span class="token punctuation">.</span>age<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'gagaLab'</span> <span class="token comment">// 支持新增属性</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>age<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 模拟视图的更新 浪里行舟</span>
proxy<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'gagaLab'</span> <span class="token comment">//支持数组的内容发生变化</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span>arr<span class="token punctuation">)</span> <span class="token comment">// 模拟视图的更新 ['gagaLab', 2, 3 ]</span>
proxy<span class="token punctuation">.</span>arr<span class="token punctuation">.</span>length<span class="token operator">--</span> <span class="token comment">// 无效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-收集依赖"><a class="header-anchor" href="#4-收集依赖"> </a>4. 收集依赖</h2>
<h3 id="4-1-为什么要收集依赖"><a class="header-anchor" href="#4-1-为什么要收集依赖"> </a>4.1. 为什么要收集依赖</h3>
<blockquote>
<p>我们之所以要观察数据，其目的在于当数据的属性发生变化时，可以通知那些曾经使用了该数据的地方。比如例子中，模板中使用了location 数据，当它发生变化时，要向使用了它的地方发送通知。</p>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> globalData <span class="token operator">=</span> <span class="token punctuation">{</span>
    text<span class="token operator">:</span> <span class="token string">'浪里行舟'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> test1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    template<span class="token operator">:</span>
        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;
            &lt;span&gt;{{text}}&lt;/span&gt; 
        &lt;div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> globalData
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> test2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    template<span class="token operator">:</span>
        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;
            &lt;span&gt;{{text}}&lt;/span&gt; 
        &lt;div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> globalData
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果执行以下语句：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">globalData<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'gagaLab'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>就需要通知 <code>test1</code> 以及 <code>test2</code> 这两个Vue实例进行视图的<code>更新</code>,我们只有通过<code>收集依赖</code>才能知道哪些地方依赖我的数据，以及数据更新时<code>派发更新</code>。那依赖收集是如何实现的？其中的核心思想就是“事件发布订阅模式”。</p>
<h3 id="4-2-如何收集依赖"><a class="header-anchor" href="#4-2-如何收集依赖"> </a>4.2. 如何收集依赖</h3>
<h4 id="4-2-1-订阅者Dep"><a class="header-anchor" href="#4-2-1-订阅者Dep"> </a>4.2.1 订阅者Dep</h4>
<p><strong>为什么要引入Dep：</strong></p>
<p>收集依赖需要为依赖找一个存储依赖的地方，为此我们创建了Dep。它用来<code>收集依赖</code>、<code>删除依赖</code>和<code>向依赖发送</code>消息等。 于是我们先来实现一个<code>订阅者 Dep 类</code>，用于<code>解耦属性</code>的依赖收集和派发更新操作，<strong>说得具体点</strong>：它的主要作用是用来<code>存放 Watcher 观察者</code>对象。我们可以把Watcher理解成一个<code>中介</code>的角色，<code>数据发生变化</code>时通知它，然后它再通知<code>其他地方</code>。</p>
<p><strong>Dep的简单实现：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* 用来存放Watcher对象的数组 */</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* 在subs中添加一个Watcher对象 */</span>
    <span class="token function">addSub</span> <span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* 通知所有Watcher对象更新视图 */</span>
    <span class="token function">notify</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sub</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            sub<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上代码主要做了两件事：</p>
<ul>
<li>用 addSub 方法可以在目前的 <code>Dep</code> 对象中增加一个 <code>Watcher</code> 的订阅操作；</li>
<li>用 notify 方法通知目前 <code>Dep</code> 对象的 <code>subs</code> 中的所有 <code>Watcher</code> 对象触发更新操作。 所以当需要<code>依赖收集</code>的时候调用 addSub，当需要<code>派发更新</code>的时候调用 notify。</li>
</ul>
<p>调用：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
dp<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">//依赖收集的时候</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'emit here'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
dp<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//派发更新的时候</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="4-2-2-观察者-Watcher"><a class="header-anchor" href="#4-2-2-观察者-Watcher"> </a>4.2.2. 观察者 Watcher</h4>
<p>Vue 中定义一个 Watcher 类来表示<code>观察订阅依赖</code>。</p>
<p><strong>为什么要引入Watcher：</strong></p>
<p>当<code>属性</code>发生变化后，我们要通知<code>用到数据</code>的地方，而使用这个数据的地方有很多，而且类型还不一样，既有可能是模板，也有可能是用户写的一个watch,这时需要抽象出一个<code>能集中处理</code>这些情况的类。然后，我们在依赖收集阶段只收集这个封装好的类的实例进来，通知也只通知它一个，再由它负责通知其他地方。</p>
<p><strong>依赖收集的目的：</strong></p>
<p>将观察者 Watcher 对象存放到当前闭包中的订阅者 Dep 的 subs 中。</p>
<p>形成如下所示的这样一个关系<br>
<img src="https://user-gold-cdn.xitu.io/2020/7/12/17343bec8082db69?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="参见《剖析Vue.js内部运行机制》"></p>
<p><strong>Watcher的简单简单实现：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将 Dep.target 指向自己</span>
    <span class="token comment">// 然后触发属性的 getter 添加监听</span>
    <span class="token comment">// 最后将 Dep.target 置空</span>
    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb
    <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj
    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>
  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获得新值</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>obj<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>key<span class="token punctuation">]</span>
   <span class="token comment">// 我们定义一个 cb 函数，这个函数用来模拟视图更新，调用它即代表更新视图</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在执行构造函数的时候将 Dep.target 指向自身，从而使得收集到了对应的 Watcher，在派发更新的时候取出对应的 Watcher，然后执行 update 函数。</p>
<h3 id="4-3-依赖的本质"><a class="header-anchor" href="#4-3-依赖的本质"> </a>4.3 依赖的本质</h3>
<p>所谓的<code>依赖</code>，其实就是<code>Watcher</code>。</p>
<h3 id="4-4-如何收集依赖"><a class="header-anchor" href="#4-4-如何收集依赖"> </a>4.4 如何收集依赖</h3>
<p>**一句话概括：**在<code>getter</code>中收集依赖，在<code>setter</code>中触发依赖。先收集依赖，即把用到该数据的地方<code>收集起来</code>，然后等<code>属性发生变化</code>时，把之前收集好的依赖<code>循环触发</code>一遍就行了。</p>
<p>具体来说，当外界通过Watcher<code>读取数据</code>时，便会触发<code>getter</code>从而将<code>Watcher添加到依赖中</code>，哪个Watcher触发了getter，就把哪个Watcher收集到Dep中。当数据发生变化时，会循环依赖列表，把所有的Watcher都通知一遍。</p>
<h2 id="5-流程图"><a class="header-anchor" href="#5-流程图"> </a>5. 流程图</h2>
<p><img src="https://user-gold-cdn.xitu.io/2020/7/12/17343bec82aa9093?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="流程图"></p>
<ul>
<li>在 new Vue() 后， Vue 会调用_init 函数进行初始化，也就是init 过程，在 这个过程Data通过Observer转换成了getter/setter的形式，来对数据追踪变化，当被设置的对象被读取的时候会执行getter 函数，而在当被赋值的时候会执行 setter函数。</li>
<li>当外界通过Watcher读取数据时，会触发getter从而将Watcher添加到依赖中。</li>
<li>在修改对象的值的时候，会触发对应的setter， setter通知之前依赖收集得到的 Dep 中的每一个 Watcher，告诉它们自己的值改变了，需要重新渲染视图。这时候这些 Watcher就会开始调用 update 来更新视图。</li>
</ul>
<h2 id="参考资料"><a class="header-anchor" href="#参考资料"> </a>参考资料</h2>
<p><a href="https://juejin.cn/post/6850418111985352711">vue响应式详解（重学前端-vue篇1）</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>搬运</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Vue</title>
    <url>/2021/04/22/%E5%85%B3%E4%BA%8EVue/</url>
    <content><![CDATA[<h1 id="关于Vue"><a class="header-anchor" href="#关于Vue"> </a>关于Vue</h1>
<h2 id="1-什么是MVVM"><a class="header-anchor" href="#1-什么是MVVM"> </a>1 什么是MVVM</h2>
<p>MVVM的核心是<code>数据驱动</code>即ViewModel，ViewModel是View和Model的<code>关系映射</code>。MVVM本质就是基于操作<code>数据</code>来操作<code>视图</code>进而操作<code>DOM</code>，借助于MVVM无需直接操作DOM，开发者只需编写ViewModel中有业务，使得View完全实现<code>自动化</code>。</p>
<h2 id="2-什么是SPA单页面，以及优缺点"><a class="header-anchor" href="#2-什么是SPA单页面，以及优缺点"> </a>2 什么是SPA单页面，以及优缺点</h2>
<h3 id="2-1-SPA"><a class="header-anchor" href="#2-1-SPA"> </a>2.1 SPA</h3>
<p><strong>SPA</strong>（ single-page application ）即一个web项目就只有一个页面（即一个HTML文件,HTML 内容的变换是利用路由机制实现的。</p>
<p>仅在 Web <code>页面初始化</code>时<code>加载</code>相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的<code>重新加载或跳转</code>；取而代之的是<code>利用路由</code>机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的<code>重新加载</code>。</p>
<h3 id="2-2-SPA的优点"><a class="header-anchor" href="#2-2-SPA的优点"> </a>2.2 SPA的优点</h3>
<ol>
<li>用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；</li>
<li>基于上面一点，SPA 相对对服务器压力小；</li>
<li>前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；</li>
</ol>
<h3 id="2-3-SPA的缺点"><a class="header-anchor" href="#2-3-SPA的缺点"> </a>2.3 SPA的缺点</h3>
<ol>
<li>初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；</li>
<li>前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；</li>
<li>SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。
<ul>
<li>seo是一种网站优化技术，也被叫做搜索引擎优化，可以利用搜索规则提高网站上有关搜索的自然排名，主要表现为微博热搜控榜等。</li>
</ul>
</li>
</ol>
<h2 id="3-Vue生命周期"><a class="header-anchor" href="#3-Vue生命周期"> </a>3 Vue生命周期</h2>
<h3 id="3-1-基本概念"><a class="header-anchor" href="#3-1-基本概念"> </a>3.1 基本概念</h3>
<h4 id="3-1-1-什么是生命周期"><a class="header-anchor" href="#3-1-1-什么是生命周期"> </a>3.1.1 什么是生命周期</h4>
<blockquote>
<p>Vue 实例从创建到销毁的过程，就是生命周期。</p>
</blockquote>
<h4 id="3-1-2-生命周期的8个钩子函数-⭐️"><a class="header-anchor" href="#3-1-2-生命周期的8个钩子函数-⭐️"> </a>3.1.2 生命周期的8个钩子函数 ⭐️</h4>
<p><img src="https://img-blog.csdnimg.cn/2021032211093211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpbmJpbmJveA==,size_16,color_FFFFFF,t_70" alt=""></p>
<p>**注意：**浏览器有8个钩子，但是node中做服务端渲染的时候只有beforeCreate和created</p>
<ul>
<li><strong>beforeCreate</strong>是new Vue()之后触发的第一个钩子，在当前阶段data、methods、computed以及watch上的数据和方法<code>都不能</code>被访</li>
<li><strong>created</strong>在实例创建完成后发生，当前阶段已经完成了<code>数据观测</code>，也就是可以使用数据，更改数据，在这里更改数据不会触发<code>updated函数</code>。可以做一些初始数据的获取，在当前阶段<code>无法与Dom进行交互</code>，如果非要想，可以通过<code>vm.$nextTick</code>来访问Dom。</li>
<li><strong>beforeMount</strong>发生在<code>挂载之前</code>，在这之前template模板已导入渲染函数编译。而当前阶段<code>虚拟Dom</code>已经创建完成，即将开始渲染。在此时也可以对数据进行更改，<code>不会触</code>发updated。
<ul>
<li>挂载Mount（没有找到准确定义）：React.js 将组件渲染，并且构造 DOM 元素然后塞入页面的过程；挂载是渲染过程的一步，挂载主要是建立虚拟DOM与HTML的联系</li>
</ul>
</li>
<li><strong>mounted</strong>在<code>挂载完成后</code>发生，在当前阶段，真实的Dom<code>挂载完毕</code>，数据完成双向绑定，可以访问到<code>Dom节点</code>，使用$refs属性对Dom进行操作。</li>
<li><strong>beforeUpdate</strong>发生在<code>更新之前</code>，也就是响应式数据发生更新，虚拟dom<code>重新渲染之前</code>被触发，你可以在当前阶段进行更改数据，不会造成重渲染。</li>
<li><strong>updated</strong>发生在<code>更新完成之后</code>，当前阶段组件Dom已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致<code>无限循环</code>的更新。</li>
<li><strong>beforeDestroy</strong>发生在<code>实例销毁之前</code>，在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作，比如清除计时器，销毁父组件对子组件的重复监听。beforeDestroy(){Bus.$off(“saveTheme”)}</li>
<li><strong>destroyed</strong>发生在<code>实例销毁之后</code>，这个时候只剩下了<code>dom空壳</code>。组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁。</li>
</ul>
<p><strong>速记：Create =&gt; Mount =&gt; Update =&gt; Destroy</strong></p>
<h3 id="3-2-生命周期调用顺序"><a class="header-anchor" href="#3-2-生命周期调用顺序"> </a>3.2 生命周期调用顺序</h3>
<ul>
<li>组件的<code>调用</code>顺序：先父后子</li>
<li><code>渲染完成的</code>顺序：先子后父</li>
<li>组件的<code>销毁</code>操作：先父后子</li>
<li><code>销毁完成</code>的顺序：先子后父</li>
</ul>
<p><strong>加载渲染过程：</strong> 父beforeCreate -&gt; 父created -&gt; <code>父beforeMount</code> -&gt; <code>子beforeCreate</code> -&gt; 子created -&gt; 子beforeMount -&gt; 子mounted -&gt; 父mounted</p>
<p><strong>子组件更新过程：</strong> 父beforeUpdate -&gt; 子beforeUpdate -&gt; 子updated -&gt; 父updated</p>
<p><strong>父组件更新过程：</strong> 父 beforeUpdate -&gt; 父 updated</p>
<p><strong>销毁过程：</strong> 父beforeDestroy -&gt; 子beforeDestroy -&gt; 子destroyed -&gt; 父destroyed</p>
<h3 id="3-3-生命周期的作用⭐️"><a class="header-anchor" href="#3-3-生命周期的作用⭐️"> </a>3.3 生命周期的作用⭐️</h3>
<p>生命周期中的多个事件钩子，让控制Vue实例的过程更加清晰。</p>
<h3 id="3-4-第一次页面加载会触发哪几个钩子？"><a class="header-anchor" href="#3-4-第一次页面加载会触发哪几个钩子？"> </a>3.4 第一次页面加载会触发哪几个钩子？</h3>
<p>第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子</p>
<h3 id="3-5-每个周期具体适合哪些场景？"><a class="header-anchor" href="#3-5-每个周期具体适合哪些场景？"> </a>3.5 每个周期具体适合哪些场景？</h3>
<ul>
<li><code>beforecreate</code> : 可以在这加个loading事件，在加载实例时触发</li>
<li><code>created</code> : 初始化完成时的事件写在这里，如在这结束loading事件，异步请求也适宜在这里调用</li>
<li><code>mounted</code> : 挂载元素，获取到DOM节点</li>
<li><code>updated</code> : 如果对数据统一处理，在这里写上相应函数</li>
<li><code>beforeDestroy</code> : 可以清除定时器</li>
<li><code>nextTick</code> : 更新数据后立即操作dom
<ul>
<li>在下次 DOM 更新循环结束之后执行延迟回调。在这里里面的代码会等到dom更新以后再执行。</li>
</ul>
</li>
</ul>
<h3 id="3-6-异步请求适合在哪个生命周期调用？"><a class="header-anchor" href="#3-6-异步请求适合在哪个生命周期调用？"> </a>3.6 异步请求适合在哪个生命周期调用？</h3>
<p>官方实例的异步请求是在<code>mounted</code>生命周期中调用的，而实际上也可以在created生命周期中调用。</p>
<p>博文作者推荐在 created 钩子函数中调用异步请求，有以下优点：</p>
<ul>
<li>能更快获取到服务端数据，减少页面 loading 时间；</li>
<li>ssr 不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性；</li>
</ul>
<h2 id="4-SSR-服务端渲染"><a class="header-anchor" href="#4-SSR-服务端渲染"> </a>4 SSR 服务端渲染</h2>
<h3 id="4-1-什么是SSR"><a class="header-anchor" href="#4-1-什么是SSR"> </a>4.1 什么是SSR</h3>
<p>SSR也就是<code>服务端渲染</code>（后端渲染），也就是将Vue在客户端把<code>标签渲染成HTML</code>的工作放在服务端完成，然后再把<code>HTML直接返回</code>给客户端。</p>
<p>⭐️ 服务端渲染只支持 <code>beforCreate</code> 和 <code>created</code> 两个钩子函数。</p>
<h3 id="4-2-SSR的优点"><a class="header-anchor" href="#4-2-SSR的优点"> </a>4.2 SSR的优点</h3>
<ul>
<li><strong>更好的 SEO：</strong> 因为 SPA 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 SPA 中是抓取不到页面通过 Ajax 获取到的内容；而 SSR 是直接由服务端返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面；</li>
<li><strong>更快的内容到达时间（首屏加载更快）：</strong> SPA 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间；SSR 直接由服务端渲染好页面直接返回显示，无需等待下载 js 文件及再去渲染等，所以 SSR 有更快的内容到达时间；</li>
</ul>
<h3 id="4-3-SSR的缺点"><a class="header-anchor" href="#4-3-SSR的缺点"> </a>4.3 SSR的缺点</h3>
<ul>
<li><strong>更多的开发条件限制：</strong> 例如服务端渲染只支持 <code>beforCreate</code> 和 <code>created</code> 两个钩子函数，这会导致一些<code>外部扩展库需要特殊处理</code>才能在服务端渲染应用程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序 SPA 不同，服务端渲染应用程序，<code>需要处于 Node.js server 运行环境</code>；</li>
<li><strong>更多的服务器负载：</strong> 在 Node.js  中渲染完整的应用程序，显然会比仅仅提供静态文件的  server 更加大量占用CPU 资源 (CPU-intensive - CPU 密集)，因此如果你预料在高流量环境 ( high traffic ) 下使用，请准备相应的服务器负载，并明智地采用缓存策略。</li>
</ul>
<h2 id="5-v-show-与-v-if-的区别"><a class="header-anchor" href="#5-v-show-与-v-if-的区别"> </a>5 v-show 与 v-if 的区别</h2>
<h3 id="5-1-v-if"><a class="header-anchor" href="#5-1-v-if"> </a>5.1  v-if</h3>
<p>是真正的条件渲染，因为它会确保在切换过程中条件块内的<code>事件监听器</code>和<code>子组件</code>适当地被销毁和重建；</p>
<p>也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>
<h3 id="5-2-v-show"><a class="header-anchor" href="#5-2-v-show"> </a>5.2 v-show</h3>
<p>不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 “display” 属性进行切换。</p>
<h3 id="5-3-结论"><a class="header-anchor" href="#5-3-结论"> </a>5.3 结论</h3>
<p>v-if 适用于在运行时<code>很少改变条件</code>，<code>不需要频繁切换</code>条件的场景；</p>
<p>v-show 则适用于需要非常频繁切换条件的场景。</p>
<h2 id="6-你有对Vue项目进行那些优化？"><a class="header-anchor" href="#6-你有对Vue项目进行那些优化？"> </a>6 你有对Vue项目进行那些优化？</h2>
<h3 id="6-1-代码层面的优化"><a class="header-anchor" href="#6-1-代码层面的优化"> </a>6.1 代码层面的优化</h3>
<ul>
<li>✔️ ​v-if 和 v-show 区分使用场景</li>
<li>computed 和 watch  区分使用场景</li>
<li>✔️ v-for 遍历必须为 item 添加 key，且避免同时使用 v-if</li>
<li>长列表性能优化</li>
<li>✔️ 事件的销毁</li>
<li>✔️ 图片资源懒加载</li>
<li>路由懒加载</li>
<li>第三方插件的按需引入</li>
<li>优化无限列表性能</li>
<li>服务端渲染 SSR or 预渲染</li>
</ul>
<h3 id="6-2-Webpack-层面的优化"><a class="header-anchor" href="#6-2-Webpack-层面的优化"> </a>6.2 Webpack 层面的优化</h3>
<ul>
<li>Webpack 对图片进行压缩：先引入npm install image-webpack-loader --save-dev，然后在 webpack.config.js 中配置</li>
<li>减少 ES6 转为 ES5 的冗余代码</li>
<li>提取公共代码</li>
<li>模板预编译</li>
<li>提取组件的 CSS</li>
<li>优化 SourceMap</li>
<li>构建结果输出分析</li>
<li>Vue 项目的编译优化</li>
</ul>
<h3 id="6-3-基础的-Web-技术的优化"><a class="header-anchor" href="#6-3-基础的-Web-技术的优化"> </a>6.3 基础的 Web 技术的优化</h3>
<ul>
<li>开启 gzip 压缩</li>
<li>✔️ 浏览器缓存</li>
<li>CDN 的使用</li>
<li>使用 Chrome Performance 查找性能瓶颈</li>
</ul>
<h2 id="7-Vue响应式原理⭐️"><a class="header-anchor" href="#7-Vue响应式原理⭐️"> </a>7 Vue响应式原理⭐️</h2>
<h3 id="7-1-Vue2-x响应式数据原理"><a class="header-anchor" href="#7-1-Vue2-x响应式数据原理"> </a>7.1 Vue2.x响应式数据原理</h3>
<p>Vue在初始化数据时，会使用<code>Object.defineProperty</code>重新定义data中的所有属性，当页面使用对应属性时，首先会进行<code>依赖收集</code>(收集当前组件的watcher)如果属性<code>发生变化</code>会通知<code>相关依赖</code>进行更新操作(发布订阅)</p>
<p><strong>vue2.x中如何监测数组变化</strong></p>
<p>使用了<code>函数劫持</code>的方式，重写了数组的方法，Vue将data中的数组进行了<code>原型链重写</code>，指向了<code>自己定义的数组原型方法</code>。这样当调用数组api时，可以<code>通知依赖更新</code>。如果数组中包含着引用类型，会对数组中的引用类型再次<code>递归遍历</code>进行监控。这样就实现了监测数组变化。</p>
<h3 id="7-2-Vue3-x响应式数据原理"><a class="header-anchor" href="#7-2-Vue3-x响应式数据原理"> </a>7.2 Vue3.x响应式数据原理</h3>
<p>Vue3.x改用<code>Proxy</code>替代Object.defineProperty。因为Proxy可以直接<code>监听对象和数组</code>的变化，并且有多达<code>13种拦截方法</code>。并且作为新标准将受到浏览器厂商<code>重点持续的性能优化</code>。</p>
<p><strong>Proxy只会代理对象的第一层，那么Vue3又是怎样处理这个问题的呢？</strong></p>
<p>判断当前Reflect.get的返回值是否为Object，如果是则再通过reactive方法做代理， 这样就实现了深度观测。</p>
<p><strong>监测数组的时候可能触发多次get/set，那么如何防止触发多次呢？</strong></p>
<p>我们可以判断key是否为当前被代理对象target自身属性，也可以判断旧值与新值是否相等，只有满足以上两个条件之一时，才有可能执行trigger。</p>
<h2 id="简述虚拟DOM-diff算法"><a class="header-anchor" href="#简述虚拟DOM-diff算法"> </a>简述虚拟DOM + diff算法</h2>
<p><img src="https://img-blog.csdnimg.cn/20210322111617144.png" alt="在这里插入图片描述"></p>
<h2 id="vue中Computed、Methods、Watch区别"><a class="header-anchor" href="#vue中Computed、Methods、Watch区别"> </a>vue中Computed、Methods、Watch区别</h2>
<p><img src="https://img-blog.csdnimg.cn/20210322112654590.png" alt="在这里插入图片描述"></p>
<h2 id="什么是vuex"><a class="header-anchor" href="#什么是vuex"> </a>什么是vuex?</h2>
<p><img src="https://img-blog.csdnimg.cn/2021032211190010.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpbmJpbmJveA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="Vue-router共有几种模式？默认是哪种？"><a class="header-anchor" href="#Vue-router共有几种模式？默认是哪种？"> </a>Vue-router共有几种模式？默认是哪种？</h2>
<p>history模式 hash模式</p>
<p>默认 hash模式</p>
<h2 id="vue中的slot（插槽）"><a class="header-anchor" href="#vue中的slot（插槽）"> </a>vue中的slot（插槽）</h2>
<p><img src="https://img-blog.csdnimg.cn/2021032211325311.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpbmJpbmJveA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="图片懒加载原理"><a class="header-anchor" href="#图片懒加载原理"> </a>图片懒加载原理</h2>
<p><img src="https://img-blog.csdnimg.cn/20210322113335541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpbmJpbmJveA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="前端优化中的路由懒加载"><a class="header-anchor" href="#前端优化中的路由懒加载"> </a>前端优化中的路由懒加载</h2>
<p><img src="https://img-blog.csdnimg.cn/20210322113431761.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>搬运</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的Git命令</title>
    <url>/2021/08/17/%E5%B8%B8%E7%94%A8%E7%9A%84Git%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="增加-删除文件"><a class="header-anchor" href="#增加-删除文件"> </a>增加 / 删除文件</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加指定文件到暂存区</span>
$ <span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.

<span class="token comment"># 删除工作区文件，并且将这次删除放入暂存区</span>
$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="代码提交"><a class="header-anchor" href="#代码提交"> </a>代码提交</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 填写信息，并提交到仓库区</span>
$ <span class="token function">git</span> commit -am <span class="token punctuation">[</span>message<span class="token punctuation">]</span>

<span class="token comment"># 提交暂存区到仓库区</span>
$ <span class="token function">git</span> commit -m <span class="token punctuation">[</span>message<span class="token punctuation">]</span>

<span class="token comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span>
$ <span class="token function">git</span> commit -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="分支"><a class="header-anchor" href="#分支"> </a>分支</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有本地分支</span>
$ <span class="token function">git</span> branch

<span class="token comment"># 列出所有远程分支</span>
$ <span class="token function">git</span> branch -r

<span class="token comment"># 列出所有本地分支和远程分支</span>
$ <span class="token function">git</span> branch -a

<span class="token comment"># 新建一个分支，但依然停留在当前分支</span>
$ <span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>

<span class="token comment"># 切换到指定分支，并更新工作区</span>
$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="查看信息"><a class="header-anchor" href="#查看信息"> </a>查看信息</h1>
<pre class="line-numbers language-none"><code class="language-none"># 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示暂存区和工作区的差异
$ git diff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="远程同步"><a class="header-anchor" href="#远程同步"> </a>远程同步</h1>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示所有远程仓库</span>
$ <span class="token function">git</span> remote -v

<span class="token comment"># 取回远程仓库的变化，并与本地分支合并</span>
$ <span class="token function">git</span> pull <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span>

<span class="token comment"># 上传本地指定分支到远程仓库</span>
$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="详见"><a class="header-anchor" href="#详见"> </a>详见</h1>
<p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单 - 阮一峰的网络日志</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序底层实现原理</title>
    <url>/2021/07/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="wa-的运行环境"><a class="header-anchor" href="#wa-的运行环境"> </a>wa 的运行环境</h1>
<p>根据微信官方的说明，wa的运行环境有3个平台：</p>
<ul>
<li>IOS 的 <strong>webkit</strong>（苹果开源的浏览器内核）</li>
<li>Android 的 <strong>X5</strong>（QQ浏览器内核）</li>
<li>开发时用的 <strong>nw.js</strong>（C++实现的web转桌面应用）</li>
</ul>
<p>根据官方文档，这三大运行环境是有所区别的：</p>
<table>
<thead>
<tr>
<th style="text-align:left"><strong>运行环境</strong></th>
<th style="text-align:left"><strong>逻辑层</strong></th>
<th style="text-align:left"><strong>渲染层</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">iOS</td>
<td style="text-align:left">JavaScriptCore</td>
<td style="text-align:left">WKWebView</td>
</tr>
<tr>
<td style="text-align:left">安卓</td>
<td style="text-align:left">V8</td>
<td style="text-align:left">chromium定制内核</td>
</tr>
<tr>
<td style="text-align:left">小程序开发者工具</td>
<td style="text-align:left">NWJS</td>
<td style="text-align:left">Chrome WebView</td>
</tr>
</tbody>
</table>
<h1 id="技术选型"><a class="header-anchor" href="#技术选型"> </a>技术选型</h1>
<p>目前来说，页面渲染的方式主要有三种：</p>
<ul>
<li>Web 渲染。</li>
<li>Native 原生渲染。</li>
<li>Web 与 Native 两者掺杂，也即我们常说的 Hybrid 渲染。</li>
</ul>
<p><a href="https://www.jianshu.com/p/a40fefcadc94">native APP、hybrid APP、web APP三者的区别</a></p>
<p>小程序最终的呈现形式，是 <strong>WebView + 原生组件 的 Hybrid 渲染方式</strong>。可以用一种近似 Web 的方式来开发，并且还可以实现在线更新代码。</p>
<p>因此拥有以下优势：</p>
<ul>
<li><strong>开发门槛</strong>：<strong>Web 门槛低</strong>，不过 Native 也有像 React Native 这样的框架支持</li>
<li><strong>体验</strong>：<strong>Native 体验比 Web 不要好太多</strong>，Hybrid 在一定程度上比 Web 接近原生体验</li>
<li><strong>版本更新</strong>：<strong>Web 支持在线更新</strong>，Native 则需要打包到微信一起审核发布</li>
<li><strong>管控和安全</strong>：Web 可跳转或是改变页面内容，存在一些不可控因素和安全风险
<ul>
<li>可能面临一些性能问题：在 Web 技术中，UI 渲染跟 JavaScript 的脚本执行都在一个单线程中执行，这就容易导致一些逻辑任务抢占 UI 渲染的资源。</li>
</ul>
</li>
<li><strong>具有生命周期</strong>：<strong>Natvie 有生命周期</strong>，Web 仅仅能够根据事件做出不同的调整</li>
</ul>
<h1 id="wa-的双线程"><a class="header-anchor" href="#wa-的双线程"> </a>wa 的双线程</h1>
<img src="https://github-imglib-1255459943.cos.ap-chengdu.myqcloud.com/%E4%B8%8B%E8%BD%BD.png" alt="wa双线程官方图" style="zoom: 67%;">
<p>小程序的<strong>渲染层和逻辑层分别由 2 个线程管理</strong>：</p>
<ul>
<li><strong>渲染层的界面使用了 WebView 进行渲染</strong></li>
<li><strong>逻辑层采用 JsCore 线程运行 JS 脚本</strong></li>
</ul>
<h2 id="双线程模型"><a class="header-anchor" href="#双线程模型"> </a>双线程模型</h2>
<ul>
<li><strong>逻辑层：创建一个单独的线程去执行 JavaScript，在这个环境下执行的都是有关小程序业务逻辑的代码</strong></li>
<li><strong>渲染层：界面渲染相关的任务全都在 WebView 线程里执行，由逻辑层代码控制渲染哪些界面。一个小程序存在多个界面，所以渲染层存在多个 WebView 线程</strong></li>
</ul>
<h2 id="双线程通信"><a class="header-anchor" href="#双线程通信"> </a>双线程通信</h2>
<p>把开发者的 JS 逻辑代码放到单独的线程去运行，但在 Webview 线程里，开发者就没法直接操作 DOM。那要怎么去实现动态更改界面呢？</p>
<p>前面我们知道，<strong>逻辑层和渲染层的通信会由 Native （微信客户端）做中转，逻辑层发送网络请求也经由 Native 转发。</strong></p>
<p>这是不是意味着，我们可以把 DOM 的更新通过简单的数据通信来实现呢？</p>
<p>Virtual DOM 相信大家都已有了解，大概是这么个过程：用JS对象模拟DOM树 -&gt; 比较两棵虚拟DOM树的差异 -&gt; 把差异应用到真正的DOM树上。</p>
<p><img src="https://github-imglib-1255459943.cos.ap-chengdu.myqcloud.com/13333.png" alt="双线程通信图"></p>
<p><strong>双线程通信过程：</strong></p>
<ol>
<li><strong>在渲染层把 WXML 转化成对应的 JS 对象。</strong></li>
<li><strong>在逻辑层发生数据变更的时候，通过宿主环境提供的 setData 方法把数据从逻辑层传递到 Native，再转发到渲染层。</strong></li>
<li><strong>经过对比前后差异，把差异应用在原来的 DOM 树上，更新界面。</strong></li>
</ol>
<p>而上述的通信过程，基本上是通过<strong>微信小程序的基础库</strong>来完成的。</p>
<h1 id="wa-的基础库"><a class="header-anchor" href="#wa-的基础库"> </a>wa 的基础库</h1>
<p>小程序的基础库是 JavaScript 编写的，它可以被注入到渲染层和逻辑层运行。</p>
<p>主要用于：</p>
<ul>
<li>在渲染层，提供各类组件来组建界面的元素</li>
<li>在逻辑层，提供各类 API 来处理各种逻辑</li>
<li>处理数据绑定、组件系统、事件系统、通信系统等一系列框架逻辑</li>
</ul>
<p>由于小程序的渲染层和逻辑层是两个线程管理，两个线程各自注入了基础库。</p>
<p><strong>小程序的基础库不会被打包在某个小程序的代码包里边，它会被提前内置在微信客户端。</strong> 这样可以：</p>
<ul>
<li>降低业务小程序的代码包大小</li>
<li>可以单独修复基础库中的 Bug，无需修改到业务小程序的代码包</li>
</ul>
<h2 id="Exparser-框架"><a class="header-anchor" href="#Exparser-框架"> </a>Exparser 框架</h2>
<p>Exparser 是微信小程序的组件组织框架，内置在小程序基础库中，为小程序的各种组件提供基础的支持。小程序内的所有组件，包括内置组件和自定义组件，都由 Exparser 组织管理。</p>
<p><code>Exparser</code> 基于 <code>WebComponents</code> 的 <code>ShadowDOM</code> 模型，但是不依赖浏览器的原生支持，而且可在 纯 <code>JS</code> 环境中运行。</p>
<p><strong>小程序中，所有节点树相关的操作都依赖于 <code>Exparser</code>，包括 <code>WXML</code> 到页面最终节点树的构建、<code>CreateSelectorQuery</code> 调用和自定义组件特性等。</strong></p>
<p>现在微信小程序也支持自定义组件了，用法和组件间通信类似于 <code>Vue</code>。</p>
<p>在内置组件中，有一些组件并不完全在 <code>Exparser</code> 的渲染体系下，而是由客户端原生参与组件的渲染。比如说 <code>Map</code> 组件。它渲染的层级比在 <code>WebView</code> 层渲染的普通组件要高。</p>
<h1 id="wa-与-h5-的区别"><a class="header-anchor" href="#wa-与-h5-的区别"> </a>wa 与 h5 的区别</h1>
<p>从技术的发展角度来看，微信小程序是从微信中的 <code>webView</code> 和 <code>JS-SDK</code> 进化到了今天的形态。那么，小程序和普通的<code>h5</code>页面到底有什么区别呢？</p>
<ul>
<li><strong>运行环境</strong>：小程序基于浏览器内核重构的内置解析器，而 <code>h5</code> 的宿主环境是浏览器。所以<strong>小程序中没有 <code>DOM</code> 和 <code>BOM</code> 的相关 <code>API</code>，<code>jQuery</code>和一些 <code>NPM</code> 包都不能在小程序中使用</strong>；</li>
<li><strong>系统权限</strong>：小程序能获得更多的系统权限，如网络通信状态、数据缓存能力等；</li>
<li><strong>渲染机制</strong>：小程序的逻辑层和渲染层是分开的，而 <code>h5</code> 页面 <code>UI</code> 渲染跟 <code>JavaScript</code> 的脚本执行都在一个单线程中，互斥。所以 <code>h5</code> 页面中长时间的脚本运行可能会导致页面失去响应。</li>
</ul>
<h1 id="wa-的生命周期"><a class="header-anchor" href="#wa-的生命周期"> </a>wa 的生命周期</h1>
<p><img src="https://img2020.cnblogs.com/blog/1805573/202003/1805573-20200321105908552-71997322.png" alt="img"></p>
<h1 id="参考文档"><a class="header-anchor" href="#参考文档"> </a>参考文档</h1>
<p><a href="https://developers.weixin.qq.com/community/develop/article/doc/0000461093c4d8782ff7cf7d95b413">小程序的底层框架</a></p>
<p><a href="https://www.cnblogs.com/fmyao/p/12537246.html">微信小程序底层实现原理</a></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>技术分享01 - Symbol 有什么用？</title>
    <url>/2021/08/16/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB01-Symbol/</url>
    <content><![CDATA[<h1 id="何为-Symbol？"><a class="header-anchor" href="#何为-Symbol？"> </a>何为 Symbol？</h1>
<p><code>Symbol</code> 是ES6 引入的一种新的<strong>原始数据类型</strong>，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：<code>undefined</code>、<code>null</code>、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p>
<h2 id="为什么引入？"><a class="header-anchor" href="#为什么引入？"> </a>为什么引入？</h2>
<p>因为 ES5 的对象属性名都是字符串，所以这就容易造成属性名的冲突。比如，当我们使用一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式）时，新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入 <code>Symbol</code> 的原因。</p>
<h2 id="语法"><a class="header-anchor" href="#语法"> </a>语法</h2>
<p><code>Symbol([description])</code></p>
<h2 id="构造方法-和-一些特性"><a class="header-anchor" href="#构造方法-和-一些特性"> </a>构造方法 和 一些特性</h2>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> symbol1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* Symbol函数可以接受一个字符串作为参数，
 * 表示对 Symbol 实例的描述，
 * 主要是为了在控制台显示，或者转为字符串时，比较容易区分。*/</span>
<span class="token keyword">const</span> symbol2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> symbol3 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> symbol3<span class="token punctuation">.</span>description<span class="token punctuation">)</span> <span class="token comment">// "string"</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> symbol1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "symbol"</span>

<span class="token comment">/* Symbol 值可以显式转为字符串。 */</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbol2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Symbol(foo)"</span>
<span class="token comment">/* ES2019 提供了一个实例属性 description ，直接返回 Symbol 的描述。 */</span>
symbol2<span class="token punctuation">.</span>description<span class="token punctuation">;</span> <span class="token comment">// "foo"</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbol3 <span class="token operator">===</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token comment">/* 注意，
 * Symbol函数的参数只是表示对当前 Symbol 值的描述，
 * 因此相同参数的Symbol函数的返回值是不相等的。 */</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<span style="color: red; font-weight: bold;"><span class="github-emoji"><span>⚠</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>&nbsp;注意！</span>
<blockquote>
<p>Symbol 的构造函数并不完整，因为它 <strong>不支持</strong> 语法：<code>new Symbol()</code>。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> sym <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<hr>
<h1 id="Symbol-的特点"><a class="header-anchor" href="#Symbol-的特点"> </a>Symbol 的特点</h1>
<h2 id="唯一性"><a class="header-anchor" href="#唯一性"> </a>唯一性</h2>
<p>即使是同一个变量，生成的值也不相等：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> id1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> id2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id1 <span class="token operator">==</span> id2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="全局共享的-Symbol"><a class="header-anchor" href="#全局共享的-Symbol"> </a>全局共享的 Symbol</h3>
<p>虽然 Symbol 保证了唯一性，但当我们想要多次使用同一个 Symbol 时，可以使用官方提供的全局注册并登记的方法 <code>Symbol.for()</code> ：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> name1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检测到未创建后，新建</span>
<span class="token keyword">let</span> name2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检测到已创建后，返回</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name1 <span class="token operator">===</span> name2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以使用 <code>Symbol.keyFor()</code> 来获取 Symbol 对象的参数值：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> name1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> name2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>name1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'name'</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'name'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="隐藏性"><a class="header-anchor" href="#隐藏性"> </a>隐藏性</h2>
<p>无法用 <code>for...in</code> 或 <code>object.keys()</code> 访问：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'symbol'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> option <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>option<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="在对象中查找用-Symbol-标识的属性名"><a class="header-anchor" href="#在对象中查找用-Symbol-标识的属性名"> </a>在对象中查找用 Symbol 标识的属性名</h3>
<p>可以用 <code>Object.getOwnPropertySymbols</code> 方法访问，该方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'symbol'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> array <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// [Symbol(id)]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 'symbol'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="Symbol-有什么用？"><a class="header-anchor" href="#Symbol-有什么用？"> </a>Symbol 有什么用？</h1>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">MDN</a> 上是这样介绍的：</p>
<blockquote>
<p>每个从 <code>Symbol()</code> 返回的 symbol 值都是唯一的。一个 symbol 值能作为对象属性的标识符；这是该数据类型仅有的目的。</p>
</blockquote>
<p><s>它本质上是一种 <strong>唯一标识符</strong>，可用作对象的唯一属性名，这样其他人就不会改写或覆盖你设置的属性值。</s></p>
<h2 id="防止属性名冲突"><a class="header-anchor" href="#防止属性名冲突"> </a>防止属性名冲突</h2>
<h3 id="作为属性名的-Symbol"><a class="header-anchor" href="#作为属性名的-Symbol"> </a>作为属性名的 Symbol</h3>
<p>由于每一个 Symbol 值都是不相等的，这意味着 Symbol 值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。</p>
<p>当一个 symbol 值作为对象属性的标识符，也就是说，将对象属性名指定为一个 Symbol 值时，有以下几种写法：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> mySymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 第一种写法</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
a<span class="token punctuation">[</span>mySymbol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Hello!'</span><span class="token punctuation">;</span>

<span class="token comment">// 第二种写法</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>mySymbol<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'Hello!'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 第三种写法</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mySymbol<span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">'Hello!'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 以上写法都得到同样结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mySymbol<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Hello!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<p><span style="color: red; font-weight: bold;">⚠️ 注意！</span></p>
<p>Symbol 值作为对象属性名时，不能用点运算符。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> mySymbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>mySymbol <span class="token operator">=</span> <span class="token string">'Hello!'</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mySymbol<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token string">'mySymbol'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Hello!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面代码中，因为<strong>点运算符后面总是字符串</strong>，所以不会读取 <code>mySymbol</code> 作为标识名所指代的那个值，导致 <code>a</code> 的属性名实际上是一个字符串，而不是一个 Symbol 值。</p>
<hr>
<p>所以，在对象的内部，使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中。如果不放在方括号中，那么该属性的键名就是一个字符串，而不是那个 Symbol 值。</p>
<h3 id="实例：消除魔术字符串"><a class="header-anchor" href="#实例：消除魔术字符串"> </a>实例：消除魔术字符串</h3>
<p><strong>魔术字符串</strong>指的是，在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。</p>
<p>风格良好的代码，应该尽量消除魔术字符串，改由含义清晰的变量代替。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token parameter">shape<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> area <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">'Triangle'</span><span class="token operator">:</span> <span class="token comment">// 魔术字符串</span>
      area <span class="token operator">=</span> <span class="token number">.5</span> <span class="token operator">*</span> options<span class="token punctuation">.</span>width <span class="token operator">*</span> options<span class="token punctuation">.</span>height<span class="token punctuation">;</span> <span class="token comment">// S = 1/2 * d * h</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token comment">/* ... more code ... */</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> area<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">getArea</span><span class="token punctuation">(</span><span class="token string">'Triangle'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> width<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 魔术字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面代码中，字符串 <code>Triangle </code>就是一个魔术字符串。它多次出现，与代码形成“强耦合”，不利于将来的修改和维护。</p>
<p>常用的消除魔术字符串的方法是，把它写成一个变量。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> shapeType <span class="token operator">=</span> <span class="token punctuation">{</span>
  triangle<span class="token operator">:</span> <span class="token string">'Triangle'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token parameter">shape<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> area <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> shapeType<span class="token punctuation">.</span>triangle<span class="token operator">:</span>
      area <span class="token operator">=</span> <span class="token number">.5</span> <span class="token operator">*</span> options<span class="token punctuation">.</span>width <span class="token operator">*</span> options<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> area<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">getArea</span><span class="token punctuation">(</span>shapeType<span class="token punctuation">.</span>triangle<span class="token punctuation">,</span> <span class="token punctuation">{</span> width<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面代码中，我们把 <code>'Triangle'</code> 写成 <code>shapeType</code> 对象的 <code>triangle</code> 属性，这样就消除了强耦合。</p>
<p>如果仔细分析，可以发现 <code>shapeType.triangle</code> 等于哪个值并不重要，只要确保不会跟其他 <code>shapeType</code> 属性的值冲突即可。因此，这里就很适合改用 Symbol 值。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> shapeType <span class="token operator">=</span> <span class="token punctuation">{</span>
  triangle<span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="模拟私有属性"><a class="header-anchor" href="#模拟私有属性"> </a>模拟私有属性</h2>
<p>由于上文所说的，Symbol 具有隐藏性，所以我们可以很方便地用来模拟私有属性。</p>
<p>因为 <code>symbol</code> 不会出现在  <code>Object.keys()</code> 的结果中，因此除非你明确地 <code>export</code>  一个 <code>symbol</code> ，或者用  <code>Object.getOwnPropertySymbols()</code>  函数获取，否则其他代码是无法访问这个属性的。另外，<code>symbol</code> 也不会出现在 <code>JSON.stringify()</code> 的结果里，确切地说是 <code>JSON.stringify()</code> 会忽略 <code>symbol</code> 属性名和属性值。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span> test<span class="token operator">:</span> symbol <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "{}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="参考资料"><a class="header-anchor" href="#参考资料"> </a>参考资料</h1>
<ul>
<li>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol - JavaScript | MDN</a></p>
</li>
<li>
<p><a href="https://es6.ruanyifeng.com/#docs/symbol">Symbol - ECMAScript 6 入门 ｜ 阮一峰</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/qq_33408245/article/details/82953143">js中的Symbol数据类型_一止弋的博客-CSDN博客</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>技术分享</tag>
        <tag>面试</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>技术分享02 - WebSocket 原理</title>
    <url>/2021/08/23/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB02-WebSocket%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="WebSocket-与-HTTP-的关系"><a class="header-anchor" href="#WebSocket-与-HTTP-的关系"> </a>WebSocket 与 HTTP 的关系</h1>
<p>WebSocket 协议在2008年诞生，2011年成为国际标准，现在所有浏览器都已经支持。WebSocket 的最大特点是，<strong>服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息</strong>，是真正的双向平等对话，属于<a href="https://en.wikipedia.org/wiki/Push_technology">服务器推送技术</a>的一种。</p>
<p>我们都知道，HTTP 有 1.1 和 1.0 之说，也就是增加了所谓的 keep-alive ：把多个 HTTP 请求合并为一个。</p>
<p>而 Websocket 其实是一个新协议，跟 HTTP 协议基本没有关系，只是为了兼容现有浏览器，所以在握手阶段使用了 HTTP 。也就是说，它是 HTTP 协议上的一种补充，可以通过这样一张图理解：有交集，但是并不是全部。</p>
<p><img src="https://pic1.zhimg.com/50/6651f2f811ec133b0e6d7e6d0e194b4c_720w.jpg?source=1940ef5c" alt="WebSocket与HTTP"></p>
<h1 id="WebSocket-是怎样的，有什么优点"><a class="header-anchor" href="#WebSocket-是怎样的，有什么优点"> </a>WebSocket 是怎样的，有什么优点</h1>
<h2 id="持久化-和-主动性"><a class="header-anchor" href="#持久化-和-主动性"> </a>持久化 和 主动性</h2>
<p>首先，Websocket 是一个<strong>持久化</strong>的协议，相对于 HTTP 这种<strong>非持久</strong>的协议来说。</p>
<p>举个例子：</p>
<p>在 HTTP 1.0 中，发送了一个 requst，收到了一个 response ，那么这次的 HTTP 请求就结束了。</p>
<p>HTTP 1.1 就对它进行了改进，使得有一个 keep-alive，也就是说，在一个HTTP连接中，可以发送多个 request ，接收多个 response 。</p>
<p>因此，在 HTTP 中，request 的个数 === response 的个数。也就是说，一个 request 只能有一个 response 。而且这个 response 也是<strong>被动</strong>的，不能主动发起。</p>
<p>顺带说一下：</p>
<h3 id="ajax-轮询"><a class="header-anchor" href="#ajax-轮询"> </a>ajax 轮询</h3>
<p>ajax 轮询的原理非常简单，就是让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息。</p>
<blockquote>
<p>客户端：有没有新信息(Request)<br>
服务端：没有（Response）<br>
客户端：有没有新信息(Request)<br>
服务端：没有（Response）<br>
客户端：有没有新信息(Request)<br>
服务端：没有（Response）<br>
客户端：有没有新消息（Request）<br>
服务端：有啦，给你。（Response）<br>
客户端：有没有新消息（Request）<br>
服务端：没有（Response）</p>
<p>---- loop</p>
</blockquote>
<h3 id="long-poll"><a class="header-anchor" href="#long-poll"> </a>long poll</h3>
<p>long poll 其实原理跟 ajax轮询 差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直打电话，没收到就不挂电话）。</p>
<p>也就是说，客户端发起请求后，如果没消息，就一直不返回 Response 给客户端。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。</p>
<blockquote>
<p>客户端：有没有新信息，没有的话就等有了才返回给我吧（Request）<br>
等到有消息的时候…<br>
服务器：来 给你（Response）</p>
<p>客户端：有没有新信息，没有的话就等有了才返回给我吧（Request）<br>
等到有消息的时候…<br>
服务器：来 给你（Response）</p>
<p>---- loop</p>
</blockquote>
<p><strong>从上面可以看出，其实这两种方式，都是在不断地建立HTTP连接，然后等待服务端处理。</strong></p>
<p>这体现HTTP协议的另外一个特点，<strong>被动性</strong>。</p>
<p>何为被动性呢？其实就是，服务端不能主动联系客户端，只能有客户端发起。所以，上面这两种都是非常消耗资源的：</p>
<ul>
<li>
<p>ajax轮询 - 需要服务器有很快的处理速度和资源。（速度）</p>
</li>
<li>
<p>long poll - 需要有很高的并发，也就是说同时接待客户的能力。（场地大小）</p>
</li>
</ul>
<p>所以 ajax轮询 和 long poll 都有可能发生这种情况。</p>
<blockquote>
<p>客户端：有新信息么？<br>
服务端：正忙，请稍后再试（503 Server Unavailable）<br>
客户端：有新信息么？<br>
服务端：正忙，请稍后再试（503 Server Unavailable）</p>
</blockquote>
<h3 id="WebSocket"><a class="header-anchor" href="#WebSocket"> </a>WebSocket</h3>
<p>而对于 WebSocket来说，当服务器完成协议升级后（HTTP -&gt; Websocket），服务端就可以主动推送信息给客户端啦。所以上面的情景可以做如下修改。而且，也可以看出 WebSocket 是持久化的。</p>
<blockquote>
<p>客户端：啦啦啦，我要建立Websocket协议，需要的服务：chat，Websocket协议版本：17（HTTP Request）<br>
服务端：ok，确认，已升级为Websocket协议（HTTP Protocols Switched）<br>
客户端：麻烦你有信息的时候推送给我噢。。<br>
服务端：ok，有的时候会告诉你的。<br>
服务端：balabalabalabala<br>
服务端：balabalabalabala<br>
服务端：balabalabalabala</p>
</blockquote>
<p>这样，只需要经过一次 HTTP 请求，就可以做到源源不断的信息传送了。（在程序设计中，这种设计叫做回调，即：有信息了再来通知我，而不是我每次跑来问你）</p>
<h2 id="速度更快"><a class="header-anchor" href="#速度更快"> </a>速度更快</h2>
<p>其实，我们所用的程序是要经过两层代理的，即<strong>HTTP协议在Nginx等服务器的解析下</strong>，然后再传送给相应的**Handler（PHP等）**来处理。</p>
<p>简单地说，我们有一个非常快速的<strong>接线员（Nginx）</strong>，他负责把问题转交给相应的<strong>客服（Handler）</strong>。<br>
本身接线员的速度基本上是足够的，但是每次都卡在客服那里，所以总是导致客服不够。</p>
<p>Websocket 就解决了这样一个难题。建立后，可以直接跟接线员建立持久连接，有信息的时候客服想办法通知接线员，然后接线员再统一转交给客户。</p>
<p>这样就可以解决客服处理速度过慢的问题了。</p>
<h2 id="有状态-消耗较少的资源"><a class="header-anchor" href="#有状态-消耗较少的资源"> </a>有状态 - 消耗较少的资源</h2>
<p>而且！HTTP 还是一个无状态的协议。</p>
<p>通俗的说就是，服务器因为每天要接待很多客户，还很健忘，你一挂电话，他就把你的东西全忘光了，把你的东西全丢掉了。你第二次还得再告诉服务器一遍。</p>
<p>在传统的方式中，要不断的建立，关闭HTTP协议。由于HTTP是无状态的，所以每次都要<strong>重新传输identity info（鉴别信息）</strong>，来告诉服务端你是谁。<br>
虽然接线员很快速，但是每次都要听这么一堆，效率也会有所下降的，同时还得不断把这些信息转交给客服，不但浪费客服的处理时间，而且还会在网路传输中消耗过多的流量/时间。</p>
<p>但是，Websocket只需要<strong>一次HTTP握手，也就是说整个通讯过程是建立在一次连接/状态中</strong>，服务端会一直知道你的信息，直到关闭请求，这样就解决了接线员要反复解析HTTP协议，还要查看identity info的信息。</p>
<h1 id="典型的-WebSocket-报文"><a class="header-anchor" href="#典型的-WebSocket-报文"> </a>典型的 WebSocket 报文</h1>
<h2 id="请求报文"><a class="header-anchor" href="#请求报文"> </a>请求报文</h2>
<pre class="line-numbers language-none"><code class="language-none">GET /chat HTTP/1.1
Host: server.example.com
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
Sec-WebSocket-Protocol: chat, superchat
Sec-WebSocket-Version: 13
Origin: http://example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这段类似 HTTP 协议的握手请求中，实际上多了这么几个东西。</p>
<pre class="line-numbers language-none"><code class="language-none">Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
Sec-WebSocket-Protocol: chat, superchat
Sec-WebSocket-Version: 13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中，</p>
<pre class="line-numbers language-none"><code class="language-none">Upgrade: websocket
Connection: Upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>就是 WebSocket 的核心了，相当于告诉 Apache 、 Nginx 等服务器：注意啦，我发起的请求要用 WebSocket 协议，帮我找到对应的助理处理。</p>
<pre class="line-numbers language-none"><code class="language-none">Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
Sec-WebSocket-Protocol: chat, superchat
Sec-WebSocket-Version: 13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>Sec-WebSocket-Key 是一个 Base64 encode 的值，这个是浏览器随机生成的，作用是验证服务器的身份（后面会说）。</p>
<p>Sec-WebSocket-Protocol 是一个用户定义的字符串，用来区分同一个 URL 下，不同的服务所需要的协议。</p>
<p>Sec-WebSocket-Version 是告诉服务器所使用的 WebSocket Draft （协议版本）。</p>
<blockquote>
<p>在最初的时候，WebSocket 协议还在 Draft 阶段，各种奇奇怪怪的协议都有，而且还有很多期奇奇怪怪不同的东西，什么 Firefox 和 Chrome 用的不是一个版本之类的，当初 WebSocket 协议太多可是一个大难题。</p>
</blockquote>
<p>不过现在还好，已经定下来啦～大家都使用同一个版本：13</p>
<h2 id="响应报文"><a class="header-anchor" href="#响应报文"> </a>响应报文</h2>
<p>服务器会返回下列报文，表示已经接受到请求， 成功建立 WebSocket 啦！</p>
<pre class="line-numbers language-none"><code class="language-none">HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=
Sec-WebSocket-Protocol: chat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
<pre class="line-numbers language-none"><code class="language-none">Upgrade: websocket
Connection: Upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其中，这段就是 HTTP 最后负责的区域了，告诉客户端，我即将升级的是 WebSocket 协议！</p>
<pre class="line-numbers language-none"><code class="language-none">Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=
Sec-WebSocket-Protocol: chat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>Sec-WebSocket-Accept 是经过服务器确认，并且加密过后的 Sec-WebSocket-Key 。</p>
<p>Sec-WebSocket-Protocol 则是表示最终使用的协议。</p>
<p>至此，HTTP 已经完成它所有工作了，接下来就会完全按照 WebSocket 协议进行了。</p>
<h1 id="客户端简单示例"><a class="header-anchor" href="#客户端简单示例"> </a>客户端简单示例</h1>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"wss://echo.websocket.org"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 用于指定连接成功后的回调函数。</span>
ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connection open ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Hello WebSockets!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 用于指定收到服务器数据后的回调函数。</span>
ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Received Message: "</span> <span class="token operator">+</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 用于指定连接关闭后的回调函数。</span>
ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Connection closed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="其他特点"><a class="header-anchor" href="#其他特点"> </a>其他特点</h1>
<p>（1）建立在 TCP 协议之上，服务器端的实现比较容易。</p>
<p>（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</p>
<p>（3）数据格式比较轻量，性能开销小，通信高效。</p>
<p>（4）可以发送文本，也可以发送二进制数据。</p>
<p>（5）没有同源限制，客户端可以与任意服务器通信。</p>
<p>（6）协议标识符是<code>ws</code>（如果加密，则为<code>wss</code>），服务器网址就是 URL。</p>
<blockquote>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">ws://example.com:80/some/path<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</blockquote>
<p><img src="https://i.loli.net/2021/08/23/6FgkwuQtlCqjShX.jpg" alt="img"></p>
<h1 id="参考资料"><a class="header-anchor" href="#参考资料"> </a>参考资料</h1>
<ul>
<li><a href="https://www.zhihu.com/question/20215561/answer/40316953">WebSocket 是什么原理？为什么可以实现持久连接 - 知乎</a></li>
<li><a href="https://www.cnblogs.com/nnngu/p/9347635.html">看完让你彻底理解 WebSocket 原理，附完整的实战代码（包含前端和后端） - 博客园</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2017/05/websocket.html">WebSocket 教程 ｜ 阮一峰</a></li>
</ul>
]]></content>
      <categories>
        <category>前端面试</category>
      </categories>
      <tags>
        <tag>技术分享</tag>
        <tag>面试</tag>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>技术分享04 - Rebase</title>
    <url>/2021/08/31/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB04-Rebase/</url>
    <content><![CDATA[<h1 id="🌰-一个例子"><a class="header-anchor" href="#🌰-一个例子"> </a>🌰 一个例子</h1>
<ul>
<li>
<p>假设 <code>1-2-3</code> 是 <code>master</code> 分支的状态；</p>
</li>
<li>
<p>此时从 <code>master</code> 分支中 checkout 了一个 <code>feat</code> 分支出来；</p>
</li>
<li>
<p><code>master</code> 提交了 <code>4-5</code> ，<code>feat</code> 分支提交了 <code>6-7</code> ；</p>
</li>
<li>
<p>所以现在 <code>master</code> 分支的状态为 <code>1-2-3-4-5</code> ，<code>feat</code> 分支的状态为 <code>1-2-3-6-7</code> 。</p>
</li>
</ul>
<img src="https://i.loli.net/2021/08/31/7vXe8WFptYVn6C2.png" alt="image-20210831204806627" style="zoom:50%;">
<ul>
<li><strong>如果将 <code>feat</code> 分支 rebase 到 <code>master</code> 分支上</strong>，<code>feat</code> 分支的状态就变成了 <code>1-2-3-4-5-6-7</code>；</li>
</ul>
<p><img src="https://i.loli.net/2021/09/01/9bGt5CmkJWrZYTn.png" alt="image-20210901114131396"></p>
<ul>
<li><strong>如果将 <code>feat</code> 分支 merge 到 <code>master</code> 上</strong>，<code>master</code> 分支的状态就变成了 <code>1-2-3-4-5-6-7-8</code>；
<ul>
<li>这里的 <code>8</code> 就是“Merge branch ‘feat’ into ‘master’”的 commit 。</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2021/08/31/6g5oemlqYdiIHEj.png" alt="image-20210831183024526"></p>
<h1 id="rebase-merge"><a class="header-anchor" href="#rebase-merge"> </a>rebase &amp; merge</h1>
<p>**rebase **会把你当前分支（上例中的 master）的 commit 放到目标分支（上例中的 feat）的最后面,所以叫变基。</p>
<p>Rebase 和 Merge 实际上只是应用场景不同：</p>
<p>例如现有上游分支 master，基于 master 分支拉出来一个开发分支 feat，在 feat 上开发了一段时间后要把 master 分支提交的新内容更新到 feat 分支，此时切换到 feat 分支，使用 <code>git rebase master</code></p>
<p>等 feat 分支开发完成后，要合并到上游分支 master 上的时候，切换到 master 分支，使用 <code>git merge feat</code></p>
<h2 id="使用-rebase-和-merge-的基本原则："><a class="header-anchor" href="#使用-rebase-和-merge-的基本原则："> </a>使用 rebase 和 merge 的基本原则：</h2>
<ol>
<li>下游分支更新上游分支内容的时候使用 <code>rebase</code></li>
<li>上游分支合并下游分支内容的时候使用 <code>merge</code></li>
<li>更新当前分支的内容时一定要使用 <code>--rebase</code> 参数</li>
</ol>
<h1 id="rebase-命令"><a class="header-anchor" href="#rebase-命令"> </a>rebase 命令</h1>
<p>更新代码应使用 <code>git pull origin feat --rebase</code> 而不是 <code>git pull origin feat</code> ，因为 <code>git pull</code> 这条命令默认使用了 <code>--merge</code> 的方式更新代码。</p>
<p>⚠️  但是在我们 rebase 后，直接使用 <code>git push origin feat</code> 会出现报错，我猜测原因是：使用 rebase 之后，feat 分支上有了 master 上所有的提交，也就是 master 分支的修改在 feat 分支上重演了一遍，相对远程 feat 分支而言，本地仓库的 feat 分支的“基底”已经变化了，直接 <code>push</code> 是不行的，所以确保没有问题的情况下必须使用 <code>--force</code> 参数才能提交。</p>
<p><img src="https://i.loli.net/2021/09/07/657soxjMqfSmUkl.png" alt="image-20210907143102436"></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>技术分享03 - 几个TypeScript小技巧</title>
    <url>/2021/08/30/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB03-%E5%87%A0%E4%B8%AATypeScript%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="注释"><a class="header-anchor" href="#注释"> </a>注释</h1>
<p>通过 <code>/** */</code> 形式的注释可以给 TS 类型做标记提示，编辑器会有更好的提示：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/** This is person */</span>
<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token comment">/** This is his name */</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>效果：</p>
<img src="https://i.loli.net/2021/08/30/rmL8ab5EDpi47jJ.png" alt="image-20210830142651782" style="zoom:50%;">
<img src="https://i.loli.net/2021/08/31/D9UJB71zRZVyYwC.png" alt="image-20210830142750952" style="zoom:50%;">
<p>如果用 <code>// xxx</code> 的形式注释，就不会有上面的效果：</p>
<img src="https://i.loli.net/2021/08/31/XlmL1phRc4gQOiT.png" alt="image-20210830143534203" style="zoom:50%;">
<h1 id="interface-type"><a class="header-anchor" href="#interface-type"> </a>interface &amp; type</h1>
<p>TypeScript 中定义类型的两种方式：接口（interface）和 类型别名（type alias）。</p>
<p>比如下面的 Interface 和 Type alias 的例子中，除了语法，意思是一样的：</p>
<h2 id="Interface"><a class="header-anchor" href="#Interface"> </a>Interface</h2>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">SetPoint</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Type-alias"><a class="header-anchor" href="#Type-alias"> </a>Type alias</h2>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Point</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">SetPoint</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而且两者都可以扩展，但是语法有所不同。此外，请注意，接口和类型别名不是互斥的。接口可以扩展类型别名，反之亦然。</p>
<h2 id="相同点"><a class="header-anchor" href="#相同点"> </a>相同点</h2>
<h3 id="Interface-extends-interface"><a class="header-anchor" href="#Interface-extends-interface"> </a>Interface extends interface</h3>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">PartialPointX</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token keyword">extends</span> <span class="token class-name">PartialPointX</span> <span class="token punctuation">{</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="Type-alias-extends-type-alias"><a class="header-anchor" href="#Type-alias-extends-type-alias"> </a>Type alias extends type alias</h3>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">PartialPointX</span> <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">Point</span> <span class="token operator">=</span> PartialPointX <span class="token operator">&amp;</span> <span class="token punctuation">{</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="Interface-extends-type-alias"><a class="header-anchor" href="#Interface-extends-type-alias"> </a>Interface extends type alias</h3>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">PartialPointX</span> <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token keyword">extends</span> <span class="token class-name">PartialPointX</span> <span class="token punctuation">{</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="Type-alias-extends-interface"><a class="header-anchor" href="#Type-alias-extends-interface"> </a>Type alias extends interface</h3>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">PartialPointX</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">Point</span> <span class="token operator">=</span> PartialPointX <span class="token operator">&amp;</span> <span class="token punctuation">{</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="不同点"><a class="header-anchor" href="#不同点"> </a>不同点</h2>
<h3 id="type-可以而-interface-不行"><a class="header-anchor" href="#type-可以而-interface-不行"> </a>type 可以而 interface 不行</h3>
<p>type 可以声明基本类型别名，联合类型，元组等类型</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 基本类型别名</span>
<span class="token keyword">type</span> <span class="token class-name">Name</span> <span class="token operator">=</span> <span class="token builtin">string</span>
 
<span class="token comment">// 联合类型</span>
<span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>
    <span class="token function">wong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    <span class="token function">miao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">type</span> <span class="token class-name">Pet</span> <span class="token operator">=</span> Dog <span class="token operator">|</span> Cat
 
<span class="token comment">// 具体定义数组每个位置的类型</span>
<span class="token keyword">type</span> <span class="token class-name">PetList</span> <span class="token operator">=</span> <span class="token punctuation">[</span>Dog<span class="token punctuation">,</span> Pet<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="interface-可以而-type-不行"><a class="header-anchor" href="#interface-可以而-type-不行"> </a>interface 可以而 type 不行</h3>
<p>interface 能够声明合并</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  sex<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
 
<span class="token comment">/*
User 接口为 {
  name: string
  age: number
  sex: string 
}
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/08/31/gPnaBlw8NjsOIvX.png" alt="图片" style="zoom: 50%;">
<p>如果不知道用什么，记住：能用 interface 实现，就用 interface , 如果不能就用 type 。</p>
<h1 id="typeof"><a class="header-anchor" href="#typeof"> </a>typeof</h1>
<p><code>typeof</code> 操作符可以用来获取一个变量或对象的类型。</p>
<p>我们一般先定义类型，再使用：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Opt</span> <span class="token punctuation">{</span>
  timeout<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> defaultOption<span class="token operator">:</span> Opt <span class="token operator">=</span> <span class="token punctuation">{</span>
  timeout<span class="token operator">:</span> <span class="token number">500</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>有时候可以反过来：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> defaultOption <span class="token operator">=</span> <span class="token punctuation">{</span>
  timeout<span class="token operator">:</span> <span class="token number">500</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">Opt</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> defaultOption<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/08/31/nUlfVQZMCTKLPwN.png" alt="image-20210830182310948" style="zoom: 50%;">
<p>当一个 interface 总有一个字面量初始值时，可以考虑这种写法以减少重复代码。</p>
<h1 id="keyof"><a class="header-anchor" href="#keyof"> </a>keyof</h1>
<p>TypeScript 允许我们遍历某种类型的属性，并通过 <code>keyof</code> 操作符提取其属性的名称。</p>
<p><code>keyof</code> 操作符是在 TypeScript 2.1 版本引入的，该操作符可以用于获取某种类型的所有键，其返回类型是联合类型。</p>
<p><code>keyof</code> 与 <code>Object.keys</code> 略有相似，只不过 <code>keyof</code> 取 <code>interface</code>的键。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> persion <span class="token operator">=</span> <span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
  text<span class="token operator">:</span> <span class="token string">'hello world'</span>
<span class="token punctuation">}</span>

<span class="token comment">// type keys = "age" | "text"</span>
<span class="token keyword">type</span> <span class="token class-name">keys</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Point<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>写一个方法获取对象里面的属性值时，一般人可能会这么写</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  age<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
  text<span class="token operator">:</span> <span class="token string">'备注'</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">myGet</span><span class="token punctuation">(</span>o<span class="token operator">:</span> object<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> o<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token function">myGet</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token function">myGet</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是会提示报错</p>
<p><img src="https://i.loli.net/2021/08/31/myRYiQ3p74Mu91a.png" alt="图片"></p>
<p>因为 object 里面没有事先声明的 key。</p>
<p>当然如果把 <code>o: object</code> 修改为 <code>o: any</code> 就不会报错了，但是获取到的值就没有类型了，也变成 any 了。</p>
<img src="https://i.loli.net/2021/08/31/U68CKsroZj142yI.png" alt="图片" style="zoom:50%;">
<p>这时可以使用 <code>keyof</code> 来加强 <code>get</code> 函数的类型功能。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token keyword">get</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>o<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> o<span class="token punctuation">[</span>name<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/08/31/CyLn2A1Y6ZNcqQp.png" alt="图片" style="zoom:67%;">
<h1 id="查找类型"><a class="header-anchor" href="#查找类型"> </a>查找类型</h1>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    addr<span class="token operator">:</span> <span class="token punctuation">{</span>
        city<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
        street<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
        num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当需要使用 addr 的类型时，除了把类型提出来</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>
    city<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    street<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    addr<span class="token operator">:</span> Address<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还可以</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">Person<span class="token punctuation">[</span><span class="token string">"addr"</span><span class="token punctuation">]</span> <span class="token comment">// This is Address.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>比如：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    addr<span class="token operator">:</span> <span class="token punctuation">{</span>
        city<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
        street<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
        num<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> addr<span class="token operator">:</span> Person<span class="token punctuation">[</span><span class="token string">"addr"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    city<span class="token operator">:</span> <span class="token string">'string'</span><span class="token punctuation">,</span>
    street<span class="token operator">:</span> <span class="token string">'string'</span><span class="token punctuation">,</span>
    num<span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/08/31/NigLyd2jrH4VvGo.png" alt="image-20210830192141330" style="zoom:50%;">
<p>有些场合后者会让代码更整洁、易读。</p>
<h1 id="DeepReadonly"><a class="header-anchor" href="#DeepReadonly"> </a>DeepReadonly</h1>
<p>被 <code>readonly</code> 标记的属性只能在声明时或类的构造函数中赋值。</p>
<p>之后将不可改（即只读属性），否则会抛出 TS2540 错误。</p>
<p>与 ES6 中的 <code>const</code> 很相似，但 <code>readonly</code> 只能用在类（TS 里也可以是接口）中的属性上，相当于一个只有 <code>getter</code> 没有 <code>setter</code> 的属性的语法糖。</p>
<p>下面实现一个深度声明 <code>readonly</code> 的类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token punctuation">{</span> bar<span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> a <span class="token keyword">as</span> DeepReadonly<span class="token operator">&lt;</span><span class="token keyword">typeof</span> a<span class="token operator">&gt;</span>
b<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">33</span> <span class="token comment">// Cannot assign to 'bar' because it is a read-only property.ts(2540)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/08/31/PoMlL2XzkDmKcr9.png" alt="image-20210830195513830" style="zoom:50%;">
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>技术分享</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>技术分享07 - CSRF攻击</title>
    <url>/2021/10/11/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB07-CSRF%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<p>CSRF（Cross-site request forgery，中文为<strong>跨站请求伪造</strong>）是一种利用网站可信用户的权限去执行未授权的命令的一种恶意攻击。通过<strong>伪装可信用户的请求来利用信任该用户的网站</strong>，这种攻击方式虽然不是很流行，但是却难以防范，其危害也不比其他安全漏洞小。</p>
<blockquote>
<p>CSRF也称作<strong>one-click attack</strong>或者<strong>session riding</strong>，其简写有时候也会使用<strong>XSRF</strong>。</p>
</blockquote>
<h1 id="什么是CSRF？"><a class="header-anchor" href="#什么是CSRF？"> </a>什么是CSRF？</h1>
<p>简单点说，CSRF攻击就是 <strong>攻击者利用受害者的身份，以受害者的名义发送恶意请求</strong>。</p>
<blockquote>
<p><strong>与XSS（Cross-site scripting，跨站脚本攻击）不同的是，XSS的目的是获取用户的身份信息，攻击者窃取到的是用户的身份（session/cookie），而CSRF则是利用用户当前的身份去做一些未经过授权的操作。</strong></p>
</blockquote>
<p>CSRF攻击最早在2001年被发现，由于它的请求是从用户的IP地址发起的，因此在服务器上的web日志中可能无法检测到是否受到了CSRF攻击，正是由于它的这种隐蔽性，很长时间以来都没有被公开的报告出来，直到2007年才真正的被人们所重视。</p>
<h1 id="CSRF有哪些危害"><a class="header-anchor" href="#CSRF有哪些危害"> </a>CSRF有哪些危害</h1>
<p>CSRF可以盗用受害者的身份，完成受害者在web浏览器有权限进行的任何操作，想想吧，能做的事情太多了。</p>
<ul>
<li>以你的名义发送诈骗邮件，消息</li>
<li>用你的账号购买商品</li>
<li>用你的名义完成虚拟货币转账</li>
<li>泄露个人隐私</li>
<li>…</li>
</ul>
<h1 id="产生原理以及利用方式"><a class="header-anchor" href="#产生原理以及利用方式"> </a>产生原理以及利用方式</h1>
<p>要完成一个CSRF攻击，必须具备以下几个条件：</p>
<ul>
<li>受害者已经登录到了目标网站（你的网站）并且没有退出</li>
<li>受害者有意或者无意的访问了攻击者发布的页面或者链接地址</li>
</ul>
<p>整个步骤大致是这个样子的：</p>
<ol>
<li>用户小明在你的网站A上面登录了，A返回了一个session ID（使用cookie存储）</li>
<li>小明的浏览器保持着在A网站的登录状态，事实上几乎所有的网站都是这样做的，一般至少是用户关闭浏览器之前用户的会话是不会结束的</li>
<li>攻击者小强给小明发送了一个链接地址，小明打开了这个地址，查看了网页的内容</li>
<li>小明在打开这个地址的时候，这个页面已经自动的对网站A发送了一个请求，这时候因为A网站没有退出，因此只要请求的地址是A的就会携带A的cookie信息，也就是使用A与小明之间的会话</li>
<li>这时候A网站肯定是不知道这个请求其实是小强伪造的网页上发送的，而是误以为小明就是要这样操作，这样小强就可以随意的更改小明在A上的信息，以小明的身份在A网站上进行操作</li>
</ol>
<h2 id="利用方式"><a class="header-anchor" href="#利用方式"> </a>利用方式</h2>
<p>利用CSRF攻击，主要包含两种方式，一种是基于GET请求方式的利用，另一种是基于POST请求方式的利用。</p>
<h3 id="GET请求利用"><a class="header-anchor" href="#GET请求利用"> </a>GET请求利用</h3>
<p>使用GET请求方式的利用是最简单的一种利用方式，其隐患的来源主要是由于在开发系统的时候没有按照HTTP动词的正确使用方式来使用造成的。<strong>对于GET请求来说，它所发起的请求应该是只读的，不允许对网站的任何内容进行修改</strong>。</p>
<p>但是事实上并不是如此，很多网站在开发的时候，<strong>研发人员错误的认为GET/POST的使用区别</strong>仅仅是在于发送请求的数据是在Body中还是在请求地址中，以及请求内容的大小不同。<strong>对于一些危险的操作比如删除文章，用户授权等允许使用GET方式发送请求，在请求参数中加上文章或者用户的ID，这样就造成了只要请求地址被调用，数据就会产生修改。</strong></p>
<p>现在假设攻击者（用户ID=121）想将自己的身份添加为网站的管理员，他在网站A上面发了一个帖子，里面包含一张图片，其地址为http://a.com/user/grant_super_user/121</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;img src="http://a.com/user/grant_super_user/121" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>设想管理员看到这个帖子的时候，这个图片肯定会自动加载显示的。于是在管理员不知情的情况下，一个赋予用户管理员权限的操作已经悄悄的以他的身份执行了。这时候攻击者121就获取到了网站的管理员权限。</p>
<h3 id="POST请求利用"><a class="header-anchor" href="#POST请求利用"> </a>POST请求利用</h3>
<p>相对于GET方式的利用，POST方式的利用更加复杂一些，难度也大了一些。攻击者需要伪造一个能够自动提交的表单来发送POST请求。</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;

$(function() {

    $('#CSRF_forCSRFm').trigger('submit');

});

&lt;/script&gt;

&lt;form action="http://a.com/user/grant_super_user" id="CSRF_form" method="post"&gt;

    &lt;input name="uid" value="121" type="hidden"&gt;

&lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>只要想办法实现用户访问的时候自动提交表单就可以了。</p>
<h1 id="防范原理"><a class="header-anchor" href="#防范原理"> </a>防范原理</h1>
<p>防范CSRF攻击，其实本质就是要求网站<strong>能够识别出哪些请求是非正常用户主动发起的</strong>。这就要求我们<strong>在请求中嵌入一些额外的授权数据，让网站服务器能够区分出这些未授权的请求</strong>，比如说在请求参数中添加一个字段，这个字段的值从登录用户的Cookie或者页面中获取的（这个字段的值必须对每个用户来说是随机的，不能有规律可循）。攻击者伪造请求的时候是无法获取页面中与登录用户有关的一个随机值或者用户当前cookie中的内容的，因此就可以避免这种攻击。</p>
<h2 id="防范技术"><a class="header-anchor" href="#防范技术"> </a>防范技术</h2>
<h3 id="Synchronizer-token-pattern"><a class="header-anchor" href="#Synchronizer-token-pattern"> </a>Synchronizer token pattern</h3>
<p>**令牌同步模式（Synchronizer token pattern，简称STP）**是在用户请求的页面中的所有表单中嵌入一个token，在服务端验证这个token的技术。token可以是任意的内容，但是一定要保证无法被攻击者猜测到或者查询到。攻击者在请求中无法使用正确的token，因此可以判断出未授权的请求。</p>
<p><strong>简单实现STP</strong>：</p>
<p>首先在index.php中，创建一个表单，在表单中，<strong>我们将session中存储的token放入到隐藏域</strong>，这样，表单提交的时候token会随表单一起提交</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;?php

    $token = sha1(uniqid(rand(), true));

    $_SESSION['token'] = $token;

?&gt;

&lt;form action="buy.php" method="post"&gt;

    &lt;input type="hidden" name="token" value="&lt;?=$token; ?&gt;" /&gt;

    ... 表单内容

&lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在服务端校验请求参数的buy.php中，对表单提交过来的token与session中存储的token进行比对，如果一致说明token是有效的</p>
<pre class="line-numbers language-none"><code class="language-none">if ($_POST['token'] != $_SESSION['token']) {

    // TOKEN无效

    throw new \Exception('Token无效，请求为伪造请求');

}

// TOKEN有效，表单内容处理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于攻击者来说，在伪造请求的时候是无法获取到用户页面中的这个token值的，因此就可以识别出其创建的伪造请求。</p>
<h3 id="Cookie-to-Header-Token"><a class="header-anchor" href="#Cookie-to-Header-Token"> </a>Cookie-to-Header Token</h3>
<p>对于使用Js作为主要交互技术的网站，<strong>将CSRF的token写入到cookie中</strong></p>
<pre class="line-numbers language-none"><code class="language-none">Set-Cookie: CSRF-token=i8XNjC4b8KVok4uw5RftR38Wgp2BFwql; expires=Thu, 23-Jul-2015 10:25:33 GMT; Max-Age=31449600; Path=/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后使用javascript读取token的值，在发送http请求的时候将其作为请求的header</p>
<pre class="line-numbers language-none"><code class="language-none">X-CSRF-Token: i8XNjC4b8KVok4uw5RftR38Wgp2BFwql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>最后服务器验证请求头中的token是否合法。</p>
<h3 id="验证码"><a class="header-anchor" href="#验证码"> </a>验证码</h3>
<p><strong>使用验证码可以杜绝CSRF攻击</strong>，但是这种方式要求每个请求都输入一个验证码，显然没有哪个网站愿意使用这种粗暴的方式，用户体验太差，用户会疯掉的。</p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>技术分享</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>技术分享08 - 前缀树</title>
    <url>/2021/10/20/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB08-%E5%89%8D%E7%BC%80%E6%A0%91/</url>
    <content><![CDATA[<h1 id="背景-搜索引擎关键字提示"><a class="header-anchor" href="#背景-搜索引擎关键字提示"> </a>背景 - 搜索引擎关键字提示</h1>
<p>搜索关键字智能提示是一个搜索应用的标配，主要作用是避免用户输入错误的搜索词，将用户引导到相应的关键词上，以提升用户搜索体验。</p>
<h1 id="前缀匹配原则"><a class="header-anchor" href="#前缀匹配原则"> </a>前缀匹配原则</h1>
<p>例如：在搜索框中输入“海底”，搜索框下面会以海底为前缀，展示“海底捞”、“海底捞火锅”、“海底世界”等等搜索词；输入“万达”，会提示“万达影城”、“万达广场”、“万达百货”等搜索词。</p>
<h1 id="Trie树"><a class="header-anchor" href="#Trie树"> </a>Trie树</h1>
<p>Trie树，即字典树，又称单词查找树或键树，是一种树形结构，是一种哈希树的变种。</p>
<p>例如，给出一组单词——重庆鸡公煲、重庆火锅、重庆小天鹅、海底捞、海底世界、海洋公园，我们可以得到下面的Trie：</p>
<img src="https://i.loli.net/2021/10/20/t8hc4I26vor1OEC.png" alt="Trie树" style="zoom:50%;">
<p>从上图可知，当用户输入前缀”重庆“的时候，搜索框可能会展示以”重庆“为前缀的“重庆鸡公煲”、“重庆火锅”、”重庆小天鹅”等关键词，再当用户输入前缀”海底“的时候，搜索框里面可能会提示以”海底“为前缀的“海底捞”、”海底世界“等关键词。</p>
<h2 id="基本性质"><a class="header-anchor" href="#基本性质"> </a>基本性质</h2>
<ol>
<li>根节点不包含字符，除根节点意外每个节点只包含一个字符。</li>
<li>从根节点到某一个节点，路径上经过的字符连接起来，为该节点对应的字符串。</li>
<li>每个节点的所有子节点包含的字符串不相同。</li>
</ol>
<h2 id="应用"><a class="header-anchor" href="#应用"> </a>应用</h2>
<p>典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。</p>
<h2 id="优点"><a class="header-anchor" href="#优点"> </a>优点</h2>
<p>可以最大限度地减少无谓的字符串比较，故可以用于词频统计和大量字符串排序。</p>
<p>跟哈希表比较：</p>
<ol>
<li>最坏情况时间复杂度比hash表好</li>
<li>没有冲突，除非一个key对应多个值（除key外的其他信息）</li>
<li>可以自带排序功能，中序遍历trie就可以得到排序</li>
</ol>
<h2 id="缺点"><a class="header-anchor" href="#缺点"> </a>缺点</h2>
<ol>
<li>Trie其实是一个以空间换时间的算法</li>
<li>如果数据存储在外部存储器等较慢位置，Trie会较hash速度慢（hash访问O(1)次外存，Trie访问O(树高)）</li>
</ol>
<h2 id="实现"><a class="header-anchor" href="#实现"> </a>实现</h2>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">TrieNode</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment">// value 为单个字符</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>isEnd <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 是否为字符串的结尾结点</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/**
   * @description: 根据字符，寻找结点
   * @param {Char} val 要查找的字符
   * @return {TrieNode | null} 找到的结点 ｜ null
   */</span>
  <span class="token function">findNode</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>value <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token keyword">return</span> child<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Trie 树的根结点</span>
  <span class="token punctuation">}</span>

  <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> c <span class="token keyword">of</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> findNode <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">findNode</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 当当前字符没有对应子结点时，创建一个节点，并作为当前结点的子结点</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>findNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        findNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>findNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      node <span class="token operator">=</span> findNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 遍历字符串结束，标记当前结点为结尾结点</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>isEnd<span class="token punctuation">)</span> node<span class="token punctuation">.</span>isEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> c <span class="token keyword">of</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> findNode <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">findNode</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>findNode <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 没找到</span>
      <span class="token keyword">else</span> node <span class="token operator">=</span> findNode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">// 包含前缀为 str 的所有字符串的数组</span>
    <span class="token keyword">let</span> track <span class="token operator">=</span> str<span class="token punctuation">;</span>        <span class="token comment">// 回溯的路径</span>
    <span class="token function">backtrack</span><span class="token punctuation">(</span>track<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>

    <span class="token comment">/**
     * @description: 回溯遍历返回所有前缀为 str 的字符串
     * @param {String} track 前缀为 str 的字符串
     * @param {TrieNode} node 要遍历的结点
     * @return {void}
     */</span>
    <span class="token keyword">function</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token parameter">track<span class="token punctuation">,</span> node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 结果只包含“海洋公园”</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>track<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// // 结果包含“海洋”和“海洋公园”</span>
      <span class="token comment">// if (node.isEnd) {</span>
      <span class="token comment">//   res.push(track);</span>
      <span class="token comment">//   if (node.children.length === 0)</span>
      <span class="token comment">//     return;</span>
      <span class="token comment">// }</span>

      node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        track <span class="token operator">+=</span> child<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token function">backtrack</span><span class="token punctuation">(</span>track<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
        track <span class="token operator">=</span> track<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> trie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'重庆鸡公煲'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'重庆火锅'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'重庆小天鹅'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'海底捞'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'海底捞火锅'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'海底世界'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'海洋'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'海洋公园'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'搜索【重庆】的结果：'</span><span class="token punctuation">,</span> trie<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">'重庆'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'搜索【海】的结果：'</span><span class="token punctuation">,</span> trie<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">'海'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'搜索【火锅】的结果：'</span><span class="token punctuation">,</span> trie<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">'火锅'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="进阶练习"><a class="header-anchor" href="#进阶练习"> </a>进阶练习</h1>
<p><a href="https://leetcode-cn.com/problems/design-add-and-search-words-data-structure/">211. 添加与搜索单词 - 数据结构设计 ｜ Leetcode</a></p>
<h1 id="参考资料"><a class="header-anchor" href="#参考资料"> </a>参考资料</h1>
<p><a href="https://tech.meituan.com/2014/02/17/pinyin-suggest.html">搜索引擎关键字智能提示的一种实现 ｜ 美团技术团队</a></p>
<p><a href="https://www.cnblogs.com/bonelee/p/8830825.html">Trie（前缀树/字典树）及其应用</a></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>技术分享</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>技术分享09 - 详述GET和POST的区别</title>
    <url>/2021/11/01/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB09-%E8%AF%A6%E8%BF%B0GET%E5%92%8CPOST%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h1 id="“标准答案”"><a class="header-anchor" href="#“标准答案”"> </a>“标准答案”</h1>
<p>GET和POST是HTTP请求的两种基本方法，在面试中被问到它们的区别，内心总是一阵窃喜，然后熟练地说出这些“标准答案”：</p>
<blockquote>
<ul>
<li>GET 在浏览器回退时是无害的，而 POST 会再次提交请求。</li>
<li>GET 产生的 URL 地址可以被 Bookmark，而 POST 不可以。（除非手动设置）</li>
<li>GET 请求会被浏览器主动 cache，而 POST 不会，除非手动设置。</li>
<li>GET 请求只能进行 URL 编码，而 POST 支持多种编码方式。</li>
<li>GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留。</li>
<li>GET 请求在URL中传送的参数是有长度限制的，而 POST 没有。</li>
<li>对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制。</li>
<li>GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息。</li>
<li>GET 参数通过 URL 传递，POST 放在 Request body 中。</li>
</ul>
</blockquote>
<p>（本标准答案参考自w3schools）</p>
<h1 id="深入"><a class="header-anchor" href="#深入"> </a>深入</h1>
<p>其实，<strong>GET 和 POST 本质上是一样的</strong>。</p>
<p>HTTP的底层是TCP/IP，GET 和 POST 是 HTTP 协议中的两种发送请求的方法。所以 GET 和 POST 的底层也是TCP/IP，也就是说，GET/POST 本质上都是 TCP 连接。GET 和 POST 能做的事情是一样的：如果要给 GET 加上 request body，给 POST 带上 URL 参数，技术上是完全行的通的。</p>
<h2 id="举个例子"><a class="header-anchor" href="#举个例子"> </a>举个例子</h2>
<p>在万维网的世界中，TCP 就像汽车，我们用 TCP 来运输数据，它很可靠，从来不会发生丢件少件的现象。但是如果路上跑的全是看起来一模一样的汽车，那么这个世界会看起来是非常混乱：送急件的汽车可能被前面满载货物的汽车拦堵在路上，整个交通系统一定会瘫痪。为了避免这种情况发生，交通规则 HTTP 诞生了。HTTP 给汽车运输设定了好几个服务类别，有 GET、POST、PUT、DELETE 等等。HTTP 规定，当执行GET请求的时候，要给汽车贴上 GET 的标签（设置 method 为 GET），而且要求把传送的数据放在车顶上（ URL 中）以方便记录。如果是 POST 请求，就要在车上贴上POST 的标签，并把货物放在车厢里。当然，你也可以在 GET 的时候往车厢内偷偷藏点货物，但是这是很不光彩；也可以在 POST 的时候在车顶上也放一些数据，让人觉得傻乎乎的。</p>
<p>HTTP 只是个行为准则，而 TCP 才是 GET 和 POST 怎么实现的基本。</p>
<p><strong>既然我们知道了他们本质上没有区别，为什么“标准答案”中会说它们的参数长度是有限制的？</strong></p>
<p>在万维网世界中，还有另一个重要的角色：运输公司。不同的浏览器（发起 HTTP 请求）和服务器（接受 HTTP 请求）就是不同的运输公司。 虽然理论上，你可以在车顶上无限地堆货物（URL 中无限加参数）。但是运输公司可不傻，装货和卸货也是有很大成本的，他们会限制单次运输量来控制风险，数据量太大对浏览器和服务器都是很大负担。（大多数）浏览器通常都会限制 URL 长度在 2KB，超过的部分，恕不处理。如果你用 GET 服务，在 Request body 偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你卸货，读出数据，有些服务器直接忽略，所以，虽然 GET 可以带 Request body，但不能保证一定能被接收到，所以不推荐我们这样做。</p>
<h3 id="GET-POST-参数长度限制"><a class="header-anchor" href="#GET-POST-参数长度限制"> </a>GET/POST 参数长度限制</h3>
<h4 id="GET-请求"><a class="header-anchor" href="#GET-请求"> </a>GET 请求</h4>
<p>HTTP GET 方法提交的数据大小长度并没有限制，HTTP 协议规范没有对 URL 长度进行限制。<br>
目前说的 GET 长度有限制，是特定的浏览器及服务器对它的限制。</p>
<h5 id="各个浏览器和-Web-服务器的最大长度总结"><a class="header-anchor" href="#各个浏览器和-Web-服务器的最大长度总结"> </a>各个浏览器和 Web 服务器的最大长度总结</h5>
<p><strong>浏览器</strong><br>
（1）IE：IE浏览器（Microsoft Internet Explorer）对 URL 长度限制是 <strong>2 083（2K+53）</strong>，超过这个限制，则自动截断（若是form 提交则提交按钮不起作用）<br>
（2）Firefox：Firefox（火狐浏览器）的 URL 长度限制为 **65 536 **字符，但实际上有效的URL最大长度不少于100 000个字符<br>
（3）Chrome：Chrome（谷歌）的 URL 长度限制超过 <strong>8182</strong> 个字符，服务器返回 414<br>
（4）Safari：Safari 的 URL 长度限制至少为 <strong>80 000</strong> 字符<br>
（5）Opera：Opera 浏览器的 URL 长度限制为 <strong>190 000</strong> 字符，Opera9 地址栏中输入 190 000 字符时依然能正常编辑</p>
<p><strong>服务器</strong><br>
（1）Apache：Apache 能接受 URL 长度限制为 <strong>8 192</strong> 字符<br>
（2）IIS：Microsoft Internet Information Server(IIS) 能接受 URL 长度限制为 <strong>16384</strong> 个字符，这个是可以通过修改的（IIS7）</p>
<h4 id="POST-请求"><a class="header-anchor" href="#POST-请求"> </a>POST 请求</h4>
<p>理论上讲，POST 是没有大小限制的。HTTP 协议规范也没有进行大小限制，起限制作用的是服务器处理程序的处理能力。</p>
<p>Tomcat 下默认 POST 长度为2M，可通过修改 <code>conf/server.xml</code> 中的 <code>maxPostSize=0</code> 来取消对 POST 大小的限制。</p>
<h2 id="重大区别"><a class="header-anchor" href="#重大区别"> </a>重大区别</h2>
<p>事实上，在它们发送请求的过程中，GET 请求产生一个 TCP 数据包，而 POST 产生两个 TCP 数据包：</p>
<p><strong>对于 GET 方式的请求，浏览器会把 HTTP Header 和 Data 一并发送出去，服务器响应 200 OK（返回数据）；而对于 POST，浏览器先发送 Header，服务器响应 100 continue，浏览器再发送 Data，服务器响应 200 OK（返回数据）。</strong></p>
<p>因为 POST 需要两步，时间上消耗的要多一点，看起来 GET 比 POST 更搞笑。因此 Yahoo 团队有推荐用 GET 替换 POST 来优化网站性能。但这样做显然是不太好的，因为：</p>
<ol>
<li>
<p>GET与POST都有自己的语义，不能随便混用。</p>
</li>
<li>
<p>据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。</p>
</li>
<li>
<p>并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。</p>
</li>
</ol>
<h3 id="为什么说-GET-比-POST-快？"><a class="header-anchor" href="#为什么说-GET-比-POST-快？"> </a>为什么说 GET 比 POST 快？</h3>
<h4 id="1-POST-请求包含更多请求头"><a class="header-anchor" href="#1-POST-请求包含更多请求头"> </a>1 POST 请求包含更多请求头</h4>
<p>因为 POST 需要在请求的 Body 部分包含数据，所以会多了几个数据描述部分的首部字段（如 Content-type），但这个方面的影响是<em>微乎其微</em>的</p>
<h4 id="2-POST-要先将请求头发送给服务器确认"><a class="header-anchor" href="#2-POST-要先将请求头发送给服务器确认"> </a>2 POST 要先将请求头发送给服务器确认</h4>
<p><strong>GET 请求的过程</strong></p>
<ol>
<li>浏览器请求 TCP 连接（第一次握手）</li>
<li>服务器答应进行 TCP 连接（第二次握手）</li>
<li>浏览器确认，并发送 GET 请求头和数据（第三次握手，这个报文比较小，所以 HTTP 会在此时进行第一次数据发送）</li>
<li>服务器返回 200 OK 响应</li>
</ol>
<p><strong>POST 请求的过程</strong></p>
<ol>
<li>浏览器请求 TCP 连接（第一次握手）</li>
<li>服务器答应进行 TCP 连接（第二次握手）</li>
<li>浏览器确认，并发送 POST 请求头（第三次握手，这个报文比较小，所以http会在此时进行第一次数据发送）</li>
<li>服务器返回 100 continue 响应</li>
<li>浏览器开始发送数据</li>
<li>服务器返回 200 OK 响应</li>
</ol>
<h4 id="3-GET-会将数据缓存起来"><a class="header-anchor" href="#3-GET-会将数据缓存起来"> </a>3 GET 会将数据缓存起来</h4>
<table>
<thead>
<tr>
<th></th>
<th>OverView</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>GET</strong></td>
<td><img src="https://images.cnblogs.com/cnblogs_com/oneword/201106/20110606102231667.png" alt="image"></td>
</tr>
<tr>
<td><strong>POST</strong></td>
<td><img src="https://i.loli.net/2021/11/01/BCzDRq6hl5g9MGb.png" alt="image"></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th></th>
<th>Cache</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>GET</strong></td>
<td><img src="https://images.cnblogs.com/cnblogs_com/oneword/201106/201106061022371925.png" alt="image"></td>
</tr>
<tr>
<td><strong>POST</strong></td>
<td><img src="https://i.loli.net/2021/11/01/V9OE34CLGDJboXc.png" alt="image"></td>
</tr>
</tbody>
</table>
<p>经测试，Chrome 下和 Firefox 下如果检测到 GET 请求的是静态资源，则会缓存，如果是数据，则不缓存（但是 IE 啥都会缓存起来）。</p>
<p><s>当然，应该没人会用 POST 去获取静态数据吧。</s></p>
<h4 id="4-POST-无法管道传输"><a class="header-anchor" href="#4-POST-无法管道传输"> </a>4 POST 无法管道传输</h4>
<p>在 HTTP/1.1 中，有一种称为管道网络传输的通信方式：把需要发送到服务器上的所有请求放到输出队列中，在第一个请求发送出去后，不等到收到服务器的应答，第二个请求紧接着就发送出去，但是这样的方式有一个问题，那就是，如果一个管道中有 10 个连接，在发送出 9 个后，服务器突然告诉你，连接关闭了，此时客户端即使收到了前 9 个请求的答复，那也只能将那 9 个答复清空。此时，客户端的这 9 个请求需要重新发送。</p>
<p>这对于幂等请求还好（比如 GET，多发送几次都没关系，每次都是相同的结果），如果是 POST 这样的非幂等请求（比如支付的时候，多发送几次就惨了），肯定是行不通的。</p>
<p>所以，POST 请求不能通过管道的方式进行通信！</p>
<h1 id="总结"><a class="header-anchor" href="#总结"> </a>总结</h1>
<ul>
<li>GET 在浏览器回退时是无害的，而 POST 会再次提交请求。</li>
<li>GET 产生的 URL 地址可以被 Bookmark，而 POST 不可以。（除非手动设置）</li>
<li>GET 请求会被浏览器主动 cache，而 POST 不会，除非手动设置。</li>
<li>GET 请求只能进行 URL 编码，而 POST 支持多种编码方式。</li>
<li>GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留。</li>
<li>GET 请求在URL中传送的参数是有长度限制的，而 POST 没有。</li>
<li>对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制。</li>
<li>GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息。</li>
<li>GET 参数通过 URL 传递，POST 放在 Request body 中。</li>
<li>GET 一般来说提交的数据最大是2k；POST 理论上没有限制，实际上IIS4中最大量为80k，IIS5中为100k。</li>
</ul>
<h1 id="参考资料"><a class="header-anchor" href="#参考资料"> </a>参考资料</h1>
<p><a href="https://www.cnblogs.com/logsharing/p/8448446.html">GET和POST两种基本请求方法的区别 - 在途中# ｜ 博客园</a></p>
<p><a href="https://www.cnblogs.com/wanBean/p/10721684.html">GET 和 POST 请求的优缺点和误区 - beaning ｜ 博客园</a></p>
<p><a href="https://www.cnblogs.com/kingon/p/9445300.html">Get请求与Post请求的区别 - kingon ｜ 博客园</a></p>
<p><a href="https://blog.csdn.net/bbenst/article/details/83584353">为什么get比post更快 - bbenst ｜ CSDN</a></p>
<p><a href="https://www.cnblogs.com/oneword/archive/2011/06/06/2073533.html">Ajax中Get请求与Post请求的区别 - Localhost ｜ 博客园</a></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>技术分享</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>技术分享10 - 滑动窗口与流量控制</title>
    <url>/2021/11/08/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB10-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E4%B8%8E%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h1 id="滑动窗口"><a class="header-anchor" href="#滑动窗口"> </a>滑动窗口</h1>
<h2 id="引入窗口概念的原因"><a class="header-anchor" href="#引入窗口概念的原因"> </a>引入窗口概念的原因</h2>
<p>我们都知道 TCP 是每发送一个数据，都要进行一次确认应答。当上一个数据包收到了应答了， 再发送下一个。</p>
<p>这个模式就有点像两个人面对面聊天，你一句他一句。但这种方式的缺点是效率比较低的。</p>
<p>如果你说完一句话，他在处理其他事情，没有及时回复你，那你就要干等着他做完其他事情后，他回复你，你才能说下一句话，很显然这不现实。</p>
<p><img src="https://i.loli.net/2021/11/08/VCMZRwIHEvz8LKo.png" alt="按数据包进行确认应答"></p>
<p>所以，这样的传输方式有一个缺点：数据包的<strong>往返时间越长，通信的效率就越低</strong>。</p>
<p>为解决这个问题，TCP 引入了<strong>窗口</strong>这个概念。即使在往返时间较长的情况下，它也不会降低网络通信的效率。</p>
<p>那么有了窗口，就可以指定窗口大小，窗口大小就是指<strong>无需等待确认应答，而可以继续发送数据的最大值</strong>。</p>
<p>窗口的实现实际上是操作系统开辟的一个缓存空间，发送方主机在等到确认应答返回之前，必须在缓冲区中保留已发送的数据。如果按期收到确认应答，此时数据就可以从缓存区清除。</p>
<p>假设窗口大小为 <code>3</code> 个 TCP 段，那么发送方就可以「连续发送」 <code>3</code> 个 TCP 段，并且中途若有 ACK 丢失，可以通过「下一个确认应答进行确认」。如下图：</p>
<p><img src="https://i.loli.net/2021/11/08/Ori8jpfFG3xzPtC.png" alt="用滑动窗口方式并行处理"></p>
<p>图中的 ACK 600 确认应答报文丢失，也没关系，因为可以通话下一个确认应答进行确认，只要发送方收到了 ACK 700 确认应答，就意味着 700 之前的所有数据「接收方」都收到了。这个模式就叫<strong>累计确认</strong>或者<strong>累计应答</strong>。</p>
<h2 id="窗口大小由哪一方决定？"><a class="header-anchor" href="#窗口大小由哪一方决定？"> </a>窗口大小由哪一方决定？</h2>
<p>TCP 头里有一个字段叫 <code>Window</code>，也就是窗口大小。</p>
<p><strong>这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据。于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来。</strong></p>
<p>所以，通常窗口的大小是<strong>由接收方的决定的</strong>。</p>
<p>发送方发送的数据大小不能超过接收方的窗口大小，否则接收方就无法正常接收到数据。</p>
<h2 id="发送方的滑动窗口"><a class="header-anchor" href="#发送方的滑动窗口"> </a>发送方的滑动窗口</h2>
<p>我们先来看看发送方的窗口，下图就是发送方缓存的数据，根据处理的情况分成四个部分，其中深蓝色方框是发送窗口，紫色方框是可用窗口：</p>
<p><img src="https://i.loli.net/2021/11/08/eMpYi3tKAWXURID.png" alt="图片"></p>
<ul>
<li>#1 是已发送并收到 ACK确认的数据：1~31 字节</li>
<li>#2 是已发送但未收到 ACK确认的数据：32~45 字节</li>
<li>#3 是未发送但总大小在接收方处理范围内（接收方还有空间）：46~51字节</li>
<li>#4 是未发送但总大小超过接收方处理范围（接收方没有空间）：52字节以后</li>
</ul>
<p>在下图，当发送方把数据「全部」都一下发送出去后，可用窗口的大小就为 0 了，表明可用窗口耗尽，在没收到 ACK 确认之前是无法继续发送数据了。</p>
<p><img src="https://i.loli.net/2021/11/08/GXKmxpcJgQDdnhb.png" alt="可用窗口耗尽"></p>
<p>在下图，当收到之前发送的数据 <code>32~36</code> 字节的 ACK 确认应答后，如果发送窗口的大小没有变化，则<strong>滑动窗口往右边移动 5 个字节，因为有 5 个字节的数据被应答确认</strong>，接下来 <code>52~56</code> 字节又变成了可用窗口，那么后续也就可以发送 <code>52~56</code> 这 5 个字节的数据了。</p>
<p><img src="https://i.loli.net/2021/11/08/ntKZi9VozIJQAjf.png" alt="32～36字节已确认"></p>
<h3 id="程序表示发送窗口四个部分的方法"><a class="header-anchor" href="#程序表示发送窗口四个部分的方法"> </a>程序表示发送窗口四个部分的方法</h3>
<p>TCP 滑动窗口方案使用三个指针来跟踪在四个传输类别中的每一个类别中的字节。其中两个指针是绝对指针（指特定的序列号），一个是相对指针（需要做偏移）。</p>
<p><img src="https://i.loli.net/2021/11/08/RfvBUJqYyFt1G2e.png" alt="SND.WND SND.UN SND.NXT"></p>
<ul>
<li><code>SND.WND</code>：表示发送窗口的大小（大小是由接收方指定的）；</li>
<li><code>SND.UNA</code>：是一个绝对指针，它指向的是已发送但未收到确认的第一个字节的序列号，也就是 #2 的第一个字节。</li>
<li><code>SND.NXT</code>：也是一个绝对指针，它指向未发送但可发送范围的第一个字节的序列号，也就是 #3 的第一个字节。</li>
<li>指向 #4 的第一个字节是个相对指针，它需要 <code>SND.UNA</code> 指针加上 <code>SND.WND</code>大小的偏移量，就可以指向 #4 的第一个字节了。</li>
</ul>
<p>那么可用窗口大小的计算就可以是：</p>
<p><strong>可用窗口大小 = SND.WND -（SND.NXT - SND.UNA）</strong></p>
<h2 id="接收方的滑动窗口"><a class="header-anchor" href="#接收方的滑动窗口"> </a>接收方的滑动窗口</h2>
<p>接下来我们看看接收方的窗口，接收窗口相对简单一些，根据处理的情况划分成三个部分：</p>
<ul>
<li>#1 + #2 是已成功接收并确认的数据（等待应用进程读取）；</li>
<li>#3 是未收到数据但可以接收的数据；</li>
<li>#4 未收到数据并不可以接收的数据；</li>
</ul>
<p><img src="https://i.loli.net/2021/11/08/buG2mVPhZrspc7E.png" alt="接受窗口"></p>
<p>其中三个接收部分，使用两个指针进行划分:</p>
<ul>
<li><code>RCV.WND</code>：表示接收窗口的大小，它会通告给发送方。</li>
<li><code>RCV.NXT</code>：是一个指针，它指向期望从发送方发送来的下一个数据字节的序列号，也就是 #3 的第一个字节。</li>
<li>指向 #4 的第一个字节是个相对指针，它需要 <code>RCV.NXT</code> 指针加上 <code>RCV.WND</code> 大小的偏移量，就可以指向 #4 的第一个字节了。</li>
</ul>
<h2 id="接受窗口和发送窗口大小相等？"><a class="header-anchor" href="#接受窗口和发送窗口大小相等？"> </a>接受窗口和发送窗口大小相等？</h2>
<p>并不是完全相等，接收窗口的大小是<strong>约等于</strong>发送窗口的大小的。</p>
<p>因为滑动窗口并不是一成不变的。比如，当接收方的应用进程读取数据的速度非常快的话，这样的话接收窗口可以很快的就空缺出来。那么新的接收窗口大小，是通过 TCP 报文中的 Window 字段来告诉发送方。那么这个传输过程是存在时延的，所以接收窗口和发送窗口是约等于的关系。</p>
<h1 id="流量控制"><a class="header-anchor" href="#流量控制"> </a>流量控制</h1>
<p>发送方不能无脑的发数据给接收方，要考虑接收方处理能力。</p>
<p>如果一直无脑的发数据给对方，但对方处理不过来，那么就会导致触发重发机制，从而导致网络流量的无端的浪费。</p>
<p>为了解决这种现象发生，<strong>TCP 提供一种机制可以让「发送方」根据「接收方」的实际接收能力控制发送的数据量，这就是所谓的流量控制。</strong></p>
<p>下面举个栗子，为了简单起见，假设以下场景：</p>
<ul>
<li>客户端是接收方，服务端是发送方</li>
<li>假设接收窗口和发送窗口相同，都为 <code>200</code></li>
<li>假设两个设备在整个传输过程中都保持相同的窗口大小，不受外界影响</li>
</ul>
<p><img src="https://i.loli.net/2021/11/08/7K1zPqGuFXgWBfk.png" alt="流量控制"></p>
<p>根据上图的流量控制，说明下每个过程：</p>
<ol>
<li>客户端向服务端发送请求数据报文。这里要说明下，本次例子是把服务端作为发送方，所以没有画出服务端的接收窗口。</li>
<li>服务端收到请求报文后，发送确认报文和 80 字节的数据，于是可用窗口 <code>Usable</code> 减少为 120 字节，同时 <code>SND.NXT</code> 指针也向右偏移 80 字节后，指向 321，<strong>这意味着下次发送数据的时候，序列号是 321。</strong></li>
<li>客户端收到 80 字节数据后，于是接收窗口往右移动 80 字节，<code>RCV.NXT</code> 也就指向 321，<strong>这意味着客户端期望的下一个报文的序列号是 321</strong>，接着发送确认报文给服务端。</li>
<li>服务端再次发送了 120 字节数据，于是可用窗口耗尽为 0，服务端无法在继续发送数据。</li>
<li>客户端收到 120 字节的数据后，于是接收窗口往右移动 120 字节，<code>RCV.NXT</code> 也就指向 441，接着发送确认报文给服务端。</li>
<li>服务端收到对 80 字节数据的确认报文后，<code>SND.UNA</code> 指针往右偏移后指向 321，于是可用窗口 <code>Usable</code> 增大到 80。</li>
<li>服务端收到对 120 字节数据的确认报文后，<code>SND.UNA</code> 指针往右偏移后指向 441，于是可用窗口 <code>Usable</code> 增大到 200。</li>
<li>服务端可以继续发送了，于是发送了 160 字节的数据后，<code>SND.NXT</code> 指向 601，于是可用窗口  <code>Usable</code> 减少到 40。</li>
<li>客户端收到 160 字节后，接收窗口往右移动了 160 字节，<code>RCV.NXT</code> 也就是指向了 601，接着发送确认报文给服务端。</li>
<li>服务端收到对 160 字节数据的确认报文后，发送窗口往右移动了 160 字节，于是 <code>SND.UNA</code> 指针偏移了 160 后指向 601，可用窗口 <code>Usable</code> 也就增大至了 200。</li>
</ol>
<h2 id="操作系统缓冲区与滑动窗口的关系"><a class="header-anchor" href="#操作系统缓冲区与滑动窗口的关系"> </a>操作系统缓冲区与滑动窗口的关系</h2>
<p>前面的流量控制例子，我们假定了发送窗口和接收窗口是不变的，但是实际上，发送窗口和接收窗口中所存放的字节数，都是放在操作系统内存缓冲区中的，而操作系统的缓冲区，会<strong>被操作系统调整</strong>。</p>
<p>当应用进程没办法及时读取缓冲区的内容时，也会对我们的缓冲区造成影响。</p>
<h1 id="参考资料"><a class="header-anchor" href="#参考资料"> </a>参考资料</h1>
<p><a href="https://mp.weixin.qq.com/s/Tc09ovdNacOtnMOMeRc_uA">你还在为 TCP 重传、滑动窗口、流量控制、拥塞控制发愁吗？看完图解就不愁了 - 小林coding</a></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>简单介绍V8引擎</title>
    <url>/2021/06/24/%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8DV8%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h1 id="V8引擎"><a class="header-anchor" href="#V8引擎"> </a>V8引擎</h1>
<p><strong>Chrome V8引擎</strong>是<code>JavaScript引擎</code>的一种实现，最初由一些语言方面专家设计，后被谷歌收购，随后谷歌对其进行了<code>开源</code>。</p>
<blockquote>
<p>何为JavaScript引擎？</p>
<p>JavaScript引擎是执行JS代码的程序或解释器。JavaScript引擎可以实现为标准解释器或即时编译器，它以某种形式将JS编译为字节码。</p>
</blockquote>
<p>V8<code>使用C++开发</code>，在运行JavaScript之前，相比其它的JavaScript的引擎转换成字节码或解释执行，<code>V8将其编译成原生机器码</code>（IA-32, x86-64, ARM, or MIPS CPUs），并且使用了如<code>内联缓存</code>（inline caching）等方法来<code>提高性能</code>。</p>
<p>有了这些功能，JavaScript程序在V8引擎下的运行速度媲美二进制程序。</p>
<p>V8<code>支持众多操作系统</code>，如<code>windows</code>、<code>linux</code>、<code>android</code>等，也<code>支持其他硬件架构</code>，如IA32,X64,ARM等，具有很好的<code>可移植</code>和<code>跨平台特性</code>。</p>
<p><strong>除了V8引擎，还有这些JS引擎：</strong></p>
<ul>
<li>
<p><code>SpiderMonkey</code> - 第一个JavaScript引擎，Netscape Navigator，Firefox</p>
</li>
<li>
<p><code>JavaScriptCore</code> - 苹果公司为Safari开发</p>
</li>
<li>
<p><code>Rhin</code> - 由Mozilla基金会开源，完全用Java开发</p>
</li>
<li>
<p><code>Chakra</code> (JavaScript) - Microsoft IE9-IE11、Microsoft Edge</p>
</li>
<li>
<p><code>JerryScript</code> - 一个物联网的轻量级引擎</p>
</li>
<li>
<p><code>Nashorn</code> - 作为OpenJDK的一部分，由Oracle Java语言和工具组编写</p>
</li>
</ul>
<h1 id="V8引擎的工作原理"><a class="header-anchor" href="#V8引擎的工作原理"> </a>V8引擎的工作原理</h1>
<p><img src="https://img-blog.csdnimg.cn/img_convert/9f35c1d3e64d6f0084bccafc9e2605ec.png" alt="V8引擎的工作原理"></p>
<h1 id="V8的四个重要子模块"><a class="header-anchor" href="#V8的四个重要子模块"> </a>V8的四个重要子模块</h1>
<p>V8由许多子模块构成，其中这4个模块是最重要的：</p>
<ul>
<li><code>Parser</code>：负责将JS源码转换为<code>Abstract Syntax Tree(AST)(抽象语法树)</code>
<ul>
<li>如果函数没有被调用，那么就不会被转换为AST</li>
</ul>
</li>
<li><code>Ignition</code>：<strong>Interpreter（解释器）</strong>，负责将AST转换为<code>Bytecode</code>，解释执行Bytecode；同时收集<code>TurboFan</code>优化编译所需的信息：比如函数参数的类型，因为有了类型才能进行真实的运算
<ul>
<li>如果函数只调用一次，Ignition会解释执行ByteCode</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>补充知识：</strong></p>
<p>通常虚拟机有两种类型：<strong>基于栈（Stack-based）<strong>和</strong>基于寄存器（Register-based）</strong>。</p>
<p>基于栈的虚拟机使用栈保存函数参数、中间运算结果、变量等；基于寄存器的虚拟机使用寄存器保存参数、中间计算结果，支持寄存器的指令操作。</p>
<p>通常，基于栈的虚拟机也定义了少量的寄存器，基于寄存器的虚拟机也有堆栈，其区别体现在它们提供的指令集体系结构（ISA , Instruction Set Architecture）不同。</p>
<p>大多数解释器是基于栈的，比如<code>Java虚拟机</code>，<code>.Net虚拟机</code>，还有<code>早期的V8虚拟机</code>。基于堆栈的虚拟机在处理函数调用、解决递归问题和切换上下文时，更加简单明快。</p>
<p><strong>而<code>现在的V8虚拟机</code>，则采用了基于寄存器的设计，它将一些中间数据保存到寄存器中。</strong></p>
<p>下图为基于寄存器的解释器架构：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/9e2ecf434e269281fbaff5d07eff0b65.png" alt="基于寄存器的解释器架构"></p>
</blockquote>
<ul>
<li>
<p><code>TurboFan</code>：<strong>Compiler（编译器）</strong>，负责利用Ignition所收集的类型信息，将Bytecode转换为优化后的汇编代码</p>
<ul>
<li>如果一个函数被多次调用，那么就会被标记为热点函数，那么就会经过TurboFan转换成优化的机器码，提高代码的执行性能</li>
<li>机器码实际上也会被还原为ByteCode，这是因为如果后续执行函数的过程中，类型发生了变化（比如sum函数原来执行的是number类型，后来执行变成了string类型），之前优化的机器码并不能正确的处理运算，就会逆向的转换成字节码</li>
</ul>
</li>
<li>
<p><code>Orinoco</code>：<strong>Garbage Collector（垃圾回收模块）</strong>，负责将程序不再需要的内存空间回收</p>
</li>
</ul>
<h1 id="参考资料"><a class="header-anchor" href="#参考资料"> </a>参考资料</h1>
<p><a href="https://blog.csdn.net/howgod/article/details/118097654">万字干货！详解JavaScript执行过程</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>V8引擎</tag>
        <tag>JavaScript引擎</tag>
      </tags>
  </entry>
  <entry>
    <title>55分钟学会正则表达式</title>
    <url>/2021/06/04/RegularExpression/</url>
    <content><![CDATA[<blockquote>
<p>正则表达式是一种可以进行查找以及字符串替换操作的字符串。</p>
</blockquote>
<p>正则表达式在文本编辑器中广泛使用，比如正则表达式被用于：</p>
<ul>
<li>检查文本中是否含有指定的特征词</li>
<li>找出文中匹配特征词的位置</li>
<li>从文本中提取信息，比如：字符串的子串</li>
<li>修改文本</li>
</ul>
<p>与文本编辑器相似，几乎所有的高级编程语言都支持正则表达式。在这样的语境下，“文本”也就是一个字符串，可以执行的操作都是类似的。一些编程语言（比如Perl，JavaScript）会检查正则表达式的语法。</p>
<h1 id="正则表达式是什么？"><a class="header-anchor" href="#正则表达式是什么？"> </a>正则表达式是什么？</h1>
<p>正则表达式只是一个字符串。没有长度限制，但是，这样的正则表达式长度往往较短。如下所示是一些正则表达式的例子：</p>
<ul>
<li><code>I had a \S+ day today</code></li>
<li><code>[A-Za-z0-9\-_]{3,16}</code></li>
<li><code>\d\d\d\d-\d\d-\d\d</code></li>
<li><code>v(\d+)(\.\d+)*</code></li>
<li><code>TotalMessages="(.*?)"</code></li>
<li><code>&lt;[^&lt;&gt;]&gt;</code></li>
</ul>
<p>这些字符串实际上都是微型计算机程序。正则表达式的语法，实际上是一种轻量级、简洁、适用于特定领域的编程语言。记住这一点，那么你就很容易理解下面的事情：</p>
<ul>
<li>每一个正则表达式，都可以分解为一个指令序列，比如“先找到这样的字符，再找到那样的字符，再从中找到一个字符…”</li>
<li>每一个正则表达式都有输入（文本）和输出（匹配规则的输出，有时是修改后的文本）</li>
<li>正则表达式有可能出现语法错误——不是所有的字符串都是正则表达式</li>
<li>正则表达式语法很有个性，也可以说很恐怖</li>
<li>有时可以通过编译，使得正则表达式执行更快</li>
</ul>
<p>在实现中，正则表达式还有其他的特点。本文将重点讨论正则表达式的核心语法，在几乎所有的正则表达式中都可以见到这些规则。</p>
<p><em>特别提示：正则表达式与文件通配语法无关，比如 <code>*.xml</code></em></p>
<h1 id="正则表达式的基础语法"><a class="header-anchor" href="#正则表达式的基础语法"> </a>正则表达式的基础语法</h1>
<h2 id="字符"><a class="header-anchor" href="#字符"> </a>字符</h2>
<p>正则表达式中包含了一系列的字符，这些字符只能匹配它们本身。有一些被称为“元字符”的特殊字符，可以匹配一些特殊规则。</p>
<p>大部分的字符，包括所有的字母和数字字符，是普通字符。也就意味着，它们只能匹配它们自己，如下所示正则表达式：</p>
<p><code>cat</code></p>
<p>意味着，只能匹配一个字符串，以"c"开头，然后是字符"a"，紧跟着是字符"t"的字符串。</p>
<p>到目前为止，正则表达式的功能类似于</p>
<ul>
<li>常规的Find功能</li>
<li>Java中的 <code>String.indexOf()</code> 函数</li>
<li>PHP中的 <code>strpos()</code>函数</li>
<li>等等</li>
</ul>
<p><em>注意：不做特殊说明，正则表达式中是区分大小写的。但是，几乎所有正则表达式的实现，都会提供一个Flag用来控制是否区分大小写。</em></p>
<h2 id="点“-”"><a class="header-anchor" href="#点“-”"> </a>点“.”</h2>
<p>我们第一个要讲解的元字符是"."。这个符号意味着可以匹配任意一个字符。如下所示正则表达式：</p>
<p><code>c.t</code></p>
<p>意味着匹配“以c开头,之后是任意一个字符，紧跟着是字母"t"”的字符串。</p>
<p>在一段文本中，这样的正则表达式可以用来找出<code>cat</code>, <code>cot</code>, <code>czt</code>这样的字符串，甚至可以找出<code>c.t</code>这样的组合，但是不能找到<code>ct</code>或者是<code>coot</code>这样的字符串。</p>
<p>使用反斜杠"\”可以忽略元字符，使得元字符的功能与普通字符一样。所以，正则表达式：</p>
<p><code>c\.t</code></p>
<p>表示“找到字母c，然后是一个点（“.”），紧跟着字母t”</p>
<p>反斜杠本身也是一个元字符，这意味着反斜杠本身也可以通过相似的方法变回到普通字符的用途。因此，正则表达式</p>
<p><code>c\\t</code></p>
<p>表示匹配“以字符c开头，然后是一个反斜杠，紧跟着是字母t”的字符串。</p>
<p><em>注意！在正则表达式的实现中，"."是不能用于匹配换行符的。“换行符”的表示方法在不同实现中也不同。实际编程时，请参考相关文档。在本文中，我认为.是可以匹配任意字符的。实现环境通常会提供一个Flag标志位，来控制这一点。</em></p>
<h1 id="字符类"><a class="header-anchor" href="#字符类"> </a>字符类</h1>
<p>字符类是一组在方括号<code>[]</code>内的字符，表示可以匹配其中的任何一个字符。</p>
<ul>
<li>正则表达式<code>c[aeiou]t</code>，表示可以匹配的字符串是“以c开头，接着是aeiou中的任何一个字符，最后以t结尾”。在文本的实际应用中，这样的正则表达式可以匹配：cat,cet,cit,cot,cut五种字符串。</li>
<li>正则表达式<code>[0123456789]</code>表示匹配任意一个整数。</li>
<li>正则表达式<code>[a]</code>表示匹配单字符a。</li>
</ul>
<p>包含忽略字符的例子</p>
<ul>
<li><code>\[a\]</code>表示匹配字符串[a]</li>
<li><code>[\[\]\ab]</code>表示匹配的字符为"[“或者”]“或者"a”,或者"b"</li>
<li><code>[\\\[\]]</code>表示匹配的字符为""或者 “[“或者”]”</li>
</ul>
<p>在字符类中，字符的重复和出现顺序并不重要。<code>[abaaabcc]</code>与<code>[abc]</code>是相同的。</p>
<p><em>重要提示：字符类中和字符类外的规则有时不同，一些字符在字符类中是元字符，在字符类外是普通字符。一些字符正好相反。还有一些字符在字符类中和字符类外都是元字符，这要视情况而定！</em></p>
<p><em>比如".“表示匹配任意一个字符，而”[.]"表示匹配一个全角句号。这不是一回事！</em></p>
<h2 id="字符类的范围“-”"><a class="header-anchor" href="#字符类的范围“-”"> </a>字符类的范围“-”</h2>
<p>在字符集中，你可以通过使用短横线<code>-</code>来表示匹配字母或数字的范围。</p>
<ul>
<li><code>[b-f]</code>与<code>[b,c,d,e,f]</code>相同，都是匹配一个字符"b"或"c"或"“d"或"e"或"f”</li>
<li><code>[A-Z]</code>与<code>[ABCDEFGHIJKLMNOPQRSTUVWXYZ]</code>相同，都是匹配任意一个大写字母。</li>
<li><code>[1-9]</code>与<code>[123456789]</code>相同，都是匹配任意一个非零数字。</li>
</ul>
<p><strong>练习</strong></p>
<p>使用目前我们已经讲解的正则表达式相关知识，在字典中匹配找到含有最多连续元音的单词，同时找到含有最多连续辅音的单词。</p>
<p><strong>答案</strong></p>
<p><code>[aeiou][aeiou][aeiou][aeiou][aeiou][aeiou]</code> 这样的正则表达式，可以匹配连续含有六个元音的单词，比如 <code>·</code> 和 euouaes。</p>
<p>同样的，恐怖的正则表达式<code>[bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz]</code> 可以找到连续含有十个辅音的单词sulphhydryls.</p>
<p>下文中，我们会讲解，怎样有效缩短这样的正则表达式长度。</p>
<p>在字符类之外，短横线没有特殊含义。正则表达式a-z，表示匹配字符串“以a开头，然后是一个短横线，以z结尾”。</p>
<p>范围和单独的字符可能在一个字符类中同时出现：</p>
<ul>
<li><code>[0-9.,]</code>表明匹配一个数字，或者一个全角句号，或者一个逗号</li>
<li><code>[0-9a-fA-F]</code>意味着匹配一个十六进制数</li>
<li><code>[a-zA-Z0-9\-]</code>意味着匹配一个字母、数字或者一个短横线</li>
</ul>
<p><strong>练习</strong></p>
<p>使用已经介绍过的正则表达式知识，匹配YYYY-MM-DD格式的日期。</p>
<p><strong>答案</strong></p>
<p><code>[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]</code>.</p>
<p>虽然你可以尝试在正则表达式中使用一些非字母或数字作为范围的最后一个符号，比如<code>abc[!-/]def</code>，但是这并不是在每种实现中都合法。即使这样的语法是合法的，这样的语义也是模糊的。最好不要这样使用。</p>
<p>同时，你必须谨慎选择范围的边界值。即使<code>[A-z]</code>在你使用的实现中，是合法的，也可能会产生无法预料的运行结果。（注意，在z到a之间，是有字符存在的）</p>
<p><em>注意：范围的字符值代表的是字符而已，并不能代表数值范围，比如[1-31]表示匹配一个数字，是1或者2或者3，而不是匹配一个数值在1到31之间的数。</em></p>
<h2 id="字符类的反义“-”"><a class="header-anchor" href="#字符类的反义“-”"> </a>字符类的反义“^”</h2>
<p>你可以在字符类的起始位放一个反义符<code>^</code>。</p>
<ul>
<li><code>[^a]</code>表示匹配任何不是"a"的字符</li>
<li><code>[^a-zA-Z0-9]</code>表示匹配任何不是字母也不是数字的字符</li>
<li><code>[\^abc]</code>匹配一个为"^"或者a或者b或者c的字符</li>
<li><code>[^\^]</code>表示匹配任何不为"^"的字符</li>
</ul>
<h2 id="转义字符类“-x”"><a class="header-anchor" href="#转义字符类“-x”"> </a>转义字符类“\x”</h2>
<ul>
<li>
<p><code>\d</code>这个正则表达式与<code>[0-9]</code>作用相同，都是匹配任何一个数字。（要匹配\d,应该使用正则表达式\d）</p>
</li>
<li>
<p><code>\w</code>与<code>[0-9 A-Z a-z _]</code>相同，都表示匹配一个数字或字母字符</p>
</li>
<li>
<p><code>\s</code>意味着匹配一个空字符（空格，制表符，回车或者换行）</p>
</li>
</ul>
<p>另外</p>
<ul>
<li><code>\D</code>与<code>[^0-9]</code>相同，表示匹配一个非数字字符。</li>
<li><code>\W</code>与<code>[^0-9 A-Z a-z _]</code>相同，表示匹配一个非数字同时不是字母的字符<strong>且不是 <code>_</code></strong>。</li>
<li><code>\S</code>表示匹配一个非空字符。</li>
</ul>
<p>很多正则表达式的实现中，提供了更多的字符类，或者是标志位在ASCII码的基础上，扩展现有的字符类。</p>
<p><em>提示：统一字符集中包含除了0至9之外的更多数字字符，同样的，也包含更多的空字符和字母字符。实际使用正则表达式时，请仔细查看相关文档。</em></p>
<p><strong>练习</strong></p>
<p>简化正则表达式 <code>[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]</code>.</p>
<p><strong>答案</strong></p>
<p><code>\d\d\d\d-\d\d-\d\d</code>.</p>
<h2 id="重复“-”"><a class="header-anchor" href="#重复“-”"> </a>重复“{}”</h2>
<p>在字符或字符集之后，你可以使用<code>{ }</code>大括号来表示重复</p>
<ul>
<li>正则表达式<code>a{1}</code>与<code>a</code>意思相同，都表示匹配字母a</li>
<li><code>a{3}</code>表示匹配字符串"aaa"</li>
<li><code>a{0}</code>表示匹配空字符串。从这个正则表达式本身来看，它毫无意义。如果你对任何文本执行这样的正则表达式，你可以定位到搜索的起始位置，即使文本为空。</li>
<li><code>a\{2\}</code>表示匹配字符串"a{2}"</li>
<li>在字符类中，大括号没有特殊含义。<code>[{}]</code>表示匹配一个左边的大括号，或者一个右边的大括号</li>
</ul>
<p><strong>练习</strong></p>
<p>简化下面的正则表达式</p>
<ul>
<li><code>z.......z</code></li>
<li><code>\d\d\d\d-\d\d-\d\d</code></li>
<li><code>[aeiou][aeiou][aeiou][aeiou][aeiou][aeiou]</code></li>
<li><code>[bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz]</code></li>
</ul>
<p><strong>答案</strong></p>
<ul>
<li><code>z.{7}z</code></li>
<li><code>\d{4}-\d{2}-\d{2}</code></li>
<li><code>[aeiou]{6}</code></li>
<li><code>[bcdfghjklmnpqrstvwxyz]{10}</code></li>
</ul>
<p><em>注意：重复字符是没有记忆性的，比如<code>[abc]{2}</code>表示先匹配“a或者b或者c”，再匹配“a或者b或者c”，与匹配“aa或者ab或者ac或者ba或者bb或者bc或者ca或者cb或者cc”一样。<code>[abc]{2}</code>并不能表示匹配“aa或者bb或者cc”</em></p>
<h2 id="指定重复次数范围"><a class="header-anchor" href="#指定重复次数范围"> </a>指定重复次数范围</h2>
<p>重复次数是可以指定范围的</p>
<ul>
<li><code>x{4,4}</code>与<code>x{4}</code>相同</li>
<li><code>colou{0,1}r</code>表示匹配colour或者color</li>
<li><code>a{3,5}</code>表示匹配aaaaa或者aaaa或者aaa</li>
</ul>
<p><em>注意这样的正则表达式会优先匹配最长字符串，比如输入 <code>I had an aaaaawful day</code>会匹配单词aaaaawful中的aaaaa，而不会匹配其中的aaa。</em></p>
<p>重复次数是可以有范围的，但是有时候这样的方法也不能找到最佳答案。如果你的输入文本是I had an aaawful daaaaay那么在第一次匹配时，只能找到aaawful，只有再次执行匹配时才能找到daaaaay中的aaaaa.</p>
<p>重复次数的范围可以是开区间</p>
<ul>
<li><code>a{1，}</code>表示匹配一个或一个以上的连续字符a，依然是匹配最长字符串。当找到第一个a之后，正则表达式会尝试匹配尽量多个的连续字母a。</li>
<li><code>.{0,}</code>表示匹配任意内容。无论你输入的文本是什么，即使是一个空字符串，这个正则表达式都会成功匹配全文并返回结果。</li>
</ul>
<p><strong>练习</strong></p>
<p>使用正则表达式找到双引号。要求输入字符串可能包含任意个字符。</p>
<p>调整你的正则表达式使得在一对双引号中间不再包含其他的双引号。</p>
<p><strong>答案</strong></p>
<p><code>".{0,}"</code>，然后 <code>"[^"]{0,}"</code>.</p>
<h2 id="关于重复的转义字符“-”"><a class="header-anchor" href="#关于重复的转义字符“-”"> </a>关于重复的转义字符“? * +”</h2>
<p><code>?</code>与<code>{0,1}</code>相同，比如，<code>colou?r</code>表示匹配colour或者color</p>
<p><code>*</code>与<code>{0,}</code>相同。比如，<code>.*</code>表示匹配任意内容</p>
<p><code>+</code>与<code>{1，}</code>相同。比如，<code>\w+</code>表示匹配一个词。其中“一个词”表示由一个或一个以上的字符组成的字符串，比如_var或者AccountName1.</p>
<p>这些是你必须知道的常用转义字符，除此之外还有:</p>
<ul>
<li><code>\?\*\+</code> 表示匹配字符串"?*+"</li>
<li><code>[?*+]</code>表示匹配一个问号，或者一个*号，或者一个加号</li>
</ul>
<p><strong>练习</strong></p>
<p>简化下列的正则表达式:</p>
<ul>
<li><code>".{0,}"</code> and <code>"[^"]{0,}"</code></li>
<li><code>x?x?x?</code></li>
<li><code>y*y*</code></li>
<li><code>z+z+z+z+</code></li>
</ul>
<p><strong>答案</strong></p>
<ul>
<li><code>".*"</code> and <code>"[^"]*"</code></li>
<li><code>x{0,3}</code></li>
<li><code>y*</code></li>
<li><code>z{4,}</code></li>
</ul>
<p><strong>练习</strong></p>
<p>写出正则表达式，寻找由非字母字符分隔的两个单词。如果是三个呢？六个呢？</p>
<p><strong>答案</strong></p>
<p><code>\w+\W+\w+</code>, <code>\w+\W+\w+\W+\w+</code>, <code>\w+\W+\w+\W+\w+\W+\w+\W+\w+\W+\w+</code>.</p>
<p>下文中，我们将简化这个正则表达式。</p>
<h2 id="非贪婪匹配"><a class="header-anchor" href="#非贪婪匹配"> </a>非贪婪匹配</h2>
<p>正则表达式 <code>".*"</code> 表示匹配双引号，之后是任意内容，之后再匹配一个双引号。注意，其中匹配任意内容也可以是双引号。通常情况下，这并不是很有用。通过在句尾加上一个问号，可以使得字符串重复不再匹配最长字符。</p>
<ul>
<li><code>\d{4,5}?</code>表示匹配\d\d\d\d或者\d\d\d\d\d。也就是和<code>\d{4}</code>一样</li>
<li><code>colou??r</code>与<code>colou{0,1}r</code>相同，表示找到color或者colour。这与<code>colou?r</code>一样。</li>
<li><code>".*?"</code>表示先匹配一个双引号，然后匹配最少的字符，然后是一个双引号，与上面两个例子不同，这很有用。</li>
</ul>
<h2 id="选择匹配“-”"><a class="header-anchor" href="#选择匹配“-”"> </a>选择匹配“|”</h2>
<p>你可以使用<code>|</code>来分隔可以匹配的不同选择:</p>
<ul>
<li><code>cat|dog</code>表示匹配"cat"或者"dog"</li>
<li><code>red|blue|</code>以及<code>red||blue</code>以及<code>|red|blue</code>都表示匹配red或者blue或者一个空字符串</li>
<li><code>a|b|c</code>与<code>[abc]</code>相同</li>
<li><code>cat|dog|\|</code>表示匹配"cat"或者"dog"或者一个分隔符"|"</li>
<li><code>[cat|dog]</code>表示匹配a或者c或者d或者g或者o或者t或者一个分隔符"|"</li>
</ul>
<p><strong>练习</strong></p>
<p>简化下列正则表达式:</p>
<ul>
<li><code>s|t|u|v|w</code></li>
<li><code>aa|ab|ba|bb</code></li>
<li><code>[abc]|[^abc]</code></li>
<li><code>[^ab]|[^bc]</code></li>
<li><code>[ab][ab][ab]?[ab]?</code></li>
</ul>
<p><strong>答案</strong></p>
<ul>
<li><code>[s-w]</code></li>
<li><code>[ab]{2}</code></li>
<li><code>.</code></li>
<li><code>[^b]</code></li>
<li><code>[ab]{2,4}</code></li>
</ul>
<p><strong>练习</strong></p>
<p>使用正则表达式匹配1到31之间的整数</p>
<p><strong>答案</strong></p>
<p><code>[1-31]</code>不是正确答案！</p>
<p>这样的正则表达式不唯一. <code>[1-9]|[12][0-9]|3[01]</code> 是其中之一。</p>
<h2 id="分组“-”"><a class="header-anchor" href="#分组“-”"> </a>分组“()”</h2>
<p>你可以使用括号<code>()</code>表示分组:</p>
<ul>
<li>通过使用 <code>(Mon|Tues|Wednes|Thurs|Fri|Satur|Sun)day</code> 匹配一周中的某一天</li>
<li><code>(\w*)ility</code> 与 <code>\w*ility</code> 相同。都是匹配一个由"ility"结尾的单词。稍后我们会讲解，为何第一种方法更加有用。</li>
<li><code>\(\)</code>表示匹配一对括号。</li>
<li><code>[()]</code>表示匹配任意一个左括号或者一个右括号</li>
</ul>
<p><strong>练习</strong></p>
<p>在《时间机器中》找到一对括号中的内容，然后通过修改正则表达式，找到不含括号的内容。</p>
<p><strong>答案</strong></p>
<p><code>\(.*\)</code>. 然后是， <code>\([^()]*\)[^()]*</code>.</p>
<p>分组可以包括空字符串：</p>
<ul>
<li><code>(red|blue)</code>表示匹配red或者blue或者是一个空字符串</li>
<li><code>abc()def</code>与abcdef相同</li>
</ul>
<p>你也可以在分组的基础上使用重复：</p>
<ul>
<li><code>(red|blue)?</code>与<code>(red|blue|)</code>相同</li>
<li><code>\w+(\s+\w+)</code>表示匹配一个或多个由空格分隔的单词</li>
</ul>
<p><strong>练习</strong></p>
<p>简化正则表达式 <code>\w+\W+\w+\W+\w+</code> 以及 <code>\w+\W+\w+\W+\w+\W+\w+\W+\w+\W+\w+</code>.</p>
<p><strong>答案</strong></p>
<p><code>\w+(\W+\w+){2}</code>， <code>\w+(\W+\w+){5}</code>.</p>
<h2 id="单词分隔符“-b”"><a class="header-anchor" href="#单词分隔符“-b”"> </a>单词分隔符“\b”</h2>
<p>在单词和非单词之间有单词分隔符。记住，一个单词<code>\w</code>是<code>[0-9A-Za-z_]</code>，而非单词字符是<code>\W</code>表示<code>[^0-9A-Za-z_]</code>.</p>
<p>在文本的开头和结尾通常也有单词分隔符。</p>
<p>在输入文本it’s a cat中，实际有八个单词分隔符。如果我们在cat之后在上一个空格，那就有九个单词分隔符。</p>
<ul>
<li><code>\b</code>表示匹配一个单词分隔符</li>
<li><code>\b\w\w\w\b</code>表示匹配一个三字母单词</li>
<li><code>a\ba</code>表示匹配两个a中间有一个单词分隔符。这个正则表达式永远不会有匹配的字符，无论输入怎样的文本。</li>
</ul>
<p>单词分隔符本身并不是字符。它们的宽度为0。下列正则表达式的作用不同</p>
<ul>
<li><code>(\bcat)\b</code></li>
<li><code>(\bcat\b)</code></li>
<li><code>\b(cat)\b</code></li>
<li><code>\b(cat\b)</code></li>
</ul>
<p><strong>练习</strong></p>
<p>在词典中找到最长的单词。</p>
<p><strong>答案</strong></p>
<p>在尝试之后发现，<code>\b.{45,}\b</code>可以在字典中找到最长单词</p>
<h2 id="换行符“-”"><a class="header-anchor" href="#换行符“-”"> </a>换行符“^ $”</h2>
<p>一篇文本中可以有一行或多行，行与行之间由换行符分隔，比如：</p>
<ul>
<li>Line一行文字</li>
<li>Line break换行符</li>
<li>Line一行文字</li>
<li>Line break换行符</li>
<li>…</li>
<li>Line break换行符</li>
<li>Line一行文字</li>
</ul>
<p>注意，所有的文本都是以一行结束的，而不是以换行符结束。但是，任意一行都可能为空，包括最后一行。</p>
<p>行的起始位置，是在换行符和下一行首字符之间的空间。考虑到单词分隔符，文本的起始位置也可以当做是首行位置。</p>
<p>最后一行是最后一行的尾字符和换行符之间的空间。考虑到单词分隔符，文本的结束也可以认为是行的结束。</p>
<p>那么新的格式表示如下:</p>
<ul>
<li>Start-of-line, line, end-of-line</li>
<li>Line break</li>
<li>Start-of-line, line, end-of-line</li>
<li>Line break</li>
<li>…</li>
<li>Line break</li>
<li>Start-of-line, line, end-of-line</li>
</ul>
<p>基于上述概念:</p>
<ul>
<li><code>^</code>表示匹配行的开始位置</li>
<li><code>$</code>表示匹配行的结束位置</li>
<li><code>^$</code>表示一个空行</li>
<li><code>^.*$</code> 表示匹配全文内容，因为行的开始符号也是一个字符，"."会匹配这个符号。找到单独的一行，可以使用 <code>^.*?$</code></li>
<li><code>\^\$</code>表示匹配字符串"^$"</li>
<li><code>[$]</code>表示匹配一个$。但是，<code>[^]</code>不是合法的正则表达式。记住在方括号中，字符有不同的特殊含义。要想在方括号内匹配^，必须用<code>[\^]</code></li>
</ul>
<p>与字符分隔符一样，换行符也不是字符。它们宽度为0。如下所示的正则表达式作用不同：</p>
<ul>
<li><code>(^cat)$</code></li>
<li><code>(^cat$)</code></li>
<li><code>^(cat)$</code></li>
<li><code>^(cat$)</code></li>
</ul>
<p><strong>练习</strong></p>
<p>使用正则表达式在《时间机器》中找到最长的一行。</p>
<p><strong>答案</strong></p>
<p>使用正则表达式<code>^.{73,}$</code>可以匹配长度为73的一行</p>
<h2 id="文本分界“-A-z”"><a class="header-anchor" href="#文本分界“-A-z”"> </a>文本分界“^ $ \A \z”</h2>
<p>在很多的正则表达式实现中，将<code>^</code>和<code>$</code>作为文本的开始符号和结束符号。</p>
<p>还有一些实现中，用<code>\A</code>和<code>\z</code>作为文本的开始和结束符号。</p>
<h1 id="捕捉和替换"><a class="header-anchor" href="#捕捉和替换"> </a>捕捉和替换</h1>
<p>从这里开始，正则表达式真正体现出了它的强大。</p>
<h2 id="捕获组"><a class="header-anchor" href="#捕获组"> </a>捕获组</h2>
<p>你已经知道了使用括号可以匹配一组符号。使用括号也可以捕获子串。假设正则表达式是一个小型计算机程序，那么捕获子串就是它输出的一部分。</p>
<p>正则表达式<code>(\w*)ility</code>表示匹配以ility结尾的词。第一个被捕获的部分是由<code>\w*</code>控制的。比如，输入的文本内容中有单词accessibility，那么首先被捕获的部分是accessib。如果输入的文本中有单独的ility，则首先被捕获的是一个空字符串。</p>
<p>捕获组从左向右编号。也就是只需要对左括号计数。</p>
<p>假设有这样的正则表达式：<code>(\w+) had a ((\w+) \w+)</code></p>
<p>输入的内容是：I had a nice day</p>
<ul>
<li>捕获组1：I</li>
<li>捕获组2：nice day</li>
<li>捕获组3：nice</li>
</ul>
<p>在一些正则表达式的实现中，你可以从零开始编号，编号零表示匹配整句话：I had a nice day.</p>
<p>在其他的实现中，如果没有制定捕获组，那么捕获组1会自动地填入捕获组0的信息。</p>
<p>有一些正则表达式的实现中，提供了“非捕获组”的语法，但是这样的语法并不是标准语法，因此我们不会介绍。</p>
<p>从一个成功的匹配中返回的捕获组个数，与使用原来的正则表达式获得的捕获组个数相同。记住这一点，你可以解释一些奇怪的现象。</p>
<p>正则表达式<code>((cat)|dog)</code>表示匹配cat或者dog。这里有两个捕获组，如果输入文本是dog，那么捕获组1是dog,捕获组2为空。</p>
<p>正则表达式<code>a(\w)*</code>表示匹配一个以a开头的单词。这里只有一个捕获组</p>
<ul>
<li>如果输入文本为a，捕获组1为空。</li>
<li>如果输入文本为ad，捕获组为d</li>
<li>如果输入文本为avocado，捕获组1为v。但是捕获组0表示整个单词avocado.</li>
</ul>
<h2 id="替换"><a class="header-anchor" href="#替换"> </a>替换</h2>
<p>假如你使用了一个正则表达式去匹配字符串，你可以描述另外一个字符串来替换其中的匹配字符。用来替换的字符串称为替换表达式。它的功能类似于</p>
<ul>
<li>常规的Replace会话</li>
<li>Java中的String.replace()函数</li>
<li>PHP的str_replace()函数</li>
<li>等等</li>
</ul>
<p><strong>练习</strong></p>
<p>将《时间机器》中所有的元音字母替换为r。</p>
<p><strong>答案</strong></p>
<p>使用正则表达式<code>[aeiou]</code>以及<code>[AEIOU]</code>，对应的替换字符串分别为 r 和 R .</p>
<p>但是，你可以在替换表达式中引用捕获组。这是在替换表达式中，你可以唯一操作的地方。这也是非常有效的，因为这样你就不用重构你找到的字符串。</p>
<p>假设你正在尝试将美国风格的日期表示MM/DD/YY替换为ISO 8601日期表示YYYY-MM-DD</p>
<ul>
<li>
<p>从正则表达式<code>(\d\d)/(\d\d)/(\d\d)</code>开始。注意，这其中有三个捕获组：月份，日期和两位的年份。</p>
</li>
<li>
<p>捕获组的内容和捕获组编号之间用反斜杠分隔，因此你的替换表达式应该是<code>20\3-\1-\2</code>.</p>
</li>
<li>
<p>如果我们输入的文本中包含03/04/05表示2005年3月4日那么：</p>
<ul>
<li>捕获组1：03</li>
<li>捕获组2：04</li>
<li>捕获组3：05</li>
<li>替换字符串<code>2005-03-04</code></li>
</ul>
</li>
</ul>
<p>在替换表达式中，你可以多次使用捕获组</p>
<ul>
<li>
<p>对于双元音，正则表达式为<code>([aeiou])</code>，替换表达式为<code>\1\1</code></p>
</li>
<li>
<p>在替换表达式中不能使用反斜杠。所以，你必须在每个双引号或者反斜杠之前加上反斜杠。</p>
</li>
<li>
<p>你的正则表达式可以是<code>([\\"])</code>。捕获组1是双引号或者反斜杠，替换表达式应该是<code>\\\1</code></p>
</li>
</ul>
<p>在某些实现中，采用美元符号<code>$</code>代替<code>\</code></p>
<p><strong>练习</strong></p>
<p>使用正则表达式和替换表达式，将23h59这样的时间戳转化为23:59.</p>
<p><strong>答案</strong></p>
<p>正则表达式<code>(\d\d)h(\d\d)</code>匹配时间戳，替换表达式<code>\1:\2</code></p>
<h2 id="反向引用"><a class="header-anchor" href="#反向引用"> </a>反向引用</h2>
<p>在一个正则表达式中，你也可以引用捕获组，这称为反向引用。</p>
<p>比如，<code>[abc]{2}</code>表示匹配aa或者ab或者ac或者ba或者bb或者bc或者ca或者cb或者cc。但是<code>([abc])\1</code>表示只匹配aa或者bb或者cc。</p>
<p><strong>练习</strong></p>
<p>在字典中，找到包含两次重复子串的最长单词，比如<code>papa</code>，<code>coco</code></p>
<p><strong>答案</strong></p>
<p><code>\b(.{6,})\1\b</code> 匹配 <code>chiquichiqui</code>.</p>
<p>如果我们不在乎单词的完整性，我们可以忽略单词的分解，使用正则表达式 <code>(.{7,})\1</code>匹配 countercountermeasure 以及 countercountermeasures.</p>
<h1 id="使用正则表达式编程"><a class="header-anchor" href="#使用正则表达式编程"> </a>使用正则表达式编程</h1>
<p>以下为需要特别注意的地方：</p>
<h2 id="过度使用的反斜杠"><a class="header-anchor" href="#过度使用的反斜杠"> </a>过度使用的反斜杠</h2>
<p>在一些编程语言，比如Java中，对于包含正则表达式的字符串没有特殊标记。字符串有着自己的过滤规则，这是优先于正则表达式规则的，这是频繁使用反斜杠的原因。</p>
<p>比如在Java中</p>
<ul>
<li>
<p>匹配一个数字，使用的正则表达式从<code>\d</code>变为代码中的<code>String re= "\\d"</code></p>
</li>
<li>
<p>匹配双引号字符串的正则表达式从<code>"[^"]*"</code> 变为<code>String re = "\"[^\"]*\""</code></p>
</li>
<li>
<p>匹配反斜杠或者是左边方括号，或者右边方括号的正则表达式从<code>[\\\[\]]</code> 变为<code>String re = "[\\\\\\[\\]]";</code></p>
</li>
<li>
<p><code>String re = "\\s";</code> 和<code>String re = "[ \t\r\n]";</code> 是等价的。 注意它们实际执行调用时的层次不同。</p>
</li>
</ul>
<p>在其他的编程语言中，正则表达式是由特殊标明的，比如使用<code>/</code>。下面是JavaScript的例子：</p>
<ul>
<li>匹配一个数字，<code>\d</code>会简单写成 <code>var regExp = /\d/;</code>.</li>
<li>匹配一个反斜杠或者一个左边的方括号或者一个右边的方括号， <code>var regExp = /[\\\[\]]/;</code></li>
<li><code>var regExp = /\s/;</code> 和 <code>var regExp = /[ \t\r\n]/;</code> 是等价的</li>
<li>当然，这意味着在使用<code>/</code>时必须重复两次。比如找到URL必须使用<code>var regExp = /https?:\/\//;</code>。</li>
</ul>
<p>所以我们应该特别注意反斜杠。</p>
<h2 id="动态正则表达式"><a class="header-anchor" href="#动态正则表达式"> </a>动态正则表达式</h2>
<p>当你动态创建一个正则表达式的时候请特别小心。如果你使用的字符串不够完善的话，可能会有意想不到的匹配结果。这可能导致语法错误，更糟糕的是，你的正则表达式语法正确，但是结果无法预料。</p>
<p>错误的Java代码：</p>
<p><code>String sep = System.getProperty("file.separator");</code></p>
<p><code>String[] directories = filePath.split(sep);</code></p>
<p>Bug：String.split() 认为sep是一个正则表达式。但是，在Windows中，Sep是表示匹配一个反斜杠，也就是与正则表达式"\"相同。这个正则表达式是正确的，但是会返回一个异常：PatternSyntaxException.</p>
<p>任何好的编程语言都会提供一种良好的机制来跳过字符串中所有的元字符。在Java中，你可以这样实现：</p>
<p><code>String sep = System.getProperty("file.separator");</code></p>
<p><code>String[] directories = filePath.split(Pattern.quote(sep));</code></p>
<h2 id="循环中的正则表达式"><a class="header-anchor" href="#循环中的正则表达式"> </a>循环中的正则表达式</h2>
<p>将正则表达式字符串加入反复运行的程序中，是一种开销很大的操作。<strong>如果你可以在循环中避免使用正则表达式，你可以大大提高效率。</strong></p>
<h1 id="其他建议"><a class="header-anchor" href="#其他建议"> </a>其他建议</h1>
<h2 id="输入验证"><a class="header-anchor" href="#输入验证"> </a>输入验证</h2>
<p>正则表达式可以用来进行输入验证。但是严格的输入验证会使得用户体验较差。</p>
<p>比如：</p>
<h2 id="信用卡号"><a class="header-anchor" href="#信用卡号"> </a>信用卡号</h2>
<p>在一个网站上，我输入了我的卡号比如 <code>1234 5678 8765 4321 </code>网站拒绝接收。因为它使用了正则表达式<code>\d{16}</code>。</p>
<p><strong>正则表达式应该考虑到用户输入的空格和短横线。</strong></p>
<p>实际上，为什么不先过滤掉所有的非数字字符，然后再进行有效性验证呢？这样做，可以先使用<code>\D</code>以及空的替换表达式。</p>
<p><strong>练习</strong></p>
<p>在不先过滤掉所有的非数字字符的情况下，使用正则表达式验证卡号的正确性。</p>
<p><strong>答案</strong></p>
<p><code>\D*(\d\D*){16}</code> 是实现它的一种方法。</p>
<h2 id="名字"><a class="header-anchor" href="#名字"> </a>名字</h2>
<p>不要使用正则表达式来验证姓名。实际上，即使可以，也不要企图验证姓名。</p>
<p>程序员对名字的错误看法:</p>
<ul>
<li>名字中不含空格</li>
<li>名字中没有连接符号</li>
<li>名字中只会使用ASCII码字符</li>
<li>名字中出现的字都在特殊字符集中</li>
<li>名字至少要有M个字的长度</li>
<li>名字不会超过N个字的长度</li>
<li>人们只有一个名</li>
<li>人们只有一个中间名</li>
<li>人们只有一个姓（最后三条是从英语的人名考虑）</li>
</ul>
<h2 id="电子邮件地址"><a class="header-anchor" href="#电子邮件地址"> </a>电子邮件地址</h2>
<p>不要使用正则表达式验证邮箱地址的正确性。</p>
<p>第一，这样的验证很难是精确的。电子邮件地址是可以用正则表达式验证的，但是表达式会非常的长并且复杂。短的正则表达式会导致错误。（你知道吗？电子邮箱地址中会有一些注释）</p>
<p>第二，即使一个电子邮件地址可以成功匹配正则表达式，也不代表这个邮箱实际存在。</p>
<p><strong>邮箱的唯一验证方法，是发送验证邮件。</strong></p>
<h2 id="解析HTML或XML"><a class="header-anchor" href="#解析HTML或XML"> </a>解析HTML或XML</h2>
<p>在严格的应用场景中，不要使用正则表达式来解析HTML或者XML。</p>
<p>因为，解析HTML或者XML：</p>
<ol>
<li>使用简单的正则表达式不能完成</li>
<li>总体来说非常困难</li>
<li>已经有其他的方法解决</li>
</ol>
<p><strong>其实可以使用一个已有的解析库来完成这个工作。</strong></p>
<h1 id="总结"><a class="header-anchor" href="#总结"> </a>总结</h1>
<ul>
<li>
<p>字符： <code>a</code> <code>b</code> <code>c</code> <code>d</code> <code>1</code> <code>2</code> <code>3</code> <code>4</code> etc.</p>
</li>
<li>
<p>字符类：</p>
<ul>
<li>
<p><code>.</code> 代表任何字符</p>
</li>
<li>
<p><code>[abc]</code></p>
</li>
<li>
<p><code>[a-z]</code></p>
</li>
<li>
<p><code>\d </code>表示“数字”</p>
</li>
<li>
<p><code>\w</code> 表示“字母”，<code>[0-9A-Za-z_]</code></p>
</li>
<li>
<p><code>\s </code>表示 “空格，制表符，回车或换行符”</p>
</li>
<li>
<p>否定字符类: <code>[^abc]</code> <code>\D</code> <code>\W</code> <code>\S</code></p>
</li>
</ul>
</li>
<li>
<p>重复：</p>
<ul>
<li><code>{4}</code></li>
</ul>
</li>
<li>
<p><code>{3,16}</code></p>
<ul>
<li><code>{1,}</code></li>
</ul>
</li>
<li>
<p><code>?</code> 表示 “零次或一次”</p>
</li>
<li>
<p><code>*</code> 表示 “大于零次”</p>
</li>
<li>
<p><code>+</code> 表示 “一次或一次以上”</p>
</li>
<li>
<p>如果不加上<code>?</code>，所有的重复都是最长匹配的（贪婪）</p>
</li>
<li>
<p>分组：<code>(Septem|Octo|Novem|Decem)ber</code></p>
</li>
<li>
<p>词，行以及文本的分隔：<code>\b</code> <code>^</code> <code>$</code> <code>\A</code> <code>\z</code></p>
</li>
<li>
<p>转义字符：<code>\1</code> <code>\2</code> <code>\3</code> etc. (在匹配表达式和替换表达式中都可用)</p>
</li>
<li>
<p>元字符：<code>.</code> <code>\</code> <code>[</code> <code>]</code> <code>{</code> <code>}</code> <code>?</code> <code>*</code> <code>+</code> <code>|</code> <code>(</code> <code>)</code> <code>^</code> <code>$</code></p>
</li>
<li>
<p>在字符类中使用元字符：<code>[</code> <code>]</code> <code>\</code> <code>-</code> <code>^</code></p>
</li>
<li>
<p>使用反斜杠可以忽略元字符：<code>\</code></p>
</li>
</ul>
<h1 id="参考资料"><a class="header-anchor" href="#参考资料"> </a>参考资料</h1>
<ul>
<li>英文原文：<a href="https://qntm.org/re_en">Learn regular expressions in about 55 minutes</a></li>
<li>中文翻译：<a href="https://github.com/EZLippi/practical-programming-books/blob/master/src/30-minutes-to-learn-regex.md">EZLippi/practical-programming-books/30-minutes-to-learn-regex.md</a>（译文有些笔误）</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>搬运</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>清楚搞懂HTTP及HTTPS</title>
    <url>/2021/04/30/%E6%B8%85%E6%A5%9A%E6%90%9E%E6%87%82HTTP%E5%8F%8AHTTPS/</url>
    <content><![CDATA[<h1 id="提纲"><a class="header-anchor" href="#提纲"> </a>提纲</h1>
<p><img src="https://pic1.zhimg.com/80/v2-48c1f7bf308e903a02d0b515c74b537c_720w.jpg" alt="HTTP五类面试题"></p>
<h1 id="HTTP基本概念"><a class="header-anchor" href="#HTTP基本概念"> </a>HTTP基本概念</h1>
<h2 id="HTTP是什么？描述一下"><a class="header-anchor" href="#HTTP是什么？描述一下"> </a>HTTP是什么？描述一下</h2>
<p>HTTP（HyperText Transfer Protocol）是超文本传输协议</p>
<h2 id="详细解释“超文本传输协议”？"><a class="header-anchor" href="#详细解释“超文本传输协议”？"> </a>详细解释“超文本传输协议”？</h2>
<p><strong>超文本传输协议</strong>可以拆成三个部分：超文本、传输、协议。</p>
<p><img src="https://pic3.zhimg.com/80/v2-8cf1cb40afdfb17fb9709bb0198dc4c6_720w.jpg" alt="三个部分"></p>
<h3 id="协议"><a class="header-anchor" href="#协议"> </a>协议</h3>
<p>HTTP是一个用在计算机世界里的协议。</p>
<p>它使用计算机能够理解的语言，确立了一种<strong>计算机之间交流通信的规范</strong>（两个以上的参与者——协），以及相关的<strong>各种控制和错误处理方式</strong>（行为约定和规范——议）。</p>
<h3 id="传输"><a class="header-anchor" href="#传输"> </a>传输</h3>
<p>HTTP协议是一个双向协议，是一个在计算机世界里专门用来<strong>在两点之间传输数据的约定和规范</strong>。数据虽然在两点之间传输，但允许中间有中转或接力。中间人需要遵从HTTP协议，只要不打扰基本的数据传输，就可以添加任意<code>额外的东西</code>。</p>
<h3 id="超文本"><a class="header-anchor" href="#超文本"> </a>超文本</h3>
<blockquote>
<p>超文本就是超越了普通文本（字符文字、图片、视频、压缩包等）的文本，它是文字、图片、视频等的混合体，最关键是有超链接，能从一个超文本跳转到另一个超文本。</p>
</blockquote>
<blockquote>
<p>HTML就是最常见的超文本，它本身只是纯文字文件，但内部用很多标签定义了图片、视频等链接。经过浏览器的解释，呈现出一个有文字、有画面的网页。</p>
</blockquote>
<p>HTTP传输的内容是超文本。</p>
<h3 id="结论"><a class="header-anchor" href="#结论"> </a>结论</h3>
<p><strong>HTTP是一个在计算机世界里专门在<code>两点</code>之间<code>传输</code>文字、图片、音频、视频等<code>超文本</code>数据的<code>约定和规范</code>。</strong></p>
<h2 id="“HTTP-是用于从互联网服务器传输超文本到本地浏览器的协议HTTP”-，这种说法正确吗？"><a class="header-anchor" href="#“HTTP-是用于从互联网服务器传输超文本到本地浏览器的协议HTTP”-，这种说法正确吗？"> </a>“HTTP 是用于从互联网服务器传输超文本到本地浏览器的协议HTTP” ，这种说法正确吗？</h2>
<p>不正确，因为也可以是<code>服务器到服务器</code>，所以采用两点之间的描述更准确。</p>
<h2 id="“HTTP常见的状态码”有哪些？"><a class="header-anchor" href="#“HTTP常见的状态码”有哪些？"> </a>“HTTP常见的状态码”有哪些？</h2>
<h3 id="1xx"><a class="header-anchor" href="#1xx"> </a>1xx</h3>
<p>1xx类状态码属于<code>提示信息</code>，是协议处理中的一种中间状态，实际用到的比较少。</p>
<h3 id="2xx"><a class="header-anchor" href="#2xx"> </a>2xx</h3>
<p>2xx类状态码表示服务器<code>成功</code>处理了客户端的请求。</p>
<p><code>200 OK</code>是最常见的成功状态码，表示一切正常。如果是非HEAD请求，服务器返回的响应头都会有body数据。</p>
<p><code>202 Accepted</code>表示服务器已经收到请求消息，但尚未进行处理，用于将请求由另一个进程或服务器进行处理，或是对请求进行批处理的情形。</p>
<p><code>204 No Content</code>也是最常见的状态码，与200 OK基本相同，但响应头没有body数据。</p>
<p><code>206 Partial Content</code>是应用于HTTP分块下载或断电续传，表示响应返回的body数据并不是资源的全部，而是其中一部分，也是服务器的处理成功状态。</p>
<h3 id="3xx"><a class="header-anchor" href="#3xx"> </a>3xx</h3>
<p>3xx类代码表示客户端请求的资源发送了变动，需要客户端用新的URL重新发送请求获取资源，也就是<code>重定向</code>。</p>
<p><code>301 Moved Permanently</code>表示永久重定向，说明请求的资源已经不存在了，需要改用新的URL再次访问。</p>
<p><code>302 Found</code>表示临时重定向，说明请求的资源还在，但暂时需要用另一个URL来访问。</p>
<p>301和302都会在响应头里使用字段<code>Location</code>，指明后续要跳转的URL，浏览器会自动重定向新的URL。</p>
<p><code>304 Not Modified</code>不具有跳转含义，表示资源未修改，重定向已存在的缓冲缓冲，也称缓存重定向，用于缓存控制。</p>
<h3 id="4xx"><a class="header-anchor" href="#4xx"> </a>4xx</h3>
<p>4xx状态码表示客户端发送的报文有误，服务器无法处理，是错误码。</p>
<p><code>400 Bad Request</code>表示客户端请求的报文有错误，但只是个笼统的错误。</p>
<p><code>403 Forbidden</code>表示服务器禁止访问资源，并不是客户端的请求出错。</p>
<p><code>404 Not Found</code>表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端。</p>
<h3 id="5xx"><a class="header-anchor" href="#5xx"> </a>5xx</h3>
<p>5xx类状态码表示客户端请求报文正确，但<code>服务器处理时内部发生了错误</code>，属于服务器端的错误码。</p>
<p><code>500 Internal Server Error</code>与400类似，时格笼统通用的错误码，服务器发生了什么错误，我们并不知道。</p>
<p><code>501 Not Implemented</code>表示客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思。</p>
<p><code>502 Bad Gateway</code>通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。</p>
<p><code>503 Service Unavailable</code>表示服务器当前很忙，暂时无法响应服务器，类似“网络服务正忙，请稍后重试”的意思。</p>
<h2 id="HTTP常见字段有哪些？"><a class="header-anchor" href="#HTTP常见字段有哪些？"> </a>HTTP常见字段有哪些？</h2>
<h3 id="Host-字段"><a class="header-anchor" href="#Host-字段"> </a>Host 字段</h3>
<p>客户端发送请求时，用来指定服务器的域名。</p>
<p>有了Host字段，就可以将请求发往<code>同一台</code>服务器上的不同网站。</p>
<p><code>Host: www.A.com</code></p>
<p><img src="https://pic1.zhimg.com/80/v2-40c7fb8149b85d97729bfb2e146621b0_720w.jpg" alt="Host"></p>
<h3 id="Content-Length-字段"><a class="header-anchor" href="#Content-Length-字段"> </a>Content-Length 字段</h3>
<p>服务器在返回数据时，会有Content-Length字段，表明本次响应的数据长度。</p>
<p><code>Content-Length: 1000</code></p>
<p><img src="https://pic1.zhimg.com/80/v2-e0849c0af3fddbed53ff886ae7f2c8b8_720w.jpg" alt="Content-Lenth"></p>
<p>上图是告诉浏览器，本次服务器响应的数据长度是1000个字节，后面的字节就是下一个响应了。</p>
<h3 id="Connection-字段"><a class="header-anchor" href="#Connection-字段"> </a>Connection 字段</h3>
<p>Connection字段最常用于客户端要求服务器使用TCP持久连接，以便其他请求复用。</p>
<p>HTTP/1.1版本的默认连接都是持久连接，但为了兼容老版本的HTTP，需要指定Connection首部字段的值为<code>Keep-Alive</code>。</p>
<p><code>Connection: keep-alive</code></p>
<p>这样，一个可复用的TCP连接就建立了，直到客户端或服务器主动关闭连接。但这不是标准字段。</p>
<p><img src="https://pic2.zhimg.com/80/v2-b0b4fcb0906df46a117fc8fffb60c0e9_720w.jpg" alt="Connection"></p>
<h3 id="Content-Type-字段"><a class="header-anchor" href="#Content-Type-字段"> </a>Content-Type 字段</h3>
<p>Content-Type字段用于服务器响应时，告诉客户端，本次数据是什么什么格式。</p>
<p><code>Content-Type: text/html; charset=utf-8</code></p>
<p>上面的类型表明，发送的是网页，编码是UTF-8。</p>
<p>客户端请求时，可以使用<code>Accept</code>字段声明自己可以接受哪种数据格式。</p>
<p><code>Accept: */*</code></p>
<p>上面的类型声明中，客户端声明自己可以接受任何格式的数据。</p>
<p><img src="https://pic1.zhimg.com/80/v2-712d7ba52f0a80495cdbe297066644c8_720w.jpg" alt="Accept &amp; Content-Type"></p>
<h3 id="Content-Encoding-字段"><a class="header-anchor" href="#Content-Encoding-字段"> </a>Content-Encoding 字段</h3>
<p>Content-Encoding字段说明数据的压缩方法，表示服务器返回的数据使用了什么压缩格式。</p>
<p><code>Content-Encoding: gzip</code></p>
<p>上面的类型声明表示，服务器返回的数据采用了gzip方式压缩，告知客户端需要用此方法解压。</p>
<p>客户端在请求时，用<code>Accept-Encoding</code>字段说明自己可以接受哪些压缩格式。</p>
<p><code>Accept-Encoding: gzip, deflate</code></p>
<p><img src="https://pic4.zhimg.com/80/v2-813ae6d5358fe1e1b2c2a6758f11b8d3_720w.jpg" alt="Accept-Encoding &amp; Content-Encoding"></p>
<h1 id="GET-与-POST"><a class="header-anchor" href="#GET-与-POST"> </a>GET 与 POST</h1>
<h2 id="说一下GET和POST的区别？"><a class="header-anchor" href="#说一下GET和POST的区别？"> </a>说一下GET和POST的区别？</h2>
<h3 id="GET方法"><a class="header-anchor" href="#GET方法"> </a>GET方法</h3>
<p><strong>Get方法</strong>的含义是请求<code>从服务器获取资源</code>，这个资源可以是静态的文本、页面、图片视频等。</p>
<p><em>比如，你打开我的文章，浏览器就会发送 GET请求给服务器，服务器就会返回文章的所有文字及资源。</em></p>
<p><img src="https://pic2.zhimg.com/80/v2-916676ba8aa7b6dfd74e8b5de5e685d1_720w.jpg" alt="GET请求"></p>
<h3 id="POST方法"><a class="header-anchor" href="#POST方法"> </a>POST方法</h3>
<p><strong>POST方法</strong>是反向操作，向<code>URI</code>指定的资源提交数据，数据就放在报文的body里。</p>
<blockquote>
<p>URI，统一资源标志符（Uniform Resource Identifier），表示的是web上每一种可用的资源，如 HTML文档、图像、视频片段、程序等都由一个URI进行标识的。</p>
<p>URL，统一资源定位符（Uniform Resource Locator）是URI的一个子集。</p>
</blockquote>
<p><em>比如，你在我文章底部，敲入了留言后点击“提交”，浏览器就会执行一次 POST 请求，把你的留言文字放进了报文 body 里，然后拼接好 POST 请求头，通过 TCP 协议发送给服务器。</em></p>
<p><img src="https://pic2.zhimg.com/80/v2-82a77bd8ff9e9c721e1bc1adb278dee1_720w.jpg" alt="POST请求"></p>
<h3 id="GET与POST对比"><a class="header-anchor" href="#GET与POST对比"> </a>GET与POST对比</h3>
<ul>
<li>POST更安全（不会作为url的一部分，不会被缓存、保存在服务器日志、以及浏览器浏览记录和书签中）</li>
<li>POST发送的数据更大（GET有url长度限制）</li>
<li>POST能发送更多的数据类型和编码方式（GET只能发送ASCII字符进行url编码）</li>
<li>GET参数通过URL传递，POST放在Request body中</li>
<li>GET在浏览器回退时是无害的，而POST会再次提交请求</li>
<li>POST用于修改和写入数据，GET一般用于搜索排序和筛选之类的操作</li>
<li>POST比GET慢</li>
</ul>
<h2 id="GET和POST方法都是安全和幂等的吗？"><a class="header-anchor" href="#GET和POST方法都是安全和幂等的吗？"> </a>GET和POST方法都是安全和幂等的吗？</h2>
<blockquote>
<p>“安全”“幂等”的概念：</p>
<p>在HTTP协议里，所谓的“安全”是指请求方法不会“破坏”服务器上的资源。</p>
<p>所谓的“幂等”，意思是多次执行相同的操作，结果都是“相同”的。</p>
</blockquote>
<p>很明显，<strong>GET方法就是安全且幂等的</strong>，因为它是<code>只读</code>操作，无论操作多少次，服务器上的数据都是安全的，且每次的结果都是相同的的</p>
<p><strong>POST</strong>因为是<code>新增或提交数据</code>的操作，会修改服务器上的资源，所以是<strong>不安全的</strong>，且多次提交数据就会创建多个资源，所以是<strong>不幂等的</strong>。</p>
<h1 id="HTTP特性"><a class="header-anchor" href="#HTTP特性"> </a>HTTP特性</h1>
<h2 id="HTTP-1-1的优点有哪些，如何体现？"><a class="header-anchor" href="#HTTP-1-1的优点有哪些，如何体现？"> </a>HTTP/1.1的优点有哪些，如何体现？</h2>
<p>HTTP最突出的优点是<code>简单</code>、<code>灵活和易于扩展</code>、<code>应用广泛和跨平台</code>。</p>
<h3 id="1-简单"><a class="header-anchor" href="#1-简单"> </a>1. 简单</h3>
<p>HTTP基本的报文格式是<code>header + body</code>，头部信息是<code>key-value</code>简单文本形式，<code>易于理解</code>，降低了学习和使用门槛。</p>
<h3 id="2-灵活和易于扩展"><a class="header-anchor" href="#2-灵活和易于扩展"> </a>2. 灵活和易于扩展</h3>
<p>HTTP协议里的各类请求方法、URI/URL、状态码、头字段等每个组成要求都没有被固定死，<code>都允许开发人员自定义和扩充</code>。</p>
<p>同时HTTP由于是工作在应用层（OSI第七层），则它的<code>下层可以随意变化</code>。</p>
<p>HTTPS也就是在HTTP与TCP层之间增加了<code>SSL/TLS安全传输层</code>，HTTP/3甚至把TCPP（就是TCP/IP）层换成了UDP的QUIC。</p>
<h3 id="3-应用广泛和跨平台"><a class="header-anchor" href="#3-应用广泛和跨平台"> </a>3. 应用广泛和跨平台</h3>
<p>HTTP的应用范围非常<code>广泛</code>，从台式机的浏览器到手机上的各种app，同时天然具有<code>跨平台</code>的优越性</p>
<h2 id="HTTP的缺点？"><a class="header-anchor" href="#HTTP的缺点？"> </a>HTTP的缺点？</h2>
<p>HTTP协议里有<code>优缺点一体</code>的双刃剑，分别是<code>无状态</code>、<code>明文传输</code>，同时还有一大缺点<code>不安全</code>。</p>
<h3 id="1-无状态"><a class="header-anchor" href="#1-无状态"> </a>1. 无状态</h3>
<h4 id="好处"><a class="header-anchor" href="#好处"> </a>好处</h4>
<p>因为服务器不会记忆HTTP的状态，所以不需要额外的资源来记录状态信息。因此减轻了服务器的负担，能够把更多的CPU和内容用来对外提供服务。</p>
<h4 id="坏处"><a class="header-anchor" href="#坏处"> </a>坏处</h4>
<p>既然服务器没有记忆能力，它在完成有关联性的操作的时候会非常麻烦。</p>
<p><em>例如，登录 ➡️ 添加购物车 ➡️ 下单 ➡️  结算 ➡️ 支付，这系列操作都要知道用户的身份才行。但服务器不知道这些请求是有关联的，所以每次都要问一遍身份信息。</em></p>
<p>对于上述的无状态问题，解决方案有很多种，其中比较简单的方式是使用<strong>Cookie技术</strong>。（还有<code>通过Session保存状态信息</code> ）</p>
<p><code>Cookie</code>通过在请求和响应报文中，写入Cookie信息来控制客户端的状态。相当于，在客户端第一次请求后，服务器会下发一个装有客户信息的<code>小贴纸</code>，后续客户端请求服务器时，带上小贴纸，服务器就能认得了。</p>
<p><img src="https://pic3.zhimg.com/80/v2-77e366acf08daca941ddd70db1ac9c16_720w.jpg" alt="Cookie"></p>
<h3 id="2-明文传输"><a class="header-anchor" href="#2-明文传输"> </a>2. 明文传输</h3>
<h4 id="好处-v2"><a class="header-anchor" href="#好处-v2"> </a>好处</h4>
<p>明文意味着，在传输过程中的信息是可<code>方便阅读</code>的。<em>通过浏览器的F12控制台或Wireshark抓包都可以直接肉眼查看，为调试工作带来了极大的便利。</em></p>
<h4 id="坏处-v2"><a class="header-anchor" href="#坏处-v2"> </a>坏处</h4>
<p>明文也意味着，HTTP的所有信息都暴露在光天化日之下，在漫长的传输过程中，信息的内容毫无隐私可言，很<code>容易被窃取</code>。</p>
<h3 id="3-不安全"><a class="header-anchor" href="#3-不安全"> </a>3. 不安全</h3>
<ul>
<li>通信使用明文（不加密），内容有可能被窃听*（账号信息泄露）*</li>
<li>不验证通信方的身份，有可能遭遇伪装*（访问假的淘宝）*</li>
<li>无法证明报文的完整性，内容有可能被篡改*（植入垃圾广告）*</li>
</ul>
<p>HTTP的安全，可以用<code>HTTPS</code>的方式解决，也就是通过引入SSL/TLS层，使得在安全上达到了极致。</p>
<h2 id="HTTP-1-1的性能如何？"><a class="header-anchor" href="#HTTP-1-1的性能如何？"> </a>HTTP/1.1的性能如何？</h2>
<p>HTTP协议是<code>基于TCP/IP连接</code>的，并且使用<code>请求-应答的通信方式</code>，所以性能的关键体现在这两点：</p>
<h3 id="1-长连接-持久连接-👍"><a class="header-anchor" href="#1-长连接-持久连接-👍"> </a>1. 长连接 / 持久连接 👍</h3>
<p>早期HTTP/1.0的性能有一个很大的问题：每发起一个请求，都要新建一次TCP连接（三次握手），而且是串行请求，做了无谓的TCP连接建立和断开，增加了通信开销。</p>
<p>为了解决上述TCP连接问题，HTTP/1.1提出了<code>长连接</code>通信方式，也叫<code>持久连接</code>。这种方式的<strong>好处</strong>在于减少了TCP连接的重复建立和断开造成的额外开销，减轻了服务器端的负载。</p>
<p>持久连接的<strong>特点</strong>是，只要任意一端没有明确提出断开连接，则保持TCP连接状态。</p>
<p><img src="https://pic2.zhimg.com/80/v2-b1c5349e477bc22d3fcf406bd61d1049_720w.jpg" alt="短连接与长连接"></p>
<h3 id="2-管道网络传输-👍"><a class="header-anchor" href="#2-管道网络传输-👍"> </a>2. 管道网络传输 👍</h3>
<p>HTTP/1.1采用了长连接的方式，这使得<code>管道(pipeline)网络传输</code>成为了可能。即，可在同一个TCP连中，客户端可以发起多个请求，只要第一个请求发出去了，不必再等其回来，就可以发第二个请求出去。这样可以<code>减少整体的响应时间</code>。</p>
<p><em>例如，客户端需要请求两个资源。以前的做法是，在同一个TCP连接里，先发送A请求，然后等待服务器做出响应，收到后，再发送B请求。<strong>管道机制则是允许浏览器同时发出A请求和B请求。</strong></em></p>
<p><img src="https://pic1.zhimg.com/80/v2-03185562b3a89319e2f75038a12173b0_720w.jpg" alt="管道网络传输"></p>
<p>然而，服务器还是<code>按照顺序</code>，先响应A请求，完成后再响应B请求。要是前面的响应特别慢，后面就会有许多请求排队等着，这就是<code>队头阻塞</code>。</p>
<h3 id="3-队头阻塞-👎"><a class="header-anchor" href="#3-队头阻塞-👎"> </a>3. 队头阻塞 👎</h3>
<p>“请求 - 应答”的模式加剧了HTTP的性能问题。</p>
<p>因为，当顺序发送的请求序列中的一个请求因为某种原因被阻塞时，在后面排队的所有请求也一同被阻塞了。这样会招致客户端一直请求不到数据，也就是<code>队头阻塞</code>。</p>
<p><img src="https://pic1.zhimg.com/80/v2-72d2e6ba44dab6c230a7b18593f450d8_720w.jpg" alt="队头阻塞"></p>
<h3 id="总结"><a class="header-anchor" href="#总结"> </a>总结</h3>
<p>总之，HTTP/1.1的性能一般般，后续的HTTP/2和HTTP/3就是在优化HTTP的性能。</p>
<h1 id="HTTP-与-HTTPS"><a class="header-anchor" href="#HTTP-与-HTTPS"> </a>HTTP 与 HTTPS</h1>
<h2 id="HTTP-与-HTTPS-有哪些区别？"><a class="header-anchor" href="#HTTP-与-HTTPS-有哪些区别？"> </a>HTTP 与 HTTPS 有哪些区别？</h2>
<ul>
<li>HTTP时超文本传输协议，信息是明文传输，存在安全风险。HTTPS解决了HTTP不安全的问题，在TCP和HTTP网络层之间加入了SSL/TLS安全协议，使得报文能够加密传输。</li>
<li>HTTP连接建立相对简单，TCP三次握手之后便可以进行HTTP的报文传输。而HTTPS在TCP三次握手之后，还需要进行SSL/TLS的握手过程，才可以进入加密报文传输。</li>
<li>HTTP的端口号是80；HTTPS的端口号是443。</li>
<li>HTTPS协议需要向CA(证书权威机构)申请数字证书，来保证服务器的身份是可信的。</li>
</ul>
<h2 id="HTTP解决了HTTPS的哪些问题？"><a class="header-anchor" href="#HTTP解决了HTTPS的哪些问题？"> </a>HTTP解决了HTTPS的哪些问题？</h2>
<p>HTTP由于是明文传输，所以在安全上存在以下三个风险：</p>
<ul>
<li><code>窃听风险</code>，比如在通信链路上可以获取通信内容</li>
<li><code>篡改风险</code>，比如强制植入垃圾广告</li>
<li><code>冒充风险</code>，比如冒充淘宝网站</li>
</ul>
<p>HTTPS在HTTP与TCP层加入了<code>SSL/TLS协议</code>。</p>
<p><img src="https://pic1.zhimg.com/80/v2-288eaab730c978b42b594464823bf324_720w.jpg" alt="HTTP与HTTPS"></p>
<p>可以很好的解决上述的风险：</p>
<ul>
<li><code>信息加密</code>：交互信息无法被窃取</li>
<li><code>校验机制</code>：无法篡改通信内容，篡改了就不能正常显示</li>
<li><code>身份证书</code>：证明淘宝是真的淘宝网</li>
</ul>
<p>可见，只要自身不作“恶”，SSL/TLS协议是能保证通信安全的。</p>
<h2 id="HTTPS是如何解决上面三种风险的？"><a class="header-anchor" href="#HTTPS是如何解决上面三种风险的？"> </a>HTTPS是如何解决上面三种风险的？</h2>
<ul>
<li><code>混合加密</code>的方式实现信息的<strong>机密性</strong>，解决了被窃听的风险</li>
<li><code>摘要算法</code>的方式实现<strong>完整性</strong>，它能够为数据生成独一无二的“指纹”，指纹用于校验数据的完整性，解决了被篡改的风险</li>
<li>将服务器公钥放入<code>数字证书</code>中，解决了被冒充的风险</li>
</ul>
<h3 id="混合加密"><a class="header-anchor" href="#混合加密"> </a>混合加密</h3>
<p>HTTPS采用<code>非对称加密 + 对称加密</code>的<code>混合加密</code>方式：</p>
<ul>
<li>在通信建立前采用<code>非对称加密</code>的方式<code>交换会话密钥</code>，后续就不再使用非对称加密</li>
<li>在通信过程中，全部使用<code>对称加密的会话密钥</code>的方式加密明文数据</li>
</ul>
<p><img src="https://img-blog.csdn.net/20170106103925777?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamlhbmdfeGlueGluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="加密过程"></p>
<p><img src="https://img-blog.csdn.net/20170106104000590?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvamlhbmdfeGlueGluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="解密过程"></p>
<p>采用混合加密方式的原因：</p>
<ul>
<li><code>对称加密</code>只用一个密钥，运行速度快，密钥必须保密，无法做到安全的密钥交换。常用方法DES、3DES、Blowfish、IDEA、RC4、RC5、RC6 和 AES。</li>
<li><code>非对称加密</code>使用两个密钥：公钥和私钥，公钥可以任意分发，私钥保密，解决了密钥交换问题，但速度慢**（接受报文的一方生成公钥和私钥，私钥自己保留，公钥对外公布）**常用方法：RSA、ECC（移动设备用）、Diffie-Hellman、El Gamal、DSA（数字签名用）。</li>
</ul>
<p><img src="https://img-blog.csdn.net/20180729161320594?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE1ODM5Mjc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="非对称加密"></p>
<h3 id="摘要算法（Hash算法）"><a class="header-anchor" href="#摘要算法（Hash算法）"> </a>摘要算法（Hash算法）</h3>
<p>客户端在发送明文之前，会通过摘要算法算出明文的“指纹”，发送的时候把<code>指纹 + 明文</code>一同加密成密文，发送给客户端。客户端解密后，用相同的摘要算法算出发送过来的明文。通过比较客户端携带的“指纹”和算出来的“指纹”作比较，若“指纹”相同，说明数据是完整的。</p>
<p>常用方法：MD2、MD4、MD5、HAVAL、SHA。</p>
<h3 id="数字证书"><a class="header-anchor" href="#数字证书"> </a>数字证书</h3>
<p>背景：客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解决。那么问题来了，如何保证公钥不被冒充，具有信任度呢？</p>
<p>借助第三方权威机构<code>CA（数字证书认证机构）</code>，将<code>服务器公钥放在数字证书</code>（由CA颁发）中，只要证书是可信的，公钥就是可信的。</p>
<p><img src="https://pic1.zhimg.com/80/v2-912258bf11d51c016e97fe472c5fe828_720w.jpg" alt="数字证书工作流程"></p>
<p>对于<code>数字签名</code>，这里有一篇通俗易懂的<a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html">好文章</a>！</p>
<h2 id="HTTPS是如何建立的，其间交互了什么？"><a class="header-anchor" href="#HTTPS是如何建立的，其间交互了什么？"> </a>HTTPS是如何建立的，其间交互了什么？</h2>
<p>SSL/TLS协议基本流程：</p>
<ul>
<li>客户端向服务器索要并验证服务器的公钥</li>
<li>双方协商生产<code>会话密钥</code></li>
<li>双方采用会话密钥进行加密通信</li>
</ul>
<p><strong>前两步叫<code>握手阶段</code>。</strong></p>
<p>SSL/TLS的<code>握手阶段</code>涉及<code>四次通信</code>，如下图：</p>
<p><img src="https://pic3.zhimg.com/80/v2-2df632acad2860e7c23d6c5edc2bb352_720w.jpg" alt="HTTPS建立过程"></p>
<p>SSL/TLS协议建立的详细流程：</p>
<h3 id="1-ClientHello"><a class="header-anchor" href="#1-ClientHello"> </a>1. ClientHello</h3>
<p>首先，由客户端向服务器发起加密通信请求，也就是<code>ClientHello</code>请求。</p>
<p>在这一步，客户端主要向服务器发送以下信息：</p>
<ol>
<li>客户端支持的<code>SSL/TLS协议版本</code>，如TLS1.2版本</li>
<li>客户端生产的随机数<code>Client Random</code>，后面用于生产会话密钥</li>
<li>客户端支持的<code>密码套件列表</code>，如RSA加密算法</li>
</ol>
<h3 id="2-ServerHello"><a class="header-anchor" href="#2-ServerHello"> </a>2. ServerHello</h3>
<p>服务器收到客户端请求后，向客户端发出响应，也就是<code>ServerHello</code>。</p>
<p>服务器响应的内容如下：</p>
<ol>
<li><code>确认</code>SSL/TLS协议版本，如果浏览器不支持，则关闭加密通信</li>
<li>服务器产生的随机数<code>Server Random</code>，后面用于生产会话密钥</li>
<li>确认的<code>密码套件列表</code>，如RSA加密算法</li>
<li>服务器的<code>数字证书</code></li>
</ol>
<h3 id="3-客户端响应"><a class="header-anchor" href="#3-客户端响应"> </a>3. 客户端响应</h3>
<p>客户端收到服务器的响应之后，首先通过浏览器或操作系统中的CA公钥，确认服务器的数字证书的真实性。</p>
<p>如果证书没有问题，客户端会从数字证书中取出服务器的公钥，然后使用它加密报文，向服务器发送如下信息：</p>
<ol>
<li>一个随机数<code>pre-master key</code>，该随机数会被服务器公钥加密（是握手阶段的第三个随机数）</li>
<li>加密通信算法改变通知，表示最后的信息都将用<code>会话密钥</code>加密通信</li>
<li>客户端握手结束通知，表示客户端的握手阶段已经结束。这一项的同时，把之前所有内容发生的数据做个摘要，用来供服务端校验</li>
</ol>
<p>接着就用双方协商的加密算法，<code>各自生成</code>本次通信的会话密钥。</p>
<h3 id="4-服务器的最后响应"><a class="header-anchor" href="#4-服务器的最后响应"> </a>4. 服务器的最后响应</h3>
<p>服务器收到客户端的第三个随机数<code>pre-master key</code>之后，通过协商的加密算法，计算出本次通信的会话密钥。然后向客户端发送最后的信息：</p>
<ol>
<li>加密通信算法改变通知，表示随后的信息都将用<code>会话密钥</code>加密通信</li>
<li>服务器握手结束通知，表示服务器的握手阶段已经结束。这一项的同时把之前所有内容发生的数据做个摘要，用来供客户端校验</li>
</ol>
<p>至此，整个SSL/TLS的握手阶段全部结束</p>
<p>接下来，客户端与服务器进入加密通信，就完全使用普通的HTTP协议，只不过用<code>会话密钥</code>加密内容。</p>
<h1 id="HTTP-1-1、Http-2、HTTP-3演变"><a class="header-anchor" href="#HTTP-1-1、Http-2、HTTP-3演变"> </a>HTTP/1.1、Http/2、HTTP/3演变</h1>
<h2 id="与HTTP-1-0相比，HTTP-1-1提升了什么性能？"><a class="header-anchor" href="#与HTTP-1-0相比，HTTP-1-1提升了什么性能？"> </a>与HTTP/1.0相比，HTTP/1.1提升了什么性能？</h2>
<p>与HTTP/1.0相比，HTTP/1.1性能上的改进：</p>
<ul>
<li>使用TCP长连接的方式，改善了HTTP/1.0短连接造成的性能开销</li>
<li>支持管道网络传输，只要第一个请求发出去了，不必等其回来，就可以发送第二个请求，减少了整体的响应时间</li>
</ul>
<p>但HTTP/1.1还是有性能瓶颈：</p>
<ul>
<li><code>请求/响应头部(Header)未经压缩就发送</code>，首部信息越多，延迟越大。只能压缩<code>Body</code>的部分</li>
<li><code>发送冗长的首部</code>，每次互相发送相同的首部造成的浪费较多</li>
<li>服务器是按请求的顺序响应的，如果服务器响应慢，会招致客户端一直请求不到数据，也就是<code>队头阻塞</code></li>
<li><code>没有请求优先级控制</code></li>
<li>请求只能从客户端开始，<code>服务器只能被动响应</code></li>
</ul>
<h2 id="根据HTTP-1-1的性能瓶颈，HTTP-2做了哪些优化？"><a class="header-anchor" href="#根据HTTP-1-1的性能瓶颈，HTTP-2做了哪些优化？"> </a>根据HTTP/1.1的性能瓶颈，HTTP/2做了哪些优化？</h2>
<p>HTTP/2协议是<code>基于HTTPS</code>的，所以HTTP/2的安全性是有保障的。</p>
<p>与HTTP/1.1相比，HTTP/2性能上的改进：</p>
<h3 id="1-头部压缩"><a class="header-anchor" href="#1-头部压缩"> </a>1. 头部压缩</h3>
<p>HTTP/2会<code>压缩头</code>，如果同时发出多个请求，它们的头是一样的或是相似的，那么协议会帮你<code>消除重复的部分</code>。</p>
<p>这就是所谓的<code>HPack</code>算法：在客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，这样就提高了速度。</p>
<h3 id="2-二级制格式"><a class="header-anchor" href="#2-二级制格式"> </a>2. 二级制格式</h3>
<p>HTTP/2不再用像HTTP/1.1里的纯文本形式的报文，而是全面采用了<code>二进制格式</code>。</p>
<p>头信息和数据体都是二进制，并且统称为<code>帧(frame)</code>：<code>头信息帧</code>和<code>数据帧</code>。</p>
<p><img src="https://pic1.zhimg.com/80/v2-0d9d34d1a916a84e8780dd76e5654ee0_720w.jpg" alt="报文区别"></p>
<p>这样虽然对人不友好，但是对计算机非常友好，因为计算机只懂二进制，收到报文后，无需再将明文的报文转成二进制，而是直接解析二进制报文，这增加了<code>数据传输的效率</code>。</p>
<h3 id="3-数据流"><a class="header-anchor" href="#3-数据流"> </a>3. 数据流</h3>
<p>HTTP/2的数据包不是按顺序发送的，同一个连接里面连续的数据包，可能属于不同的响应。因此，必须要对数据包做标记，指明它属于哪个响应。</p>
<p>每个请求或响应的所有数据包，称为一个<code>数据流(Stream)</code>。</p>
<p>每个数据流标记着一个独一无二的编号，其中规定客户端发出的数据流编号为奇数，服务器发出的数据流编号为偶数。</p>
<p>客户端还可以<code>指定数据流的优先级</code>。优先级高的请求，服务器就会先响应。</p>
<h3 id="4-多路复用"><a class="header-anchor" href="#4-多路复用"> </a>4. 多路复用</h3>
<p>HTTP/2可以<code>在一个连接中，并发多个请求或响应</code>，而不用按顺序意义对应。</p>
<p>移除了HTTP/1.1中的串行请求，不需要排队等待，也就不会出现队头阻塞的问题，<code>降低了延迟，大幅度提高了连接的利用率</code>。</p>
<p><em>举例来说，在TCP连接里，服务器收到了客户端A和B的两个请求，如果发现A处理过程非常耗时，于是就响应A请求已经处理好的部分，接着响应B请求，完成后，再响应A请求剩下的部分</em>。</p>
<p><img src="https://pic4.zhimg.com/80/v2-c4a1ea4b9ac0045921360e11f68e6837_720w.jpg" alt="多路复用"></p>
<h3 id="5-服务器推送"><a class="header-anchor" href="#5-服务器推送"> </a>5. 服务器推送</h3>
<p>HTTP/2还在一定程度上改善了传统的 请求 - 应答 工作模式，服务不再是被动地响应，也<code>可以主动</code>向客户端发送消息。</p>
<p><em>举例来说，在浏览器刚请求HTML的时候，就提前把可能会用到的JS、CSS文件等静态资源主动发给客户端，<code>降低延时的等待</code>，也就是<code>服务器推送(Server Push/Cache Push)</code>。</em></p>
<p><img src="https://pic1.zhimg.com/80/v2-5357c49879dbe5bf970b23c5b11a0ca4_720w.jpg" alt="HTTP/1 - HTTP/2"></p>
<h2 id="HTTP-2有哪些缺陷，HTTP-3做了哪些优化？"><a class="header-anchor" href="#HTTP-2有哪些缺陷，HTTP-3做了哪些优化？"> </a>HTTP/2有哪些缺陷，HTTP/3做了哪些优化？</h2>
<p>HTTP2主要的<strong>问题</strong>在于：多个HTTP请求复用一个TCP连接，下层的TCP协议是不知道有多少个HTTP请求的。所以一旦发生<code>丢包</code>现象，就会<code>触发TCP的重传机制</code>，这样在一个TCP连接中的<code>所有HTTP请求，都必须等待</code>这个丢了的包被重传回来。</p>
<p>也就是说：</p>
<ul>
<li>HTTP/1.1中的管道传输中，如果有一个请求阻塞了，那么队列后的请求也统统被阻塞</li>
<li>HTTP/2多请求服复用一个TCP连接，一旦发生丢包，就会阻塞住所有的HTTP请求</li>
</ul>
<p>这都是基于TCP传输层的问题，所以<code>HTTP/3把HTTP下层的TCP协议改成了UDP</code>！</p>
<p><img src="https://pic4.zhimg.com/80/v2-e76adbd5dca9e3ade94f14b486692083_720w.jpg" alt="HTTP/1 - HTTP/3"></p>
<p>UDP发生时不管顺序的，也不管丢包的，所以不会出现上述问题。</p>
<p>但UDP时不可靠传输，而<code>基于UDP的QUIC协议，可以实现类似TCP的可靠性传输</code>。</p>
<ul>
<li><code>QUIC</code>有一套自己的机制可以保证传输的可靠性。当某个流发生丢包时，只会阻塞这个流，<code>其他流不会受到影响</code></li>
<li>TLS升级成了最新的<code>1.3版本</code></li>
<li>头部压缩算法升级为<code>QPack</code></li>
<li>HTTPS要建立一个连接，要花费6次交互。先是建立3次握手，然后是TLS/1.3的3次握手。而QUIC直接把以往的TCP和TLS/1.3的6次交互，<code>合并成了3次，减少了交互次数</code>
<ul>
<li>是的，TLS/1.3由TLS/1.2的4次握手变成了3次，<a href="https://blog.csdn.net/zk3326312/article/details/80245756">详解</a></li>
</ul>
</li>
</ul>
<p><img src="https://pic3.zhimg.com/80/v2-101684b75f3337579c4dd88e9f169a7a_720w.jpg" alt="TCP-HTTPS和QUIC-HTTP"></p>
<p>因此，QUIC是一个基于UDP的<code>伪</code>TCP + TLS + HTTP/2的多路复用协议。</p>
<p>QUIC是新协议，对于很多网络设备，根本不知道什么是QUIC，只会当作UDP，这样就出现了新的问题。所以HTTP/3现在的普及进度非常缓慢，不知道未来UDP能否逆袭TCP。</p>
<h1 id="参考文献"><a class="header-anchor" href="#参考文献"> </a>参考文献</h1>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;mid=2247483971&amp;idx=1&amp;sn=8f2d5dae3d95efc446061b352c8e9961&amp;chksm=f98e46e9cef9cfff1f6bee1974b8dc27dcc42f0627dcf8ff0c0df8dbaa7a1f74587e3fafc167&amp;scene=178&amp;cur_album_id=1337204681134751744#rd">硬核！30张图解HTTP常见的面试题 - 小林coding</a></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>搬运</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>【新鲜出炉，持续更新】Vue教程</title>
    <url>/2021/06/24/Vue%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="视频源"><a class="header-anchor" href="#视频源"> </a>视频源</h1>
<iframe src="//player.bilibili.com/player.html?aid=89760569&amp;bvid=BV15741177Eh&amp;cid=153295977&amp;page=8" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
<p><a href="https://www.bilibili.com/video/BV15741177Eh?p=8&amp;share_source=copy_web">视频地址</a></p>
<h1 id="Vue中的MVVM"><a class="header-anchor" href="#Vue中的MVVM"> </a>Vue中的MVVM</h1>
<img src="https://s2.loli.net/2022/06/08/QYaqOMHEehRuZgD.png" alt="Vue的MVVM模式" style="zoom: 50%;">
<h2 id="View层"><a class="header-anchor" href="#View层"> </a>View层</h2>
<ul>
<li>视图层</li>
<li>在前端开发中，通常就是DOM层</li>
<li>主要作用是给用户展示各种信息</li>
</ul>
<h2 id="Model层"><a class="header-anchor" href="#Model层"> </a>Model层</h2>
<ul>
<li>数据层</li>
<li>数据可能是固定的死数据，更可能是来自服务器的，从网络上请求下来的数据</li>
</ul>
<h2 id="ViewModel层【核心】"><a class="header-anchor" href="#ViewModel层【核心】"> </a>ViewModel层【核心】</h2>
<ul>
<li>视图模型层</li>
<li>是 View 和 Model 沟通的桥梁</li>
<li>其实就是Vue实例</li>
<li>一方面，它实现了 <code>Data Binding（数据绑定）</code>，将 Model 的改变实时的反映到了 View 中</li>
<li>另一方面，它实现了 <code>DOM Listener（DOM 监听）</code>，当DOM发生一些事件（如点击、滚动等）时，可以监听到这些事件，并在需要的情况下改变对应的 Data</li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    
<span class="token comment">&lt;!-- ------------- 此处为 View ------------- --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>当前计数：{{counter}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sub<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- --------------------------------------- --&gt;</span>
    
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    
    <span class="token comment">// ---- 此处为 Model ---- //</span>
    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
        counter<span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// ------------------- //</span>
    
    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// ⬅此处为 ViewModel</span>
        el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
        data<span class="token operator">:</span> obj<span class="token punctuation">,</span>
        methods<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token function-variable function">sub</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="Vue示例中的options"><a class="header-anchor" href="#Vue示例中的options"> </a>Vue示例中的options</h1>
<ul>
<li><code>el</code>
<ul>
<li>类型：string | HTMLElement</li>
<li>作用：决定之后Vue实例会管理哪个DOM</li>
</ul>
</li>
<li><code>data</code>
<ul>
<li>类型：Object | Function（组件中data必须是一个函数）</li>
<li>作用：Vue实例对应的数据对象</li>
</ul>
</li>
<li><code>methods</code>
<ul>
<li>类型：{[key: string]: Function}</li>
<li>作用：定义Vue的方法，可以在其他地方调用，也可以在指令中调用</li>
</ul>
</li>
</ul>
<h1 id="Vue的生命周期"><a class="header-anchor" href="#Vue的生命周期"> </a>Vue的生命周期</h1>
<h1 id="插值操作"><a class="header-anchor" href="#插值操作"> </a>插值操作</h1>
<h2 id="Mustache语法"><a class="header-anchor" href="#Mustache语法"> </a>Mustache语法</h2>
<blockquote>
<p>mustache：胡须</p>
</blockquote>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span> //⬅Mustache语法
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> <span class="token punctuation">{</span>
        message<span class="token operator">:</span> <span class="token string">"你好"</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="v-once-指令"><a class="header-anchor" href="#v-once-指令"> </a>v-once 指令</h2>
<p>该指令表示元素和组件只渲染一次，不会随着数据的改变而改变。</p>
<p>该指令后面不需要跟任何表达式。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> <span class="token punctuation">{</span>
          message<span class="token operator">:</span> <span class="token string">"你好"</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  app<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">"我修改了message！"</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/06/25/h8pPBJDCvrKuyFV.png" alt="v-once" style="zoom:67%;">
<h2 id="v-html-指令"><a class="header-anchor" href="#v-html-指令"> </a>v-html 指令</h2>
<p>该指令会解析渲染后面跟着的string。</p>
<p>该指令后面往往会跟上一个string。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      url<span class="token operator">:</span> <span class="token string">'&lt;a href="https://www.bilibili.com"&gt;Bilibili干杯！&lt;/a&gt;'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/06/29/vc9pqZPYtUXCSlm.png" alt="v-html" style="zoom:67%;">
<h2 id="v-text-指令"><a class="header-anchor" href="#v-text-指令"> </a>v-text 指令</h2>
<p>与Mustache类似，但是会覆盖掉innerText内容哦。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{message}}，嘎嘎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>，嘎嘎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> <span class="token punctuation">{</span>
        message<span class="token operator">:</span> <span class="token string">"你好"</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/06/25/zxOyg7Y63idBJVn.png" alt="v-text" style="zoom:67%;">
<h2 id="v-pre-指令"><a class="header-anchor" href="#v-pre-指令"> </a>v-pre 指令</h2>
<p>该指令用于跳过这个元素和它子元素的编译过程，用于显示原本的Mustache语法。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-pre</span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      message<span class="token operator">:</span> <span class="token string">"你好"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/06/25/fGlsihdwk4VJ6Pz.png" alt="v-pre" style="zoom:67%;">
<h2 id="v-cloak-指令"><a class="header-anchor" href="#v-cloak-指令"> </a>v-cloak 指令</h2>
<blockquote>
<p>cloak：斗篷</p>
</blockquote>
<p>可以通过为该指令提供相应的样式，来对未编译就显示出来的Mustache语法进行修饰。</p>
<p>原理就是，在编译完成后，div标签中的v-cloak会消失。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">[v-cloak]</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-cloak</span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
        data<span class="token operator">:</span> <span class="token punctuation">{</span>
          message<span class="token operator">:</span> <span class="token string">"你好"</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/06/29/R3Gg7cUtdzrTKlC.gif" alt="v-cloak" style="zoom:67%;">
<h1 id="绑定属性-v-bind"><a class="header-anchor" href="#绑定属性-v-bind"> </a>绑定属性 v-bind</h1>
<p>前面我们介绍的是将数据插入进模板的内容中。其实我们除了需要动态决定内容，有时也需要动态地来绑定元素的属性。</p>
<p>例如：</p>
<ul>
<li>动态绑定a元素的href属性</li>
<li>动态绑定img元素的src属性</li>
</ul>
<p>这时，就可以使用<code>v-bind</code>指令：</p>
<ul>
<li><strong>作用</strong>：动态绑定属性</li>
<li><strong>缩写</strong>：<code>:</code></li>
</ul>
<h2 id="v-bind-的基本使用"><a class="header-anchor" href="#v-bind-的基本使用"> </a>v-bind 的基本使用</h2>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgURL<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--  语法糖写法  --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgURL<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> <span class="token punctuation">{</span>
          imgURL<span class="token operator">:</span> <span class="token string">"https://gagalab.tech/images/avatar.png"</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="v-bind-动态绑定class（对象语法）"><a class="header-anchor" href="#v-bind-动态绑定class（对象语法）"> </a>v-bind 动态绑定class（对象语法）</h2>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.red</span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.grow</span><span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{red: isRed, grow: isGrow}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>turnRed<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>变红<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grow<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>变大<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> <span class="token punctuation">{</span>
        message<span class="token operator">:</span> <span class="token string">"你好"</span><span class="token punctuation">,</span>
        isRed<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        isGrow<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      methods<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">turnRed</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>isRed <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isRed<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">grow</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>isGrow <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isGrow<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/06/25/uQZ3FWXrsLNBUaJ.gif" alt="v-bind动态绑定class（对象语法）" style="zoom:67%;">
<p>如果嫌HTML代码冗长，也可以将class的值放入methods或computed中：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getClasses()<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
...
methods: {
  getClasses: function (){
    return {red: this.isRed, grow: this.isGrow};
  }
}
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="v-bind-动态绑定class（数组语法）"><a class="header-anchor" href="#v-bind-动态绑定class（数组语法）"> </a>v-bind 动态绑定class（数组语法）</h2>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.red</span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.grow</span><span class="token punctuation">{</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[class1, class2]<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
      data<span class="token operator">:</span> <span class="token punctuation">{</span>
        message<span class="token operator">:</span> <span class="token string">"你好"</span><span class="token punctuation">,</span>
        class1<span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span>
        class2<span class="token operator">:</span> <span class="token string">"grow"</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/06/25/K8iRm6y9GaVlOdX.png" alt="v-bind动态绑定class（数组语法）" style="zoom:67%;">
<p>同样的，如果嫌HTML代码冗长，也可以将class的值放入methods或computed中。</p>
<h2 id="v-bind-动态绑定style（对象语法）"><a class="header-anchor" href="#v-bind-动态绑定style（对象语法）"> </a>v-bind 动态绑定style（对象语法）</h2>
<p>在我们在后续开发中，肯定要使用模板，当我们想要改变模板的样式时，就可以使用v-bind来动态绑定style</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{color: messageColor, fontSize: messageFontSize+<span class="token punctuation">'</span>px<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      message<span class="token operator">:</span> <span class="token string">"你好"</span><span class="token punctuation">,</span>
      messageColor<span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span>
      messageFontSize<span class="token operator">:</span> <span class="token number">50</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>效果如上。</p>
<h2 id="v-bind-动态绑定style（数组语法）"><a class="header-anchor" href="#v-bind-动态绑定style（数组语法）"> </a>v-bind 动态绑定style（数组语法）</h2>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[messageColor, messageFontSize]<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      message<span class="token operator">:</span> <span class="token string">"你好"</span><span class="token punctuation">,</span>
      messageColor<span class="token operator">:</span> <span class="token punctuation">{</span>color<span class="token operator">:</span> <span class="token string">'red'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      messageFontSize<span class="token operator">:</span> <span class="token punctuation">{</span>fontSize<span class="token operator">:</span> <span class="token string">'50px'</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>效果如上。</p>
<h1 id="计算属性-computed"><a class="header-anchor" href="#计算属性-computed"> </a>计算属性 computed</h1>
<p>就像下面的例子，如果在开发中，我们反复使用像第二行的代码，就会使代码的可读性变差，也显得冗长。这时就可以使用计算属性，像第三行一样，来使代码更加简洁清晰。</p>
<h2 id="计算属性的基本使用"><a class="header-anchor" href="#计算属性的基本使用"> </a>计算属性的基本使用</h2>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{firstName}} {{lastName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      firstName<span class="token operator">:</span> <span class="token string">"Leslie"</span><span class="token punctuation">,</span>
      lastName<span class="token operator">:</span> <span class="token string">"Cheung"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    computed<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">fullName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/06/29/kU8ZnlKLobgXHs5.png" alt="计算属性的基本使用" style="zoom: 67%;">
<h2 id="计算属性的复杂操作"><a class="header-anchor" href="#计算属性的复杂操作"> </a>计算属性的复杂操作</h2>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>书的总价为 {{totalPrice}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      books<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">93</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">65</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token number">89</span><span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">//⬇ methods一般用动词命名，computed用名词 </span>
    computed<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">totalPrice</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> totalPrice <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          totalPrice <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> totalPrice<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/06/25/AdZIYvQb5Wr9jy1.png" alt="计算属性的复杂操作" style="zoom:67%;">
<h2 id="计算属性的getter和setter"><a class="header-anchor" href="#计算属性的getter和setter"> </a>计算属性的getter和setter</h2>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      firstName<span class="token operator">:</span> <span class="token string">"Leslie"</span><span class="token punctuation">,</span>
      lastName<span class="token operator">:</span> <span class="token string">"Cheung"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    computed<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">//计算属性一般没有set方法，因为它是只读属性</span>
      fullName<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// set: function (value){</span>
        <span class="token comment">//   let name = value.split(' ');</span>
        <span class="token comment">//   this.firstName = name[0];</span>
        <span class="token comment">//   this.lastName = name[1];</span>
        <span class="token comment">// }</span>
      <span class="token punctuation">}</span>
      <span class="token comment">//以上写法等价于（这也就是在Mustache语法中fullName不加()的原因）：</span>
      <span class="token comment">// fullName: function (){</span>
      <span class="token comment">//   return this.firstName + ' ' + this.lastName;</span>
      <span class="token comment">// }</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="计算属性和methods的对比"><a class="header-anchor" href="#计算属性和methods的对比"> </a>计算属性和methods的对比</h2>
<p>其实，我们使用methods也可以实现我们上述的功能，那么为什么我们要使用计算属性呢？</p>
<p>原因：计算属性会进行缓存，如果使用多次，计算属性只会调用一次，而methods会调用多次。</p>
<p>看了下面的例子，你就懂啦！</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{getFullName()}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{getFullName()}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{getFullName()}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      firstName<span class="token operator">:</span> <span class="token string">"Leslie"</span><span class="token punctuation">,</span>
      lastName<span class="token operator">:</span> <span class="token string">"Cheung"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    computed<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">fullName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Invoking fullName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">getFullName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Invoking getFullName()"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/06/26/jZDagYz1RuCLTdk.png" alt="计算属性和methods的对比结果" style="zoom:80%;">
<h1 id="事件监听-v-on"><a class="header-anchor" href="#事件监听-v-on"> </a>事件监听 v-on</h1>
<ul>
<li><strong>作用</strong>：绑定事件监听器</li>
<li><strong>缩写</strong>：<code>@</code></li>
</ul>
<h2 id="v-on-的基本使用"><a class="header-anchor" href="#v-on-的基本使用"> </a>v-on 的基本使用</h2>
<p><code>v-on</code>指令已经很熟悉啦，在生命周期那一节用到的计数器中，就有使用。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>当前计数：{{counter}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter++<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter--<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      counter<span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>聪明如你，肯定也知道当<code>@click</code>后面跟的表达式过于复杂的话，可以封装成函数，放进methods中调用。</p>
<h2 id="v-on-的参数问题"><a class="header-anchor" href="#v-on-的参数问题"> </a>v-on 的参数问题</h2>
<ol>
<li>当methods中定义的方法不需要额外的参数时，<code>@click</code>后面的方法可以不加<code>()</code></li>
</ol>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClick<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--等价于--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClick<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token operator">...</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>
<p>当methods中定义的方法需要额外的参数时，</p>
<ol>
<li>老老实实传入参数：</li>
</ol>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClick(message)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      message<span class="token operator">:</span> <span class="token string">"Click!"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>写了<code>()</code>，但不传入参数：用上面的例子的话，会打印<code>undefined</code></li>
<li>连<code>()</code>都不写了：用上面的例子的话，会打印<code>event（点击事件）</code></li>
</ol>
<img src="https://i.loli.net/2021/06/29/qWHSczYlmBhGV9R.png" alt="event打印结果" style="zoom:80%;">
</li>
</ol>
<p><strong>那么问题来了，我们要如何既传参，又获取<code>event</code>呢？</strong></p>
<p>此时我们可以通过<code>$event</code>来传入事件：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClick(message, $event)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      message<span class="token operator">:</span> <span class="token string">"Click!"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"传入的message："</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"点击事件："</span> <span class="token operator">+</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://i.loli.net/2021/06/29/BGluzJiIdtgNpms.png" alt="$event"></p>
<h2 id="v-on-的修饰符"><a class="header-anchor" href="#v-on-的修饰符"> </a>v-on 的修饰符</h2>
<p>Vue提供了一些修饰符来方便我们处理事件：</p>
<ul>
<li><code>.stop</code>：调用<code>event.stopPropagation()</code>，阻止冒泡</li>
<li><code>.prevent</code>：调用<code>event.preventDefault()</code>，阻止默认行为</li>
<li><code>.{keyCode | keyAlias}</code>：只有当特定键盘按键被触发时才会触发回调
<ul>
<li>keyCode：键代码</li>
<li>keyAlias：键别名</li>
</ul>
</li>
<li><code>.native</code>：监听组件根元素的原生事件</li>
<li><code>.once</code>：该事件只触发一次回调</li>
</ul>
<h3 id="stop-阻止冒泡"><a class="header-anchor" href="#stop-阻止冒泡"> </a>.stop 阻止冒泡</h3>
<p>原理：<code>.stop</code>调用<code>event.stopPropagation()</code></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickDiv<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickBtn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">onClickBtn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Button is clicked!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">onClickDiv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Div is clicked!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/06/29/vWRk9Tzpu4nBMlV.png" alt=".stop修饰符" style="zoom:80%;">
<p>可见，当我们点击按钮时，onClickDiv也被触发了，为了防止发生这样的情况，我们可以使用<code>.stop</code>修饰符：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickDiv<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickBtn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="prevent-阻止默认行为"><a class="header-anchor" href="#prevent-阻止默认行为"> </a>.prevent 阻止默认行为</h3>
<p><strong>原理</strong>：<code>.prevent</code>调用<code>event.preventDefault()</code></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>action<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickSubmit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">onClickSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Submit!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当我们点击页面中的提交按钮时，它会因为<code>action="action"</code>跳转至另一个页面，如果我们想手动让它进行跳转，就可以使用<code>.prevent</code>修饰符来prevent掉默认的行为。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>action<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickSubmit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="keyCode-keyAlias-键修饰符"><a class="header-anchor" href="#keyCode-keyAlias-键修饰符"> </a>.{keyCode | keyAlias} 键修饰符</h3>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onKeyUp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">onKeyUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Key Up!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的代码，会在用户输入按任意键的时候打印“Key Up!”，但有时我们需要当用户在按某个（键盘）按键时，才触发某个事件，这时我们可以使用键修饰符：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onKeyUp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>此时，只有用户在敲击“Enter”键时，才会打印“Key Up!”。</p>
<h3 id="native"><a class="header-anchor" href="#native"> </a>.native</h3>
<p>TODO: .native修饰符待填坑</p>
<h3 id="once-仅触发一次修饰符"><a class="header-anchor" href="#once-仅触发一次修饰符"> </a>.once 仅触发一次修饰符</h3>
<p>在某些特殊的情况下，如想要一个按钮在被点击时，只触发一次回调，就可以使用<code>.once</code>修饰符：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.once</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClick<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="条件判断"><a class="header-anchor" href="#条件判断"> </a>条件判断</h1>
<h2 id="v-if-的使用"><a class="header-anchor" href="#v-if-的使用"> </a>v-if 的使用</h2>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我将被显示哦~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>notShow<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我就不显示啦！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      show<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      notShow<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/06/29/lEvfzhuniSD8spo.png" alt="v-if显示结果" style="zoom:67%;">
<h2 id="v-else-的使用"><a class="header-anchor" href="#v-else-的使用"> </a>v-else 的使用</h2>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>isShow为true时显示我！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>isShow为false时显示我！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      isShow<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/06/29/DCb3iuGjBK2Shoc.png" alt="v-else显示结果" style="zoom:67%;">
<p>添加这一句：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span>isShow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>将显示：</p>
<img src="https://i.loli.net/2021/06/29/d5tJwG7panv1BHW.png" alt="v-else显示结果2" style="zoom:67%;">
<h2 id="v-else-if-的使用"><a class="header-anchor" href="#v-else-if-的使用"> </a>v-else-if 的使用</h2>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>score &gt;= 90<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>优秀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>score &gt;= 80<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>良好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>score &gt;=60<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>及格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>不及格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      score<span class="token operator">:</span> <span class="token number">87</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不过还是不建议向上面这样写，使用computed属性会更好哦~</p>
<h2 id="案例-切换登录方式"><a class="header-anchor" href="#案例-切换登录方式"> </a>案例 - 切换登录方式</h2>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doUseUsername<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>邮箱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>邮箱<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doUseUsername = !doUseUsername<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>切换登录方式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      doUseUsername<span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/06/29/PqRToktILgAKn4x.gif" alt="GIF 2021-6-29 11-31-20" style="zoom: 80%;">
<h3 id="Vue的虚拟DOM"><a class="header-anchor" href="#Vue的虚拟DOM"> </a>Vue的虚拟DOM</h3>
<p>做到这里，其实是<strong>有一个小问题</strong>的。例如，当用户在用户名输入框输入了“Jack”后，点击切换登录方式的按钮，我们可以发现“Jack”仍在输入框中。</p>
<img src="https://i.loli.net/2021/06/29/fcE9KDO2vanrwXk.gif" alt="小问题" style="zoom:80%;">
<p>有没有发现不对，上面的代码中我们明明创建了两个完全不同的input，为什么用户的输入会留在另一个输入框中呢？</p>
<p>这里我们就需要引入**Vue的虚拟DOM（Virtual DOM）**的概念。<strong>虚拟DOM的实现，使得我们可以在不直接操作DOM元素的情况下，只操作数据就能够重新渲染页面。<strong>为了提高浏览器的性能，Vue在进行虚拟DOM渲染时，会</strong>尽可能地复用已经存在的元素</strong>，而不是重新创建新的元素。</p>
<p>在本案例中，当<code>doUseUsername</code>被切换为<code>false</code>时，Vue实际上是直接使用了第一个<code>&lt;input&gt;</code>，所以“Jack”会被保留。</p>
<p>那么我们该如何避免这样的情况的发生呢？此时可以在<code>&lt;input&gt;</code>中添加一个属性：<code>key</code>。当两个<code>&lt;input&gt;</code>中的<code>key</code>的值不同时，Vue就不会复用input元素啦！如下：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>doUseUsername<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>用户名<span class="token punctuation">"</span></span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>邮箱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>邮箱<span class="token punctuation">"</span></span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/06/29/3FPBDtk4CczyQM7.gif" alt="解决后" style="zoom:80%;">
<h2 id="v-show的使用"><a class="header-anchor" href="#v-show的使用"> </a>v-show的使用</h2>
<p>与<code>v-if</code>的用法是一样的，也用于决定一个元素是否被渲染。</p>
<h3 id="v-if-与-v-show-的对比"><a class="header-anchor" href="#v-if-与-v-show-的对比"> </a>v-if 与 v-show 的对比</h3>
<p>既然<code>v-if</code>与<code>v-show</code>的作用相同，那么我们在开发中该如何选择呢？</p>
<p>我们编写下面的代码：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      message<span class="token operator">:</span> <span class="token string">"你好"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不出所料，页面上应该什么都没有显示。但是我们打开控制台，看看页面的 Elements，如下：</p>
<img src="https://i.loli.net/2021/06/29/FpVIr7SxgPQOwKY.png" alt="v-if与v-show的对比" style="zoom:80%;">
<p>可以看到：</p>
<ul>
<li><strong><code>v-if="false"</code>时，DOM中根本就没有该元素</strong></li>
<li><strong><code>v-show="false"</code>时，仅仅是将在该元素中增加了<code>display: none;</code></strong></li>
</ul>
<p>所以，在开发中，我们应这样选择：</p>
<ul>
<li><strong>选择 v-show：当元素需要频繁地在显示和隐藏中切换</strong></li>
<li><strong>选择 v-if：当元素只需要切换一次</strong></li>
</ul>
<h1 id="循环遍历"><a class="header-anchor" href="#循环遍历"> </a>循环遍历</h1>
<h2 id="v-for-的使用"><a class="header-anchor" href="#v-for-的使用"> </a>v-for 的使用</h2>
<h3 id="遍历数组"><a class="header-anchor" href="#遍历数组"> </a>遍历数组</h3>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--01 - 获取数组元素值--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in people<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--02 - 获取数组下标--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in people<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{index + 1}}. {{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      people<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token string">"Rose"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"Jerry"</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://i.loli.net/2021/06/29/Pr4govKCD6QOwXL.png" alt="v-for遍历数组"></p>
<h3 id="遍历对象"><a class="header-anchor" href="#遍历对象"> </a>遍历对象</h3>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--01 - 获取对象的value--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value in person<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{value}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--02 - 获取对象的key--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(value, key) in person<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{key}}: {{value}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--03 - 获取对象的index--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(value, key, index) in person<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{index + 1}}. {{key}}: {{value}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      person<span class="token operator">:</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span>
        sex<span class="token operator">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span>
        age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://i.loli.net/2021/06/29/nvdj12Aqc8ZXWti.png" alt="v-for遍历对象"></p>
<h3 id="📌-添加-key-属性的作用"><a class="header-anchor" href="#📌-添加-key-属性的作用"> </a>📌 添加 key 属性的作用</h3>
<p><strong>官方推荐我们在使用<code>v-for</code>时，给对应的元素或组件添加 key 属性：<code>:key=""</code>。</strong></p>
<p><a href="https://www.zhihu.com/question/61064119/answer/183717717">原因</a>如下：</p>
<p>正如上文（还记得登录方式切换案例中的小问题吗？）所述，Vue（和React都）实现了一套虚拟 DOM 结构，使得我们可以不直接操作 DOM 元素，只操作数据便可以重新渲染页面，而隐藏在背后的原理便是Vue高效的<strong>Diff 算法</strong>。</p>
<p><strong>Vue 和 React 的虚拟 DOM 的 Diff 算法大致相同，其核心是基于两个简单的假设：</strong></p>
<ol>
<li><strong>两个相同的组件产生类似的DOM结构；两个不同的组件产生不同的DOM结构</strong></li>
<li><strong>同一层级的一组节点可以通过唯一的id进行区分</strong></li>
</ol>
<p>基于以上这两点假设，使得虚拟DOM的Diff算法的复杂度从O(n<sup>3</sup>)降到了O(n)。</p>
<p>针对假设中组件层级的说法，我们来看<a href="https://link.zhihu.com/?target=https%3A//calendar.perfplanet.com/2013/diff/">React’s diff algorithm</a>中的一张图就可以明白：</p>
<p><img src="https://s2.loli.net/2022/06/08/WiGXtPphcqj1UuA.png" alt="节点层级"></p>
<p><strong>当页面数据发生变化时，Diff 算法只会比较同一层级的节点：</strong></p>
<ul>
<li><strong>如果节点类型相同，则重新设置该节点的属性，从而实现节点更新</strong></li>
<li><strong>如果节点类型不同，则直接删掉旧的节点，创建并插入新的节点，然后不会再比较这个节点以后的子节点了</strong></li>
</ul>
<p>举个例子：</p>
<img src="https://s2.loli.net/2022/06/08/lUQdaNytfTpkKRC.png" alt=":key-例子-1" style="zoom:67%;">
<p>如上图，我们希望在B和C的中间插入一个F，Diff 算法默认执行起来是这样的：</p>
<img src="https://s2.loli.net/2022/06/08/oeZszHBIMWRGAx1.png" alt=":key-例子-1" style="zoom:67%;">
<p>我们可以发现，Diff 算法将C更新为F，D更新为C，E更新为D，最后插入了E，这效率也太低了吧！</p>
<p>所以官方才推荐我们使用 key 属性来作为每个节点的唯一标识，这样 Diff 算法就可以轻松地找到正确的位置来插入新的节点。</p>
<p><img src="https://s2.loli.net/2022/06/08/sFVCyf9Z1wgKM4G.png" alt="有无key的对比图"></p>
<p><strong>【总结】key的作用：</strong></p>
<p><strong>key 的作用主要是为了高效得更新虚拟 DOM。在Vue中，过渡切换相同标签名的元素时，应该使用key属性，目的是为了让Vue可以区分它们，否则Vue指挥替换其内部属性，而不会触发过渡效果。</strong></p>
<h3 id="key-的选取"><a class="header-anchor" href="#key-的选取"> </a>key 的选取</h3>
<p>我们来实践在 v-for 时添加绑定 key 属性。下面这个例子实现了上文所说的在B的后面插入F：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in array<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      array<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们在控制台输入</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span>array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>以达到在B的后面插入F的目的。</p>
<p><strong>那么问题来了，我们应该选谁来作为 key呢？</strong></p>
<p>先说答案，在下面这个例子中，在<code>array</code>数组中的元素不重复的情况下，应该选用<code>item</code>来充当 key。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in array<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>为什么不用<code>index</code>作为 key 呢？</strong></p>
<p>如果我们用<code>index</code>来作为 key，那么想一想我们在B的后面添加F后，<code>index</code>如何变化？那还用说，肯定是F的下标为2，C的下标为3，以此类推。因为<code>index</code>永远应该是连续的，不可能是“0162345”，所以用<code>index</code>来作为 key 将起不到区分节点的作用。因此，在本例中，我们选用<code>item</code>来作为 key，当然也是在<code>array</code>数组中的元素不重复的情况下。</p>
<h2 id="可响应式的数组方法"><a class="header-anchor" href="#可响应式的数组方法"> </a>可响应式的数组方法</h2>
<p>我们先看看什么是响应式（来自<a href="https://cn.vuejs.org/v2/guide/reactivity.html">官方文档</a>）：</p>
<blockquote>
<p>Vue 最独特的特性之一，是其非侵入性的响应式系统。</p>
<p>数据模型仅仅是普通的 JavaScript 对象。而当你修改它们时，视图会进行更新。</p>
</blockquote>
<p>那什么叫可响应式的数组方法？先看下面的例子：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>插入元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in array<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      array<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        app<span class="token punctuation">.</span>array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"New Item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/06/29/O48bUv6QelkxVFH.gif" alt="GIF 2021-6-29 17-38-59" style="zoom:67%;">
<p>你看！其实<code>Array.push()</code>方法就是可响应式的数组方法，当我们点击 button，向<code>array</code>中压入新元素，视图就自己更新了。下面我们修改一下<code>insert()</code>方法：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">methods<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        app<span class="token punctuation">.</span>array<span class="token punctuation">[</span>app<span class="token punctuation">.</span>array<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"New Item"</span><span class="token punctuation">;</span> <span class="token comment">//在array的后面插入"New Item"</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时，我们点击 button，页面没有发生任何变化。但我们打开控制台，输出<code>array</code>，可以看到<code>array</code>确确实实发生了变化，但是视图并没有更新。这就说明，有些对数组的操作，并不是可响应式的。</p>
<img src="https://i.loli.net/2021/06/29/7AWPIke2vpVGZft.png" alt="image-20210629175411295" style="zoom: 80%;">
<p>下面是可响应式的数组方法：</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push">Array.prototype.push()</a>
<ul>
<li>语法：<code>arr.push(element1, ..., elementN)</code></li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop">Array.prototype.pop()</a>
<ul>
<li>语法：<code>arr.pop()</code></li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift">Array.prototype.shift()</a>：从数组中删除<strong>第一个</strong>元素，并返回该元素的值。
<ul>
<li>语法：<code>arr.shift()</code></li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift">Array.prototype.unshift()</a>：将一个或多个元素添加到数组的<strong>开头</strong>，并返回该数组的<strong>新长度</strong>。
<ul>
<li>语法：<code>arr.unshift(element1, ..., elementN)</code></li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">Array.prototype.splice()</a>：通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。
<ul>
<li>语法：<code>array.splice(start[, deleteCount[, item1[, item2[, ...]]]])</code>（没法理解的话，不用理解哈哈哈哈，直接看说明就好）</li>
<li>参数说明：
<ul>
<li><code>start</code>：传要修改的开始位置（从0计数）
<ul>
<li>超出了数组的长度时，从数组末尾开始添加内容</li>
<li>负值时，从数组末位开始的第几位（从-1计数）</li>
<li>负数的绝对值大于数组的长度时，表示开始位置为第0位。</li>
</ul>
</li>
<li><code>deleteCount</code>（可选）：传要删除的元素个数
<ul>
<li>被省略或大于<code>start</code>之后的元素的总数时，在<code>start</code>后面的元素都将被删除</li>
<li>0或负数时，不移除元素</li>
</ul>
</li>
<li><code>item1, item2, ...</code>（可选）：传要添加的元素；被省略，则将只进行删除操作</li>
</ul>
</li>
<li>操作说明：array.splice(在第几个元素的后面)
<ul>
<li>删除元素：第二个参数传要删除的元素个数，不传则删除后面所有元素</li>
<li>插入元素：第二个参数传0，第三个参数传要添加的元素</li>
<li>替换元素：可以理解为先删除元素，再插入新元素</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">Array.prototype.sort()</a>
<ul>
<li>语法：<code>arr.sort([compareFunction])</code>：用<a href="https://en.wikipedia.org/wiki/In-place_algorithm">原地算法</a>对数组的元素进行排序，并返回数组。</li>
<li>参数说明：
<ul>
<li><code>compareFunction</code>（可选）：用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个字符的Unicode位点进行排序。
<ul>
<li>注意：如果要对数字进行排序，则必须传参！</li>
</ul>
</li>
</ul>
</li>
<li>操作说明：
<ul>
<li>升序（数字数组）<code>numbers.sort((a, b) =&gt; a - b);</code></li>
<li>降序（数字数组）：<code>numbers.sort((a, b) =&gt; b - a);</code></li>
</ul>
</li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse">Array.prototype.reverse()</a>：将数组中元素的位置颠倒，并返回该数组。
<ul>
<li>语法：<code>arr.reverse()</code></li>
</ul>
</li>
</ul>
<h1 id="表单绑定-v-model"><a class="header-anchor" href="#表单绑定-v-model"> </a>表单绑定 v-model</h1>
<h2 id="v-model-的基本使用"><a class="header-anchor" href="#v-model-的基本使用"> </a>v-model 的基本使用</h2>
<p>Vue中使用<code>v-model</code>指令来实现表单元素和数据的<strong>双向绑定</strong>。</p>
<p>什么是双向绑定呢？我们来看下面的例子，我们在<code>&lt;input</code>中添加了<code>v-model="message"</code>，这样就实现了双向绑定：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      message<span class="token operator">:</span> <span class="token string">"你好"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>本例中的双向绑定实际上就是：</p>
<ol>
<li>
<p>input元素中<code>value</code>的值向h2元素<code>message</code>中绑定</p>
<img src="C:\Users\Lee\Desktop\GIF 2021-6-30 13-25-27.gif" alt="v-model双向绑定-1" style="zoom:80%;">
</li>
<li>
<p>h2元素中<code>message</code>的值向input元素中<code>value</code>绑定</p>
</li>
</ol>
<img src="https://s2.loli.net/2022/06/08/DaIHTN5GyeWnB7w.png" alt="v-model双向绑定-" style="zoom: 67%;">
<p>当然，v-model 除了可以用在 input 元素中，同样也可以用在 textarea 元素中哦。</p>
<h2 id="v-model-的原理"><a class="header-anchor" href="#v-model-的原理"> </a>v-model 的原理</h2>
<p>下面我们试试手动实现 v-model</p>
<p>第一步：input 元素中<code>value</code>的值向 h2 元素<code>message</code>中绑定【v-on 指令给 input 元素绑定 input 事件】</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inputVal<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
...
	methods: {
      inputVal(event){
        this.message = event.target.value;
      }
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样看着是不是有点麻烦，还记得我们之前学过的<code>$event</code>嘛？我们现在对上面的代码进行下简化：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message = $event.target.value;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>第二步：h2 元素中<code>message</code>的值向 input 元素中<code>value</code>绑定【v-bind 绑定 value 属性】</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message = $event.target.value;<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这样就实现了和 v-model 相同的功能。</p>
<p>总结起来：</p>
<p><strong>v-model 其实是一个语法糖，它本质上包含了两个操作：</strong></p>
<ul>
<li><strong>v-bind 绑定 value 属性</strong></li>
<li><strong>v-on 指令给当前元素绑定 input 事件</strong></li>
</ul>
<h2 id="v-model-结合-radio类型"><a class="header-anchor" href="#v-model-结合-radio类型"> </a>v-model 结合 radio类型</h2>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    男
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    女
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>性别：{{sex}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      sex<span class="token operator">:</span> <span class="token string">"男"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="C:\Users\Lee\Desktop\GIF 2021-6-30 14-11-55.gif" alt="GIF 2021-6-30 14-11-55" style="zoom:67%;">
<p>注意：为了让两个 radio 互斥，我们以往使用的是添加<code>name="sex"</code>，但是这里用了<code>v-model="sex"</code>就不需要使用 name 属性啦。</p>
<h2 id="v-model-结合-checkbox类型"><a class="header-anchor" href="#v-model-结合-checkbox类型"> </a>v-model 结合 checkbox类型</h2>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--单选框--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>license<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>同意
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>license<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isAgree<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!isAgree<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>下一步<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!--多选框--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swimming<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>swimming<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>游泳<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>游泳
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>soccer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>soccer<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>足球<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>足球
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basketBall<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basketBall<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>篮球<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>篮球
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>running<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>running<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>跑步<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>跑步
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>我的爱好：{{hobbies}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      isAgree<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      hobbies<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="v-model-结合-select-元素"><a class="header-anchor" href="#v-model-结合-select-元素"> </a>v-model 结合 select 元素</h2>
<p>在 select 元素中添加 v-model。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--选择一个--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token style-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token style language-css"><span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fruit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>苹果<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>香蕉<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>香蕉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>葡萄<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>葡萄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>草莓<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>草莓<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!--选择多个--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fruits<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fruits<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>苹果<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>香蕉<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>香蕉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>葡萄<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>葡萄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>草莓<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>草莓<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>我选择了：{{fruits}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      fruit<span class="token operator">:</span> <span class="token string">'葡萄'</span><span class="token punctuation">,</span>
      fruits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://s2.loli.net/2022/06/08/NdEGkHSPrUZ5i9X.png" alt="image-20210630145024114" style="zoom:80%;">
<h2 id="值绑定"><a class="header-anchor" href="#值绑定"> </a>值绑定</h2>
<p>其实在开发中，我们对于 input 元素的<code>value</code>通常不是固定的，需要动态绑定。以“v-model 结合 checkbox 类型”中举的例子为例，我们在<code>data</code>中，传入需要用户勾选的爱好，这时使用值绑定就可以动态的显示在页面中啦：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in givenHobbies<span class="token punctuation">"</span></span> <span class="token attr-name">:for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">:id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{item}}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>我的爱好：{{hobbies}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      givenHobbies<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"游泳"</span><span class="token punctuation">,</span> <span class="token string">"足球"</span><span class="token punctuation">,</span> <span class="token string">"篮球"</span><span class="token punctuation">,</span> <span class="token string">"跑步"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      hobbies<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://s2.loli.net/2022/06/08/tdQlPN1yxHjiKEJ.png" alt="image-20210630150614018" style="zoom:80%;">
<h2 id="v-model-的修饰符"><a class="header-anchor" href="#v-model-的修饰符"> </a>v-model 的修饰符</h2>
<ul>
<li><code>.lazy</code>修饰符：让数据在输入框失去焦点或用户敲击回车时，才会更新</li>
<li><code>.number</code>修饰符：让输入框中的内容自动转为数字类型（默认情况下为字符串类型）</li>
<li><code>.trim</code>修饰符：过滤内容左右两边的空格</li>
</ul>
<p>下面以lazy修饰符为例，来看下如何使用 v-model 修饰符：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.lazy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      message<span class="token operator">:</span> <span class="token string">"你好"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/06/30/uVAtQ5kLjvC9EBG.gif" alt="GIF 2021-6-30 15-22-12" style="zoom:80%;">
<h1 id="Vue-组件"><a class="header-anchor" href="#Vue-组件"> </a>Vue 组件</h1>
<h2 id="Vue-的组件化思想"><a class="header-anchor" href="#Vue-的组件化思想"> </a>Vue 的组件化思想</h2>
<p>组件化是 Vue.js 中的重要思想：</p>
<ul>
<li>它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用</li>
<li>任何应用都可以被抽象成一颗组件树（如下图）</li>
<li>它让代码方便组织和管理，并且提升了扩展性</li>
</ul>
<p><img src="https://i.loli.net/2021/06/30/Ft5xKZYvS31lW4G.png" alt="Vue的组件化思想"></p>
<h2 id="使用组件的步骤"><a class="header-anchor" href="#使用组件的步骤"> </a>使用组件的步骤</h2>
<p>使用组件分为三个步骤：</p>
<ol>
<li>创建组件构造器
<ul>
<li>调用<code>Vue.extend()</code>方法创建一个组件构造器</li>
<li>同时传入<code>template</code>来作为自定义组件的模板（下例中模板为要显示的 HTML 代码；但是这种写法在 Vue 2.x 的文档中几乎已经被语法糖代替啦）</li>
</ul>
</li>
<li>注册组件：调用<code>Vue.component("注册组件的标签名", 组件的构造器)</code>方法</li>
<li>使用组件：在 Vue 实例的作用范围内使用组件，否则不生效</li>
</ol>
<p>下面我们按照上述步骤，来实际使用一下 Vue 组件。</p>
<h2 id="Vue-组件的基本使用"><a class="header-anchor" href="#Vue-组件的基本使用"> </a>Vue 组件的基本使用</h2>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--3. 使用组件--&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 1. 创建组件构造器对象</span>
  <span class="token keyword">const</span> cpnConstructor <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      &lt;div&gt;
        &lt;h2&gt;文章标题&lt;/h2&gt;
        &lt;h5&gt;作者&lt;/h5&gt;
        &lt;p&gt;文章内容，balablabala...&lt;/p&gt;
        &lt;hr&gt;
      &lt;/div&gt;
    </span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 2. 注册组件</span>
  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"my-cpn"</span><span class="token punctuation">,</span> cpnConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/07/13/TYnhtMpqu91ZGIz.png" alt="组件的基本使用" style="zoom: 50%;">
<h2 id="全局组件-和-局部组件"><a class="header-anchor" href="#全局组件-和-局部组件"> </a>全局组件 和 局部组件</h2>
<h3 id="全局组件注册方法"><a class="header-anchor" href="#全局组件注册方法"> </a>全局组件注册方法</h3>
<p>其实，在上面的例子中，我们注册的组件就叫做全局组件。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"my-cpn"</span><span class="token punctuation">,</span> cpnConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样注册的组件可以在任意 Vue 实例下都可以生效（当然，脱离了 Vue 实例自然无法生效）：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anotherApp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> cpnConstructor <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;&lt;h2&gt;文章标题&lt;/h2&gt;&lt;h5&gt;作者&lt;/h5&gt;&lt;p&gt;文章内容，balablabala...&lt;/p&gt;&lt;hr&gt;&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 注册全局组件</span>
  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"my-cpn"</span><span class="token punctuation">,</span> cpnConstructor<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> anotherApp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#anotherApp"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/07/13/uComNivFkWHjXca.png" alt="image-20210630164746431" style="zoom:50%;">
<h3 id="局部组件注册方法"><a class="header-anchor" href="#局部组件注册方法"> </a>局部组件注册方法</h3>
<p>那么我们该如何注册局部组件呢？</p>
<p>我们可以先想想，什么是局部组件。局部组件要求只在<code>id="app"</code>的标签内部才能够生效，因此可以想到，我们可以在名为<code>app</code>的 Vue 实例内部来注册：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> cpnConstructor <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;&lt;h2&gt;文章标题&lt;/h2&gt;&lt;h5&gt;作者&lt;/h5&gt;&lt;p&gt;文章内容，balablabala...&lt;/p&gt;&lt;hr&gt;&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    <span class="token comment">// 注册局部组件</span>
    components<span class="token operator">:</span> <span class="token punctuation">{</span>
      myCpn<span class="token operator">:</span> cpnConstructor
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时如果我们在<code>id="anotherApp"</code>的标签中使用<code>&lt;myCpn&gt;</code>，将不会生效。</p>
<p><strong>注意：</strong></p>
<ul>
<li>**如果在注册组件时使用了驼峰命名法，在使用时要使用短橫线分隔命名。**如组件命名时为<code>myCpn</code>，在使用时要用<code>&lt;my-cpn&gt;</code></li>
<li><strong>注册局部组件是<code>components</code>，注册全局组件是<code>component</code></strong></li>
</ul>
<h2 id="父子组件"><a class="header-anchor" href="#父子组件"> </a>父子组件</h2>
<p>在前面我们学习了组件树，所以组件和组件之间是存在层级关系的。其中，很重要的就是父子组件的关系，也就是说在父组件中使用子组件。</p>
<p>创建方法，其实就是在父组件中添加<code>components</code>属性，注册子组件；然后在<code>template</code>属性中使用它：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>father-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>father-cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 子组件</span>
  <span class="token keyword">const</span> sonCpnC <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;&lt;h4&gt;文章标题&lt;/h4&gt;&lt;h5&gt;作者&lt;/h5&gt;&lt;p&gt;文章内容，balablabala...&lt;/p&gt;&lt;hr&gt;&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 父组件</span>
  <span class="token keyword">const</span> fatherCpnC <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      &lt;div&gt;
        &lt;h2&gt;文章列表&lt;/h2&gt;
        &lt;son-cpn&gt;&lt;/son-cpn&gt;
        &lt;son-cpn&gt;&lt;/son-cpn&gt;
      &lt;/div&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    components<span class="token operator">:</span> <span class="token punctuation">{</span>
      sonCpn<span class="token operator">:</span> sonCpnC
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span> <span class="token punctuation">{</span>
      fatherCpn<span class="token operator">:</span> fatherCpnC
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/07/13/tXUq1rcdb7xJaFw.png" alt="image-20210630173843555" style="zoom: 50%;">
<p><strong>注意：</strong></p>
<ul>
<li>
<p>**子组件要在父组件前面声明。**这样在父组件中注册子组件时，Vue 才能找到子组件呀。</p>
</li>
<li>
<p>**另外，子组件如果在父组件的层级中，子组件将会失效。**这是因为，当 Vue 发现<code>&lt;son-cpn&gt;</code>时，会去<code>app</code>的components中找<code>sonCpn</code>，发现没有这个组件；然后又去全局组件中找，发现也没有；所以就报错了。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>father-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>father-cpn</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>son-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>son-cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<img src="https://i.loli.net/2021/07/13/Fwg9e3adt2nfihp.png" alt="image-20210630173802154" style="zoom: 80%;">
<h2 id="组件注册的语法糖"><a class="header-anchor" href="#组件注册的语法糖"> </a>组件注册的语法糖</h2>
<p>Vue为了简化注册组件的过程，提供了注册组件的语法糖。</p>
<p>主要是省去了调用<code>Vue.extend()</code>的步骤，去直接使用一个包含<code>template</code>属性的对象。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gloabl-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gloabl-cpn</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>part-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>part-cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 注册全局组件的语法糖</span>
  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'gloabl-cpn'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;&lt;h4&gt;我是全局组件&lt;/h4&gt;&lt;p&gt;全局组件内容，balablabala...&lt;/p&gt;&lt;hr&gt;&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    <span class="token comment">// 注册局部组件</span>
    components<span class="token operator">:</span> <span class="token punctuation">{</span>
      partCpn<span class="token operator">:</span> <span class="token punctuation">{</span>
        template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div&gt;&lt;h4&gt;我是局部组件&lt;/h4&gt;&lt;p&gt;局部组件内容，balablabala...&lt;/p&gt;&lt;hr&gt;&lt;/div&gt;</span><span class="token template-punctuation string">`</span></span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/07/13/htm1z7a32DgrqjY.png" alt="image-20210630175818109" style="zoom: 67%;">
<h2 id="组件模板的分离写法"><a class="header-anchor" href="#组件模板的分离写法"> </a>组件模板的分离写法</h2>
<p>你可能感觉到了，在上面的例子中，我们在对<code>template</code>赋值时，写了很多 HTML 代码。显然在 JavaScript 语法中，写 HTML 代码是很头痛的，所以我们可以将<code>template</code>抽离出来，直接写进 script 标签外面。</p>
<p>下面给出了两种方法：</p>
<ul>
<li>使用<code>&lt;script type="text/x-template"</code></li>
<li>使用<code>&lt;template&gt;</code></li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script-temp-cpn</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">-</span>temp<span class="token operator">-</span>cpn<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>temp<span class="token operator">-</span>temp<span class="token operator">-</span>cpn<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>temp<span class="token operator">-</span>temp<span class="token operator">-</span>cpn<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">1.</span> 使用script标签<span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/x-template"</span> id<span class="token operator">=</span><span class="token string">"scriptTempId"</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h4<span class="token operator">&gt;</span>我是 script 标签创建的组件<span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>组件内容，balablabala<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>hr<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--2. 使用template标签--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tempTempId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>我是 template 标签创建的组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>组件内容，balablabala...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'script-temp-cpn'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    template<span class="token operator">:</span> <span class="token string">"#scriptTempId"</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span> <span class="token punctuation">{</span>
      tempTempCpn<span class="token operator">:</span> <span class="token punctuation">{</span>
        template<span class="token operator">:</span> <span class="token string">"#tempTempId"</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/07/13/Cer91Uj2dKmbFkh.png" alt="image-20210630183004204" style="zoom:67%;">
<p><strong>注意：在 template 标签内只能有一个根元素，所以我们最好在 <code>&lt;template&gt;</code> 的最外层包裹一层 <code>&lt;div&gt;</code>。</strong></p>
<img src="https://i.loli.net/2021/07/13/doeGlr7mTUQCyjB.png" alt="image-20210630225830207" style="zoom:67%;">
<h2 id="组件数据的存放"><a class="header-anchor" href="#组件数据的存放"> </a>组件数据的存放</h2>
<h3 id="讨论"><a class="header-anchor" href="#讨论"> </a>讨论</h3>
<p>显然，在开发中我们组件中的数据不可能是固定的，所以我们需要将 Vue 实例中的数据绑定在组件中。</p>
<p>那么，组件可以直接访问 Vue 实例中的数据吗？我们来试一下！</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tempId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>我是组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>组件内容：{{content}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      content<span class="token operator">:</span> <span class="token string">"balabalabala..."</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span> <span class="token punctuation">{</span>
      myCpn<span class="token operator">:</span> <span class="token punctuation">{</span>
        template<span class="token operator">:</span> <span class="token string">"#tempId"</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/07/13/4wic82kax7YFUKA.png" alt="image-20210630185134180" style="zoom:67%;">
<img src="https://i.loli.net/2021/07/13/sOBqWyLHUuJdDlw.png" alt="image-20210630185113503" style="zoom:67%;">
<p>可见，Vue 没有找到<code>content</code>，所以组件不能直接访问 Vue 实例的数据。</p>
<p>其实，也不应该能够直接被访问。因为，如果组件的数据也存进 Vue 实例的话，Vue 实例中的数据将会变得非常繁杂。</p>
<p><strong>结论：Vue 组件应该有一个地方来存放自己的数据。</strong></p>
<h3 id="组件数据的存放-v2"><a class="header-anchor" href="#组件数据的存放-v2"> </a>组件数据的存放</h3>
<p>那么我没要想一个好位置，来存放属于组件的数据：那肯定是存在组件的实例中，对不对！是的，组件对象也有一个<code>data</code>（而且还有 methods 属性呢）。</p>
<p>不过，<strong>要注意的是：</strong></p>
<ul>
<li><strong>组件的<code>data</code>必须是一个函数</strong></li>
<li><strong>而且，这个函数返回的是一个对象，这个对象的内部保存着组件的数据</strong></li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tempId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>我是组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>组件内容：{{content}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span> <span class="token punctuation">{</span>
      myCpn<span class="token operator">:</span> <span class="token punctuation">{</span>
        template<span class="token operator">:</span> <span class="token string">"#tempId"</span><span class="token punctuation">,</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            content<span class="token operator">:</span> <span class="token string">"balabalabala..."</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/07/13/mb4OGN7hcXC65HL.png" alt="image-20210630185844337" style="zoom:67%;">
<p>你也许会困惑，为什么组件的<code>data</code>必须是一个函数？</p>
<h3 id="组件的-data-是函数的原因"><a class="header-anchor" href="#组件的-data-是函数的原因"> </a>组件的 data 是函数的原因</h3>
<p>这是一个很有趣的问题！</p>
<p>还记得，我们那个计数器的例子嘛。我们先把它封装成一个组件，然后对他进行多次调用看看。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>counter-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>counter-cpn</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>counter-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>counter-cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counterTemp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>当前计数：{{counter}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter--<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>-<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>counter++<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span> <span class="token punctuation">{</span>
      counterCpn<span class="token operator">:</span> <span class="token punctuation">{</span>
        template<span class="token operator">:</span> <span class="token string">"#counterTemp"</span><span class="token punctuation">,</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            counter<span class="token operator">:</span> <span class="token number">0</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/07/13/yWDL8gO4Yz5uiZC.gif" alt="GIF 2021-6-30 19-14-45" style="zoom: 67%;">
<p>我们可以看到，两个组件的 <code>counter</code> 实际上是独立的。很奇妙对不对，这就是 <code>data</code> 是函数的功劳。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        counter<span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于这个组件来说，不管它被使用了几次，因为<code>data</code> 返回的总是一个新创建的对象，所以组件之间的数据是相互独立、互不干扰的。</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">data<span class="token operator">:</span> <span class="token punctuation">{</span>
    counter<span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>反过来，如果 <code>data</code> 还是像 Vue 实例中那样，是一个对象实例，那么每个组件使用的数据其实都是来自同一个 <code>data</code> 对象实例，这样就会出现混乱。</p>
<h2 id="父子组件的通信"><a class="header-anchor" href="#父子组件的通信"> </a>父子组件的通信</h2>
<p>在开发中，我们往往需要将一些数据从上层传递到下层。</p>
<p>比如，在一个页面中，我们先从服务器请求到很多数据。其中一部分数据，我们是要在页面中最大组件的子组件中显示的。这个时候，我们不应该再让子组件再次发生请求，而是要让大组件（父组件）直接传递数据给小组件（子组件）。这里就涉及到了，父子组件的通信。</p>
<p>那么如何进行父子组件的通信呢？Vue 官方提供了两种方法：</p>
<ul>
<li><strong>通过 <code>props</code> 向子组件传递数据</strong></li>
<li><strong>通过事件向父组件发送消息</strong></li>
</ul>
<img src="https://img-blog.csdnimg.cn/202102281529404.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDkwMjEy,size_16,color_FFFFFF,t_70" alt="父子组件通信" style="zoom:67%;">
<p>下面我们把 Vue 实例当作父组件，来举个例子。在真实的开发中，Vue 实例和子组件的通信适合父组件和子组件的通信过程是一样的。</p>
<h3 id="父向子传数据-props"><a class="header-anchor" href="#父向子传数据-props"> </a>父向子传数据 - props</h3>
<p>当子组件需要向父组件中接收数据时，我们可以在注册子组件时添加 <code>props</code>属性，来获取需要的数据。</p>
<p>** <code>props</code> 的值有两种：**</p>
<ul>
<li><strong>字符串数组，数组中的字符串就是接收时的名称</strong></li>
<li><strong>对象，对象可以限制类型，设置默认值和必选值</strong>
<ul>
<li>支持验证很多类型：String / Number / Boolean / Array / Object / Date / Function / Symbol / 自定义类型</li>
</ul>
</li>
</ul>
<p><strong>具体流程：</strong></p>
<ul>
<li><strong>在子组件中，使用 <code>props</code> 来注册子组件的 properties</strong></li>
<li><strong>在父组件使用的子组件标签中，通过 <code>v-bind</code> 动态绑定刚刚注册的 properties，properties 的值为父组件要传的数据名</strong></li>
<li><strong>在子组件的模板中，以 properties 为名使用获取的数据</strong></li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>数据：{{movies}}，{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span> <span class="token attr-name">:child-movies</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>movies<span class="token punctuation">"</span></span> <span class="token attr-name">:child-message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myCpnTempId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in childMovies<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>{{childMessage}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      movies<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"海王"</span><span class="token punctuation">,</span> <span class="token string">"星际穿越"</span><span class="token punctuation">,</span> <span class="token string">"盗梦空间"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      message<span class="token operator">:</span> <span class="token string">"以上电影正在热映！"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span> <span class="token punctuation">{</span>
      myCpn<span class="token operator">:</span> <span class="token punctuation">{</span>
        template<span class="token operator">:</span> <span class="token string">"#myCpnTempId"</span><span class="token punctuation">,</span>
        <span class="token comment">// 1. props为字符串数组</span>
        <span class="token comment">// props: ["childMovies", "childMessage"]</span>

        <span class="token comment">// 2. props为对象</span>
        props<span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token comment">// 2.1 限制类型</span>
          <span class="token comment">// childMovies: Array,</span>
          <span class="token comment">// childMessage: String,</span>

          <span class="token comment">// 2.2 限制类型，设置默认值和必传值</span>
          childMovies<span class="token operator">:</span> <span class="token punctuation">{</span>
            type<span class="token operator">:</span> Array<span class="token punctuation">,</span>
            <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            required<span class="token operator">:</span> <span class="token boolean">true</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          childMessage<span class="token operator">:</span> <span class="token punctuation">{</span>
            type<span class="token operator">:</span> String<span class="token punctuation">,</span>
            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">"！"</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/07/13/ubHSp25LzlZyVi1.png" alt="image-20210630233717482" style="zoom:67%;">
<p><strong>注意：</strong></p>
<ul>
<li>
<p><strong>HTML 的属性名应该是 kebab-case 式命名的</strong> ，所以尽管 <code>props</code> 中写的是 <code>childMovie</code> ，我们在 <code>&lt;my-cpn&gt;</code> 中也应该写 <code>v-bind:child-movie</code> 。</p>
</li>
<li>
<p><strong>当 <code>props</code> 的类型为 Object/Array时，默认值应返回一个（工厂）函数</strong>，否则会报错</p>
</li>
</ul>
<img src="https://i.loli.net/2021/07/13/KgQoElMGUqyB4N8.png" alt="image-20210630232036943" style="zoom:67%;">
<h3 id="子向父发消息-emit"><a class="header-anchor" href="#子向父发消息-emit"> </a>子向父发消息 - $emit</h3>
<p>当我们需要子组件向父组件发送消息时，我们要使用<strong>自定义事件</strong>来完成。</p>
<p><strong>自定义事件的流程：</strong></p>
<ul>
<li><strong>在子组件中，通过 <code>$emit()</code> 来触发事件</strong></li>
<li><strong>在父组件中，通过 <code>v-on</code> 来监听子组件的事件</strong></li>
</ul>
<p><strong>具体流程：</strong></p>
<ul>
<li><strong>在子组件的模板中，添加事件，来携带消息</strong></li>
<li><strong>在子组件的 <code>methods</code> 中，注册事件，使用 <code>$emit()</code> 来向父组件发送事件</strong>
<ul>
<li><strong><code>$emit()</code> 的第一个参数为下一步要用的监听事件名；第二个参数为要传递的参数</strong></li>
</ul>
</li>
<li><strong>在父组件的子组件标签中，使用 <code>v-on</code> 来添加事件监听，名为 <code>$emit()</code> 的第一个参数，并写一个监听到事件后会被触发的事件名</strong></li>
<li><strong>在父组件的 <code>methods</code> 中，添加该事件，收到的参数就是 <code>$emit()</code> 的第二个参数</strong></li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span> <span class="token attr-name">@child-btn-click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showItem<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>用户点击了：{{categoryItem}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myCpnTempId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in categories<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onChildBtnClick(item)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      categoryItem<span class="token operator">:</span> <span class="token string">""</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">showItem</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>categoryItem <span class="token operator">=</span> item<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span> <span class="token punctuation">{</span>
      myCpn<span class="token operator">:</span> <span class="token punctuation">{</span>
        template<span class="token operator">:</span> <span class="token string">"#myCpnTempId"</span><span class="token punctuation">,</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            categories<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"手机数码"</span><span class="token punctuation">,</span><span class="token string">"电脑办公"</span><span class="token punctuation">,</span> <span class="token string">"家用家电"</span><span class="token punctuation">]</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        methods<span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token function">onChildBtnClick</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'child-btn-click'</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/07/13/LNqrpaV8n1dysjX.gif" alt="GIF 2021-7-1 1-43-47" style="zoom:67%;">
<p><strong>注意：</strong></p>
<p>** <code>$emit</code> 的第一个参数，应是 kebab-case 式命名的，因为 <code>v-on</code> 后面接的值只能是 kebab-case 命名的。**</p>
<h2 id="父子组件的访问"><a class="header-anchor" href="#父子组件的访问"> </a>父子组件的访问</h2>
<p>在开发中，我们其实不仅要在父子组件之间传递数据、发送消息，有时还需要在父子组件之间互相访问各自的数据和方法。</p>
<h3 id="父访问子组件-children"><a class="header-anchor" href="#父访问子组件-children"> </a>父访问子组件 - $children</h3>
<p>使用方法很简单，在父组件的方法中，直接使用 <code>this.$children[x].方法名</code> 就可以获取到相应的子组件对象了。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span> <span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clickBtn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cpnTempId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>我是子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">clickBtn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// console.log(this.$children);</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span> <span class="token punctuation">{</span>
      myCpn<span class="token operator">:</span> <span class="token punctuation">{</span>
        template<span class="token operator">:</span> <span class="token string">"#cpnTempId"</span><span class="token punctuation">,</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            message<span class="token operator">:</span> <span class="token string">"我是子组件的message"</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        methods<span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是子组件的方法logMessage()，我被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>点击按钮后，显示</p>
<p><img src="https://i.loli.net/2021/07/13/d52cFY3rUwIQ6KL.png" alt="image-20210701173406106"></p>
<p>这就表明，父组件获取到了子组件的数据和方法。</p>
<p>我们执行 <code>console.log(this.$children)</code> 的结果如下。</p>
<p><img src="https://i.loli.net/2021/07/13/xVor2lGIbKQ5sTi.png" alt="image-20210701173603598"></p>
<p>可见，<code>$children</code> 实际上是一个包含所有子组件的数组，所以在使用时记得表明要使用的子组件的下标。</p>
<p>那么<strong>问题也来了</strong>，既然我们要通过下标来访问子组件，当用户动态地在页面中添加了子组件的话，我们要访问的子组件的下标肯定也会发生变化。所以这对我们来说，是个坏消息。因此，<strong>在实际的开发中，我们通常使用 <code>$refs</code> 来访问子组件。</strong></p>
<h3 id="父访问子组件-refs"><a class="header-anchor" href="#父访问子组件-refs"> </a>父访问子组件 - $refs</h3>
<p>为了解决上一个方法的一些弊端，我们要先给父组件中的子组件标签上添加 <code>ref="组件名"</code> ，然后和 <code>$children</code> 一样，直接使用 <code>this.$refs.组件名</code> 就可以获取到相应的子组件对象了。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myCpn1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span> <span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myCpn2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myCpn3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clickBtn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cpnTempId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>我是子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">clickBtn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>myCpn1<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>myCpn1<span class="token punctuation">.</span><span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span> <span class="token punctuation">{</span>
      myCpn<span class="token operator">:</span> <span class="token punctuation">{</span>
        template<span class="token operator">:</span> <span class="token string">"#cpnTempId"</span><span class="token punctuation">,</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            message<span class="token operator">:</span> <span class="token string">"我是子组件的message"</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        methods<span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是子组件的方法logMessage()，我被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://i.loli.net/2021/07/13/GDL2lJjFdmg5WHu.png" alt="image-20210701174438073"></p>
<p><strong>注意：</strong></p>
<ul>
<li><strong>在父组件中的子组件标签上添加的属性名为 <code>ref</code>，没有 <code>s</code> 哦</strong></li>
<li><strong>如果多个组件的 <code>ref</code> 名一样，则后面的组件会覆盖前面的组件。所以在开发中尽量使用不同的 <code>ref</code> 名哦</strong></li>
</ul>
<h3 id="子访问父-parent-和-子访问根-root"><a class="header-anchor" href="#子访问父-parent-和-子访问根-root"> </a>子访问父 - $parent 和 子访问根 - $root</h3>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>我是根组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>father-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>father-cpn</span> <span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fatherCpnTempId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>我是父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-cpn</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>childCpnTempId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>我是子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clickBtn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span>
      message<span class="token operator">:</span> <span class="token string">"我是根组件的message"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">rootLogMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是根组件的方法logMessage()，我被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span> <span class="token punctuation">{</span>
      fatherCpn<span class="token operator">:</span> <span class="token punctuation">{</span>
        template<span class="token operator">:</span> <span class="token string">"#fatherCpnTempId"</span><span class="token punctuation">,</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            message<span class="token operator">:</span> <span class="token string">"我是父组件的message"</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        methods<span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token function">parentLogMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是父组件的方法logMessage()，我被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        components<span class="token operator">:</span> <span class="token punctuation">{</span>
          childCpn<span class="token operator">:</span> <span class="token punctuation">{</span>
            template<span class="token operator">:</span> <span class="token string">"#childCpnTempId"</span><span class="token punctuation">,</span>
            methods<span class="token operator">:</span> <span class="token punctuation">{</span>
              <span class="token function">clickBtn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 1. $parent访问父组件</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span><span class="token function">parentLogMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 2. $root访问跟组件</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>$root<span class="token punctuation">.</span><span class="token function">rootLogMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>点击按钮，输出如下：</p>
<p><img src="https://i.loli.net/2021/07/13/khFfd32wmgRyXCQ.png" alt="image-20210701200922092"></p>
<p>在上面的例子中，我们</p>
<ul>
<li>使用 <code>$parent</code> 访问到了子组件的父组件的数据和方法，</li>
<li>使用 <code>$root</code> 访问到了子组件的根组件的数据和方法。</li>
</ul>
<p>不过要注意的是，跟组件返回的不是 Vue Component，而是一个 Vue 实例。我们执行 <code>console.log(this.$root)</code> 可以看一下。</p>
<p><img src="https://i.loli.net/2021/07/13/thqUxdEO36NTQD1.png" alt="image-20210701201325618"></p>
<h2 id="组件的插槽-slot"><a class="header-anchor" href="#组件的插槽-slot"> </a>组件的插槽 slot</h2>
<p>事实上，到目前为止，我们组件的模板都是固定的。但是在开发中，针对不同的应用场景，我们需要我们的组件要根据情况，结构发生一些变化。如下面的这种情况：</p>
<img src="https://i.loli.net/2021/07/13/wly8Piu34UDLQRB.png" alt="image-20210701204840438" style="zoom:67%;">
<p>上面显示的是我们模拟的文章列表，此时每篇文章都是有作者的。但是如果我的第二篇文章时转载的，我想把作者这个位置的数据换成一个链接，该怎么办呢？如果我们直接修改组件模板，那么必然所有文章的作者都变成了一个链接，所以现在该怎么办呢？</p>
<p>此时我们就可以用上插槽了，我们只需要对HTML的部分进行修改，在模板中将要变化的位置换成 <code>&lt;slot&gt;</code> 标签，然后在使用组件时，在组件标签内部添加你想加的HTML结构就可以了。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>作者：XXX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.xxx.com<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>原文链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>作者：XXX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cpnTempId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>文章内容, balabalabala...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/07/13/h7sqS6ExDOYrTcu.png" alt="image-20210701205249935" style="zoom:67%;">
<p>是不是很简单！同时，我们还可以给 slot 添加一个<strong>默认值</strong>，来表示每篇文章的中间默认是显示作者：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.xxx.com<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>原文链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cpnTempId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>作者：XXX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>文章内容, balabalabala...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/07/13/wdANjQilBoS95xm.png" alt="image-20210701204348950" style="zoom:67%;">
<h3 id="具名插槽"><a class="header-anchor" href="#具名插槽"> </a>具名插槽</h3>
<p>现在我们的需求又变了，我希望每篇文章的结构都是可变的。也就是说，上部（标题区域）可以是文字也可以是链接，中部（作者区域）可以是文字也可以是链接，下部同理。这时该怎么办？聪明的你，一定可以想到，只需要将模板写成三个 <code>&lt;slot&gt;</code> ，在使用时组件中间添加结构就可以啦！我们来试试看：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cpnTempId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/07/13/2NJbOQit5wqA4HR.png" alt="image-20210701210153264" style="zoom:67%;">
<p>欸？事情并没有能够如我们所愿，其实原因也很简单，Vue 也不知道你这个 <code>&lt;h3&gt;标题&lt;/h3&gt;</code> 应该插进哪个插槽。因此我们只需要给每个 <code>&lt;slot&gt;</code> 一个名字就可以啦。</p>
<p>这时我们就要使用<strong>具名插槽 <code>&lt;slot name=""&gt;</code></strong> 了。我们献给每一个 <code>&lt;slot&gt;</code> 添加一个 name 属性，然后再使用组件时，将要插入的结构上表明 <code>slot="?"</code>即可。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>作者：XXX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>文章内容，balabalabala...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cpnTempId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://i.loli.net/2021/07/13/ThjFKRSsgVqZztU.png" alt="image-20210701210725149" style="zoom:67%;">
<h3 id="作用域插槽"><a class="header-anchor" href="#作用域插槽"> </a>作用域插槽</h3>
<p>现在我们有这样一个页面：</p>
<img src="https://i.loli.net/2021/07/13/iaDkexj1ZtEqmls.png" alt="image-20210701223556893" style="zoom:67%;">
<p>我们的需求是，将第二个 movieList 的格式改成“海王 - 海贼王 - 海尔兄弟”这个样子，那该怎么办呢？</p>
<p>我们先来分析一下，我们知道既然它是两个组件，那么 movieList 肯定是组件的数据。当我们想要修改第二个组件的格式时，肯定就需要在第二个组件中间使用 movieList。那么问题来了，如果我们像这样直接使用 <code>movies</code> 数组，其实是在访问 Vue 实例中的数据。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!--这时错误的！--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{movies.join(' - ')}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cpnTempId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in movies<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    components<span class="token operator">:</span><span class="token punctuation">{</span>
      myCpn<span class="token operator">:</span> <span class="token punctuation">{</span>
        template<span class="token operator">:</span> <span class="token string">"#cpnTempId"</span><span class="token punctuation">,</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
            movies<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'海王'</span><span class="token punctuation">,</span> <span class="token string">'海贼王'</span><span class="token punctuation">,</span> <span class="token string">'海尔兄弟'</span><span class="token punctuation">]</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以，我们要使用<strong>作用域插槽</strong>来在使用标签时获取到组件的数据。</p>
<p>具体步骤：</p>
<ol>
<li>在 <code>&lt;slot&gt;</code> 内动态绑定一个属性，属性的值为要传的数据</li>
<li>在使用组件时，在组件中间的 <code>&lt;template&gt;</code> 中添加属性 <code>slot-scope</code>，并设置一个值</li>
<li>在需要用数据的地方，使用 <code>第二步设置的值.第一步动态绑定的属性名</code> 就可以获取到数据了</li>
</ol>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>slot<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{slot.data.join(' - ')}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cpn</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cpnTempId<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>movies<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in movies<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="模块化"><a class="header-anchor" href="#模块化"> </a>模块化</h1>
<h2 id="为什么要模块化"><a class="header-anchor" href="#为什么要模块化"> </a>为什么要模块化</h2>
<p>工程中，肯定会有很多个js文件，这时会不可避免地出现全局变量重名的问题。举个例子的话，我们在一个js文件中定义了一个变量为 true ，然后我们想在另一个文件中使用这个变量。但很不巧的是另一个在他的js文件里也声明了这个变量，恰好是false。这时如果他的文件在我们的文件之前被引入，我取到的这个变量就不是true了，这就出现了问题。</p>
<p>这个问题可以通过把每个js文件封装成一个匿名函数，然后直接调用它来解决。但是这就导致了，我无法复用其他文件中的变量和方法。</p>
<p>为了解决这个问题，最早其实是将，要导出（复用）的数据作为返回值，返回给js文件中的全局变量。只要保证文件之间的这个变量不重名就可以了。这就是模块化的雏形。</p>
<p>而现在我们可以使用模块化的思想，更简便的完成上面的功能。</p>
<p>模块化的规范有：Common JS、AMD、CMD、ES6的module。</p>
<p>正常，浏览器是用不了Common JS、AMD和CMD的，因为没有底层技术的支持。但它支持ES6的语法。而如果我们用了Webpack，就能给他们做一个底层的支持。</p>
<h2 id="Webpack"><a class="header-anchor" href="#Webpack"> </a>Webpack</h2>
<p>官方的解释：</p>
<blockquote>
<p>本质上，webpack是一个现代的JavaScript应用的静态 <strong>模块</strong> <strong>打包</strong> 工具。</p>
</blockquote>
<p><strong>模块</strong>：上文已述。</p>
<p><strong>打包</strong>：导入和导出是模块化的核心，所以模块之间的关系是非常复杂的，所以webpack可以把各种资源模块打包成一个或多个包（Bundle）。并且在打包的过程中，可以将比如说，less转成css，typescript转成JavaScript，还包括图片压缩等等，让这些本来无法被浏览器识别的文件，被识别。</p>
<img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.pianshen.com%2Fimages%2F34%2Fc9d0ca36f9c96d6e4145b988e2158c8a.png&amp;refer=http%3A%2F%2Fwww.pianshen.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1628685428&amp;t=0906a5a413833b0354f78ad28f177e89" alt="Webpack" style="zoom:50%;">
<h3 id="与-grunt-gulp-的对比"><a class="header-anchor" href="#与-grunt-gulp-的对比"> </a>与 grunt/gulp 的对比</h3>
<ul>
<li>
<p>grunt/gulp的核心是task，被称为前端自动化任务管理工具，更加强调的是前端流程的自动化，模块化不是它的核心</p>
</li>
<li>
<p>webpack更加强调模块化开发管理，而文件压缩合并、预处理等功能。</p>
</li>
</ul>
<h3 id="什么时候用-grunt-gulp-？"><a class="header-anchor" href="#什么时候用-grunt-gulp-？"> </a>什么时候用 grunt/gulp ？</h3>
<ul>
<li>工程模块以来非常简单，甚至没有用到模块化的概念</li>
<li>只需要进行简单的合并、压缩</li>
</ul>
<h2 id="js-文件的打包"><a class="header-anchor" href="#js-文件的打包"> </a>js 文件的打包</h2>
<p>Webpack 打包命令：</p>
<p><code>webpack ./src/main.js -o dist/bundle.js --mode development </code></p>
<p>但是生成的文件有些奇怪：</p>
<img src="https://i.loli.net/2021/07/13/8oBbiNa4MqtjI7y.png" alt="image-20210713231928859" style="zoom: 67%;">
<p>按理来说，应该在 <code>dist</code> 文件夹下生成 <code>bundle.js</code> 文件。目前不知道如何解决。</p>
<h2 id="引用打包后的文件"><a class="header-anchor" href="#引用打包后的文件"> </a>引用打包后的文件</h2>
<img src="C:\Users\Lee\AppData\Roaming\Typora\typora-user-images\image-20210713232529911.png" alt="image-20210713232529911" style="zoom:67%;">
<h1 id="Vue-CLI"><a class="header-anchor" href="#Vue-CLI"> </a>Vue CLI</h1>
<h2 id="CLI-是什么"><a class="header-anchor" href="#CLI-是什么"> </a>CLI 是什么</h2>
<p>CLI（Command-Line Interface）命令行界面，俗称脚手架。</p>
<p>使用 vue-cli 可以快速搭建 Vue开发环境以及对应的 webpack 配置。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题</title>
    <url>/2021/05/07/%E7%AE%97%E6%B3%95%E9%A2%98/</url>
    <content><![CDATA[<h1 id="算法题"><a class="header-anchor" href="#算法题"> </a>算法题</h1>
<h2 id="1-两数之和⭐️"><a class="header-anchor" href="#1-两数之和⭐️"> </a>1. 两数之和⭐️</h2>
<h3 id="题目描述"><a class="header-anchor" href="#题目描述"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a></p>
<blockquote>
<p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
<p>你可以按任意顺序返回答案。</p>
<p><strong>示例 1：</strong></p>
<p>输入：nums = [2,7,11,15], target = 9<br>
输出：[0,1]<br>
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</p>
<p><strong>示例 2：</strong></p>
<p>输入：nums = [3,2,4], target = 6<br>
输出：[1,2]</p>
<p><strong>示例 3：</strong></p>
<p>输入：nums = [3,3], target = 6<br>
输出：[0,1]</p>
</blockquote>
<h3 id="解法1：暴力"><a class="header-anchor" href="#解法1：暴力"> </a>解法1：暴力</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// brute force way</span>
<span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<em>O(N<sup>2</sup>)</em>，其中N是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。</li>
<li>空间复杂度：<em>O(1)</em>。</li>
</ul>
<h3 id="解法2：哈希表"><a class="header-anchor" href="#解法2：哈希表"> </a>解法2：哈希表</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// hash table</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"No two sum solution"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>复杂度分析</strong></p>
<ul>
<li>时间复杂度：<em>O(N)</em>，其中N是数组中的元素数量。对于每一个元x，我们可以O(1)地寻找target - x。</li>
<li>空间复杂度：<em>O(N)</em>，其中N是数组中的元素数量。主要为哈希表的开销。</li>
</ul>
<h2 id="2-两数相加⭐️⭐️"><a class="header-anchor" href="#2-两数相加⭐️⭐️"> </a>2. 两数相加⭐️⭐️</h2>
<h3 id="题目描述-v2"><a class="header-anchor" href="#题目描述-v2"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/add-two-numbers/">2. 两数相加</a></p>
<blockquote>
<p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p>
<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<p><strong>示例 1：</strong></p>
<p>输入：l1 = [2,4,3], l2 = [5,6,4]<br>
输出：[7,0,8]<br>
解释：342 + 465 = 807</p>
<p><strong>示例 2：</strong></p>
<p>输入：l1 = [0], l2 = [0]<br>
输出：[0]</p>
<p><strong>示例 3：</strong></p>
<p>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>
输出：[8,9,9,9,0,0,0,1]</p>
<p><strong>提示：</strong></p>
<p>每个链表中的节点数在范围 [1, 100] 内<br>
0 &lt;= Node.val &lt;= 9<br>
题目数据保证列表表示的数字不含前导零</p>
</blockquote>
<h3 id="解法：链表"><a class="header-anchor" href="#解法：链表"> </a>解法：链表</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */</span>
<span class="token comment">/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">addTwoNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> curr <span class="token operator">=</span> dummy<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">||</span> l2<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> x <span class="token operator">=</span> l1 <span class="token operator">?</span> l1<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> y <span class="token operator">=</span> l2 <span class="token operator">?</span> l2<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        
        <span class="token keyword">let</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> carry<span class="token punctuation">;</span>
        curr<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        
        carry <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>sum<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span> l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>carry <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> curr<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>思路</strong></p>
<p><a href="https://leetcode-cn.com/problems/add-two-numbers/solution/jian-dan-yi-dong-javacpythonjs-pei-yang-y2w6g/">【简单易懂Java/C++/Python/JS】【培养算法思维】- 两数相加</a></p>
<h2 id="7-整数反转⭐️"><a class="header-anchor" href="#7-整数反转⭐️"> </a>7. 整数反转⭐️</h2>
<h3 id="题目描述-v3"><a class="header-anchor" href="#题目描述-v3"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/reverse-integer/">7. 整数反转</a></p>
<blockquote>
<p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p>
<p>如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。</p>
<p>假设环境不允许存储 64 位整数（有符号或无符号）。</p>
<p><strong>示例 1：</strong></p>
<p>输入：x = 123<br>
输出：321</p>
<p><strong>示例 2：</strong></p>
<p>输入：x = -123<br>
输出：-321<br>
示例 3：</p>
<p>输入：x = 120<br>
输出：21<br>
示例 4：</p>
<p>输入：x = 0<br>
输出：0</p>
</blockquote>
<h3 id="解法：数组"><a class="header-anchor" href="#解法：数组"> </a>解法：数组</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * @param {number} x
 * @return {number}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">reverse</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> isNeg <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        x <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        isNeg <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> arr <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    res <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>isNeg<span class="token punctuation">)</span> res <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">||</span> res <span class="token operator">&gt;</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="提交记录"><a class="header-anchor" href="#提交记录"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/190263336/">通过</a></td>
<td style="text-align:left">128 ms</td>
<td style="text-align:left">39.5 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/06/27 23:24</td>
<td style="text-align:left">数组</td>
</tr>
</tbody>
</table>
<h2 id="9-回文数⭐️"><a class="header-anchor" href="#9-回文数⭐️"> </a>9. 回文数⭐️</h2>
<h3 id="题目描述-v4"><a class="header-anchor" href="#题目描述-v4"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/palindrome-number/">9. 回文数</a></p>
<blockquote>
<p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</p>
<p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而 123 不是。</p>
<p><strong>示例 1：</strong></p>
<p>输入：x = 121<br>
输出：true</p>
<p><strong>示例 2：</strong></p>
<p>输入：x = -121<br>
输出：false<br>
解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</p>
<p><strong>示例 3：</strong></p>
<p>输入：x = 10<br>
输出：false<br>
解释：从右向左读, 为 01 。因此它不是一个回文数。</p>
<p><strong>示例 4：</strong></p>
<p>输入：x = -101<br>
输出：false</p>
</blockquote>
<h3 id="解法：双指针"><a class="header-anchor" href="#解法：双指针"> </a>解法：双指针</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * @param {number} x
 * @return {boolean}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> arr <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> j <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
        j<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="提交记录-v2"><a class="header-anchor" href="#提交记录-v2"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/195470648/">通过</a></td>
<td style="text-align:left">152 ms</td>
<td style="text-align:left">47.2 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/07/14 00:08</td>
<td style="text-align:left">双指针</td>
</tr>
</tbody>
</table>
<h2 id="11-盛最多水的容器⭐️⭐️"><a class="header-anchor" href="#11-盛最多水的容器⭐️⭐️"> </a>11. 盛最多水的容器⭐️⭐️</h2>
<h3 id="题目描述-v5"><a class="header-anchor" href="#题目描述-v5"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/container-with-most-water/">11. 盛最多水的容器</a></p>
<blockquote>
<p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<p>说明：你不能倾斜容器。</p>
<p><strong>示例 1：</strong></p>
<img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt="示例1" style="zoom:67%;">
<p>输入：[1,8,6,2,5,4,8,3,7]<br>
输出：49<br>
解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p>
<p><strong>示例 2：</strong></p>
<p>输入：height = [1,1]<br>
输出：1</p>
<p><strong>示例 3：</strong></p>
<p>输入：height = [4,3,2,1,4]<br>
输出：16</p>
<p><strong>示例 4：</strong></p>
<p>输入：height = [1,2,1]<br>
输出：2</p>
</blockquote>
<h3 id="解法：双指针-v2"><a class="header-anchor" href="#解法：双指针-v2"> </a>解法：双指针</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * @param {number[]} height
 * @return {number}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">maxArea</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> j <span class="token operator">=</span> height<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
        res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> j<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="提交记录-v3"><a class="header-anchor" href="#提交记录-v3"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/195463601/">通过</a></td>
<td style="text-align:left">84 ms</td>
<td style="text-align:left">46.9 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/07/13 23:51</td>
<td style="text-align:left">双指针🚩</td>
</tr>
</tbody>
</table>
<h2 id="42-接雨水⭐️⭐️⭐️"><a class="header-anchor" href="#42-接雨水⭐️⭐️⭐️"> </a>42. 接雨水⭐️⭐️⭐️</h2>
<h3 id="题目描述-v6"><a class="header-anchor" href="#题目描述-v6"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/trapping-rain-water/">42. 接雨水</a></p>
<blockquote>
<p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p>
<p>示例 1：</p>
<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/rainwatertrap.png" alt="示例1"></p>
<p>输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]<br>
输出：6<br>
解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。</p>
<p>示例 2：</p>
<p>输入：height = [4,2,0,3,2,5]<br>
输出：9</p>
<p>提示：</p>
<p>n == height.length<br>
0 &lt;= n &lt;= 3 * 104<br>
0 &lt;= height[i] &lt;= 105</p>
</blockquote>
<h3 id="相关问题"><a class="header-anchor" href="#相关问题"> </a>相关问题</h3>
<ol start="11">
<li>盛最多水的容器⭐️⭐️</li>
</ol>
<h3 id="解法1：-双指针"><a class="header-anchor" href="#解法1：-双指针"> </a>解法1： 双指针</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * @param {number[]} height
 * @return {number}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">trap</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> j <span class="token operator">=</span> height<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> leftMax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> rightMax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>leftMax<span class="token punctuation">)</span> res <span class="token operator">+=</span> leftMax <span class="token operator">-</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> leftMax <span class="token operator">=</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>rightMax<span class="token punctuation">)</span> res <span class="token operator">+=</span> rightMax <span class="token operator">-</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> rightMax <span class="token operator">=</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> 
            j<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="解法2：动态编程"><a class="header-anchor" href="#解法2：动态编程"> </a>解法2：动态编程</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * @param {number[]} height
 * @return {number}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">trap</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> leftArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> rightArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> leftMax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> rightMax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        leftMax <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> leftMax<span class="token punctuation">)</span><span class="token punctuation">;</span>
        leftArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftMax <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    height <span class="token operator">=</span> height<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rightMax <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> rightMax<span class="token punctuation">)</span><span class="token punctuation">;</span>
        rightArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>rightMax <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    rightArr <span class="token operator">=</span> rightArr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>height<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>leftArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> rightArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="提交记录-v4"><a class="header-anchor" href="#提交记录-v4"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/195905181/">通过</a></td>
<td style="text-align:left">84 ms</td>
<td style="text-align:left">39.7 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/07/15 10:01</td>
<td style="text-align:left">动态编程🚩</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/195895114/">通过</a></td>
<td style="text-align:left">76 ms</td>
<td style="text-align:left">39.6 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/07/15 09:38</td>
<td style="text-align:left">双指针🚩</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/195862948/">超出时间限制</a></td>
<td style="text-align:left">N/A</td>
<td style="text-align:left">N/A</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/07/15 01:01</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h2 id="226-翻转二叉树⭐️"><a class="header-anchor" href="#226-翻转二叉树⭐️"> </a>226. 翻转二叉树⭐️</h2>
<h3 id="题目描述-v7"><a class="header-anchor" href="#题目描述-v7"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/invert-binary-tree/">226. 翻转二叉树</a></p>
<blockquote>
<p>翻转一棵二叉树。</p>
<p><strong>示例：</strong></p>
<p>输入：</p>
<p>​      4<br>
​    /   <br>
2     7<br>
/ \   / <br>
1   3 6   9</p>
<p>输出：</p>
<p>​     4<br>
/   <br>
7     2<br>
/ \    / <br>
9   6 3   1</p>
</blockquote>
<h3 id="解法：递归"><a class="header-anchor" href="#解法：递归"> </a>解法：递归</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */</span>
<span class="token comment">/**
 * @param {TreeNode} root
 * @return {TreeNode}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">invertTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> tempNode <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
    root<span class="token punctuation">.</span>right <span class="token operator">=</span> tempNode<span class="token punctuation">;</span>

    <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> root<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="144-二叉树的前序遍历⭐️"><a class="header-anchor" href="#144-二叉树的前序遍历⭐️"> </a>144. 二叉树的前序遍历⭐️</h2>
<h3 id="题目描述-v8"><a class="header-anchor" href="#题目描述-v8"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历</a></p>
<blockquote>
<p>给你二叉树的根节点 root ，返回它节点值的 前序 遍历。</p>
<p><strong>示例 1：</strong></p>
<img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg" alt="144-1" style="zoom: 50%;">
<p>输入：root = [1,null,2,3]<br>
输出：[1,2,3]</p>
<p><strong>示例 2：</strong></p>
<p>输入：root = []<br>
输出：[]</p>
<p><strong>示例 3：</strong></p>
<p>输入：root = [1]<br>
输出：[1]</p>
<p><strong>示例 4：</strong></p>
<img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_5.jpg" alt="144-4" style="zoom: 50%;">
<p>输入：root = [1,2]<br>
输出：[1,2]</p>
<p><strong>示例 5：</strong></p>
<img src="https://assets.leetcode.com/uploads/2020/09/15/inorder_4.jpg" alt="144-5" style="zoom:50%;">
<p>输入：root = [1,null,2]<br>
输出：[1,2]</p>
<p><strong>提示：</strong></p>
<p>树中节点数目在范围 [0, 100] 内<br>
-100 &lt;= Node.val &lt;= 100</p>
</blockquote>
<h3 id="解法：递归-v2"><a class="header-anchor" href="#解法：递归-v2"> </a>解法：递归</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */</span>
<span class="token comment">/**
 * @param {TreeNode} root
 * @return {number[]}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">preorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="提交记录-v5"><a class="header-anchor" href="#提交记录-v5"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/190255438/">通过</a></td>
<td style="text-align:left">120 ms</td>
<td style="text-align:left">38.8 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/06/27 23:03</td>
<td style="text-align:left">递归📝</td>
</tr>
</tbody>
</table>
<h1 id="剑指OFFER"><a class="header-anchor" href="#剑指OFFER"> </a>剑指OFFER</h1>
<h2 id="剑指-Offer-03-数组中重复的数字⭐️"><a class="header-anchor" href="#剑指-Offer-03-数组中重复的数字⭐️"> </a>剑指 Offer 03. 数组中重复的数字⭐️</h2>
<h3 id="题目描述-v9"><a class="header-anchor" href="#题目描述-v9"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 03. 数组中重复的数字</a></p>
<blockquote>
<p>找出数组中重复的数字。</p>
<p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>
<p><strong>示例 1：</strong></p>
<p>输入：<br>
[2, 3, 1, 0, 2, 5, 3]<br>
输出：2 或 3</p>
<p><strong>限制：</strong></p>
<p>2 &lt;= n &lt;= 100000</p>
</blockquote>
<h3 id="解法1：暴力-v2"><a class="header-anchor" href="#解法1：暴力-v2"> </a>解法1：暴力</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//暴力</span>
<span class="token comment">/**
 * @param {number[]} nums
 * @return {number}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">findRepeatNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>时间复杂度</strong>：<em>O(N<sup>2</sup>)</em></p>
<h3 id="解法2：数组占位"><a class="header-anchor" href="#解法2：数组占位"> </a>解法2：数组占位</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//数组占位</span>
<span class="token comment">/**
 * @param {number[]} nums
 * @return {number}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">findRepeatNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        temp<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>时间复杂度</strong>：<em>O(N)</em></p>
<h3 id="解法3：哈希表"><a class="header-anchor" href="#解法3：哈希表"> </a>解法3：哈希表</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//哈希表</span>
<span class="token comment">/**
 * @param {number[]} nums
 * @return {number}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">findRepeatNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>时间复杂度</strong>：<em>O(N)</em></p>
<h3 id="提交记录-v6"><a class="header-anchor" href="#提交记录-v6"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/175544047/">通过</a></td>
<td style="text-align:left">120 ms</td>
<td style="text-align:left">45.6 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/08 19:12</td>
<td style="text-align:left">哈希表🚩</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/175543222/">通过</a></td>
<td style="text-align:left">100 ms</td>
<td style="text-align:left">44.4 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/08 19:07</td>
<td style="text-align:left">数组占位🚩</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/175542057/">通过</a></td>
<td style="text-align:left">1392 ms</td>
<td style="text-align:left">42.9 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/08 19:00</td>
<td style="text-align:left">暴力解法</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-04-二维数组中的查找⭐️⭐️"><a class="header-anchor" href="#剑指-Offer-04-二维数组中的查找⭐️⭐️"> </a>剑指 Offer 04. 二维数组中的查找⭐️⭐️</h2>
<h3 id="题目描述-v10"><a class="header-anchor" href="#题目描述-v10"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">剑指 Offer 04. 二维数组中的查找</a></p>
<blockquote>
<p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<p><strong>示例:</strong></p>
<p>现有矩阵 matrix 如下：</p>
<p>[<br>
[1,   4,  7, 11, 15],<br>
[2,   5,  8, 12, 19],<br>
[3,   6,  9, 16, 22],<br>
[10, 13, 14, 17, 24],<br>
[18, 21, 23, 26, 30]<br>
]<br>
给定 target = 5，返回 true。</p>
<p>给定 target = 20，返回 false。</p>
<p><strong>限制：</strong></p>
<p>0 &lt;= n &lt;= 1000</p>
<p>0 &lt;= m &lt;= 1000</p>
</blockquote>
<h3 id="解法：坐标法"><a class="header-anchor" href="#解法：坐标法"> </a>解法：坐标法</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//坐标法/** * @param {number[][]} matrix * @param {number} target * @return {boolean} */var findNumberIn2DArray = function(matrix, target) {    if(!matrix[0]) return false;    let y = 0;    let x = matrix[0].length - 1;    while(y&lt;matrix.length &amp;&amp; x&gt;=0){        if(target == matrix[y][x]) return true;        else if(target &gt; matrix[y][x]) {            y++; //下移        }        else {            x--; //上移        }    }    return false;};</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="提交记录-v7"><a class="header-anchor" href="#提交记录-v7"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/175604395/">通过</a></td>
<td style="text-align:left">88 ms</td>
<td style="text-align:left">41 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/08 22:40</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-05-替换空格⭐️"><a class="header-anchor" href="#剑指-Offer-05-替换空格⭐️"> </a>剑指 Offer 05. 替换空格⭐️</h2>
<h3 id="题目描述-v11"><a class="header-anchor" href="#题目描述-v11"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></p>
<blockquote>
<p>请实现一个函数，把字符串 s 中的每个空格替换成"%20"。</p>
<p><strong>示例 1：</strong></p>
<p>输入：s = “We are happy.”<br>
输出：“We%20are%20happy.”</p>
<p><strong>限制：</strong></p>
<p>0 &lt;= s 的长度 &lt;= 10000</p>
</blockquote>
<h3 id="解法1：调用函数"><a class="header-anchor" href="#解法1：调用函数"> </a>解法1：调用函数</h3>
<ul>
<li><code>repleace/replaceAll</code></li>
<li><code>encodeURIComponent</code></li>
<li><code>split/join</code></li>
</ul>
<h3 id="解法2：原地修改"><a class="header-anchor" href="#解法2：原地修改"> </a>解法2：原地修改</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//原地修改/** * @param {string} s * @return {string} */var replaceSpace = function(s) {    s = s.split(''); //将字符串变为数组    let oldLength = s.length;    let countSpace = 0;    for(let i=0; i&lt;s.length; i++){        if(s[i] == ' '){            countSpace++;        }    }    s.length += countSpace * 2; //注意是2，不是3    let i = s.length-1; //指向s末尾    let j = oldLength-1; //指向有效字符串    for(; j&gt;=0; i--, j--){        if(s[j] == ' '){            s[i] = '0';            s[--i] = '2';            s[--i] = '%';        }        else{            s[i] = s[j];        }    }    return s.join('');};</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>思路：</strong><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/solution/tu-jie-guan-fang-tui-jian-ti-jie-ti-huan-3l74/">【原地修改】替换空格</a></p>
<h3 id="提交记录-v8"><a class="header-anchor" href="#提交记录-v8"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/175623934/">通过</a></td>
<td style="text-align:left">84 ms</td>
<td style="text-align:left">37.7 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/09 00:21</td>
<td style="text-align:left">原地修改🚩</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/175606891/">通过</a></td>
<td style="text-align:left">84 ms</td>
<td style="text-align:left">37.7 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/08 22:51</td>
<td style="text-align:left">replaceAll()</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-06-从尾到头打印链表⭐️"><a class="header-anchor" href="#剑指-Offer-06-从尾到头打印链表⭐️"> </a>剑指 Offer 06. 从尾到头打印链表⭐️</h2>
<h3 id="题目描述-v12"><a class="header-anchor" href="#题目描述-v12"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">剑指 Offer 06. 从尾到头打印链表</a></p>
<blockquote>
<p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p>
<p><strong>示例 1：</strong></p>
<p>输入：head = [1,3,2]<br>
输出：[2,3,1]</p>
<p><strong>限制：</strong></p>
<p>0 &lt;= 链表长度 &lt;= 10000</p>
</blockquote>
<h3 id="解法1：反转数组"><a class="header-anchor" href="#解法1：反转数组"> </a>解法1：反转数组</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */</span>
<span class="token comment">/**
 * @param {ListNode} head
 * @return {number[]}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">reversePrint</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">{</span>
        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token punctuation">(</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">let</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">[</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="解法2：模拟栈"><a class="header-anchor" href="#解法2：模拟栈"> </a>解法2：模拟栈</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token operator">/</span><span class="token operator">**</span> <span class="token operator">*</span> @param <span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span> head <span class="token operator">*</span> @<span class="token keyword">return</span> <span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">var</span> <span class="token function-variable function">reversePrint</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">{</span>        heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// while(heap){    //     arr.push(heap.pop);    // }    for(let i=0; i&lt;length; i++){        arr[i] = heap.pop();    }    return arr;};</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="解法3：unshift"><a class="header-anchor" href="#解法3：unshift"> </a>解法3：unshift()</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token operator">/</span><span class="token operator">**</span> <span class="token operator">*</span> @param <span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span> head <span class="token operator">*</span> @<span class="token keyword">return</span> <span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">var</span> <span class="token function-variable function">reversePrint</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="提交记录-v9"><a class="header-anchor" href="#提交记录-v9"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/175630959/">通过</a></td>
<td style="text-align:left">88 ms</td>
<td style="text-align:left">40 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/09 01:18</td>
<td style="text-align:left">unshift()🚩</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/175630776/">通过</a></td>
<td style="text-align:left">100 ms</td>
<td style="text-align:left">40.3 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/09 01:18</td>
<td style="text-align:left">栈🚩</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/175630070/">通过</a></td>
<td style="text-align:left">116 ms</td>
<td style="text-align:left">39.9 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/09 01:05</td>
<td style="text-align:left">反转数组</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-07-重建二叉树⭐️⭐️"><a class="header-anchor" href="#剑指-Offer-07-重建二叉树⭐️⭐️"> </a>剑指 Offer 07. 重建二叉树⭐️⭐️</h2>
<h3 id="题目描述-v13"><a class="header-anchor" href="#题目描述-v13"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/">剑指 Offer 07. 重建二叉树</a></p>
<blockquote>
<p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p>
<p><strong>例如</strong>，给出</p>
<p>前序遍历 preorder = [3,9,20,15,7]<br>
中序遍历 inorder = [9,3,15,20,7]<br>
返回如下的二叉树：</p>
<pre class="line-numbers language-none"><code class="language-none">3/ \9  20/  \15   7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>限制：</strong></p>
<p>0 &lt;= 节点个数 &lt;= 5000</p>
</blockquote>
<h3 id="解法：分治思想（递归）"><a class="header-anchor" href="#解法：分治思想（递归）"> </a>解法：分治思想（递归）</h3>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } */</span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span> <span class="token annotation punctuation">@param</span> <span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span> preorder <span class="token operator">*</span> <span class="token annotation punctuation">@param</span> <span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span> inorder <span class="token operator">*</span> <span class="token annotation punctuation">@return</span> <span class="token punctuation">{</span><span class="token class-name">TreeNode</span><span class="token punctuation">}</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">var</span> buildTree <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>preorder<span class="token punctuation">.</span>length <span class="token operator">||</span> <span class="token operator">!</span>inorder<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> rootVal <span class="token operator">=</span> preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> rootNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span><span class="token punctuation">;</span>    let i <span class="token operator">=</span> inorder<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>rootVal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//前序数组中根结点的下标，也是左子树的结点数    rootNode.left = buildTree(preorder.slice(1, i+1), inorder.slice(0, i));    rootNode.right = buildTree(preorder.slice(i+1), inorder.slice(i+1));    return rootNode;};</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="提交记录-v10"><a class="header-anchor" href="#提交记录-v10"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/175632621/">通过</a></td>
<td style="text-align:left">168 ms</td>
<td style="text-align:left">110.6 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/09 01:59</td>
<td style="text-align:left">分治思想🚩</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-09-用两个栈实现队列⭐️"><a class="header-anchor" href="#剑指-Offer-09-用两个栈实现队列⭐️"> </a>剑指 Offer 09. 用两个栈实现队列⭐️</h2>
<h3 id="题目描述-v14"><a class="header-anchor" href="#题目描述-v14"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">剑指 Offer 09. 用两个栈实现队列</a></p>
<blockquote>
<p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p>
<p><strong>示例 1：</strong></p>
<p>输入：<br>
[“CQueue”,“appendTail”,“deleteHead”,“deleteHead”]<br>
[[],[3],[],[]]<br>
输出：[null,null,3,-1]</p>
<p><strong>示例 2：</strong></p>
<p>输入：<br>
[“CQueue”,“deleteHead”,“appendTail”,“appendTail”,“deleteHead”,“deleteHead”]<br>
[[],[],[5],[2],[],[]]<br>
输出：[null,-1,null,null,5,2]</p>
<p><strong>提示：</strong></p>
<p>1 &lt;= values &lt;= 10000<br>
最多会对 appendTail、deleteHead 进行 10000 次调用</p>
</blockquote>
<h3 id="解法：两个栈实现队列"><a class="header-anchor" href="#解法：两个栈实现队列"> </a>解法：两个栈实现队列</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">CQueue</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stackA <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stackB <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/**  * @param {number} value * @return {void} */</span><span class="token class-name">CQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">appendTail</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stackA<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * @return {number} */</span><span class="token class-name">CQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">deleteHead</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stackB<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stackB<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stackA<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>stackB<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stackA<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>stackB<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stackB<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * Your CQueue object will be instantiated and called as such: * var obj = new CQueue() * obj.appendTail(value) * var param_2 = obj.deleteHead() */</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>思路</strong></p>
<p><a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/solution/tu-jie-guan-fang-tui-jian-ti-jie-yong-li-yjbf/">【栈】用两个栈实现队列</a></p>
<h3 id="提交记录-v11"><a class="header-anchor" href="#提交记录-v11"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/176673390/">通过</a></td>
<td style="text-align:left">424 ms</td>
<td style="text-align:left">49.4 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/12 10:58</td>
<td style="text-align:left">两个栈实现队列🚩</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-10-I-斐波那契数列-⭐️"><a class="header-anchor" href="#剑指-Offer-10-I-斐波那契数列-⭐️"> </a>剑指 Offer 10- I. 斐波那契数列 ⭐️</h2>
<h3 id="题目描述-v15"><a class="header-anchor" href="#题目描述-v15"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/">剑指 Offer 10- I. 斐波那契数列</a></p>
<blockquote>
<p>写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。斐波那契数列的定义如下：</p>
<p>F(0) = 0,   F(1) = 1<br>
F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.<br>
斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。</p>
<p><strong>答案需要取模 1e9+7</strong>（1000000007），如计算初始结果为：1000000008，请返回 1。</p>
<p><strong>示例 1：</strong></p>
<p>输入：n = 2<br>
输出：1</p>
<p><strong>示例 2：</strong></p>
<p>输入：n = 5<br>
输出：5</p>
<p><strong>提示：</strong></p>
<p>0 &lt;= n &lt;= 100</p>
</blockquote>
<h3 id="解法1：递归"><a class="header-anchor" href="#解法1：递归"> </a>解法1：递归</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number} n * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">fib</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>超出时间限制</strong></p>
<h3 id="解法2：动态规划-数组"><a class="header-anchor" href="#解法2：动态规划-数组"> </a>解法2：动态规划-数组</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number} n * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">fib</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="解法3：动态规划"><a class="header-anchor" href="#解法3：动态规划"> </a>解法3：动态规划</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number} n * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">fib</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> b<span class="token punctuation">;</span>        b <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>思路</strong></p>
<p><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/solution/mian-shi-ti-10-i-fei-bo-na-qi-shu-lie-dong-tai-gui/">面试题10- I. 斐波那契数列（动态规划，清晰图解）</a></p>
<h3 id="何为动态规划？"><a class="header-anchor" href="#何为动态规划？"> </a>何为动态规划？</h3>
<p>已知问题规模为n的前提A，求解一个未知解B。（我们用An表示“问题规模为n的已知条件”）</p>
<p>此时，如果把问题规模降到0，即已知A0，可以得到A0-&gt;B.</p>
<ul>
<li>
<p>如果从A0添加一个元素，得到A1的变化过程。即A0-&gt;A1; 进而有A1-&gt;A2; A2-&gt;A3; …… ; Ai-&gt;Ai+1. <em>这就是严格的归纳推理，也就是我们经常使用的<strong>数学归纳法</strong>；</em></p>
</li>
<li>
<p>对于Ai+1，只需要它的上一个状态Ai即可完成整个推理过程（而不需要更前序的状态）。<em>我们将这一模型称为<strong>马尔科夫模型</strong>。对应的推理过程叫做“<strong>贪心法</strong>”。</em></p>
</li>
</ul>
<p>然而，Ai与Ai+1往往不是互为充要条件，随着i的增加，有价值的前提信息越来越少，我们无法仅仅通过上一个状态得到下一个状态，因此可以采用如下方案：</p>
<ul>
<li>{A1-&gt;A2}; {A1, A2-&gt;A3}; {A1,A2,A3-&gt;A4};……; {A1,A2,…,Ai}-&gt;Ai+1. 这种方式就是第二数学归纳法。</li>
<li>对于Ai+1需要前面的所有前序状态才能完成推理过程。<em>我们将这一模型称为<strong>高阶马尔科夫模型</strong>。对应的推理过程叫做“<strong>动态规划法</strong>”。</em></li>
</ul>
<p>参考资料：<a href="https://blog.csdn.net/zw6161080123/article/details/80639932">六大算法之三：动态规划</a></p>
<h3 id="提交记录-v12"><a class="header-anchor" href="#提交记录-v12"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/176749910/">通过</a></td>
<td style="text-align:left">92 ms</td>
<td style="text-align:left">37.6 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/12 14:44</td>
<td style="text-align:left">动态规划🚩</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/176735438/">通过</a></td>
<td style="text-align:left">100 ms</td>
<td style="text-align:left">37.8 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/12 13:51</td>
<td style="text-align:left">动态规划：数组🚩</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/176685912/">超出时间限制</a></td>
<td style="text-align:left">N/A</td>
<td style="text-align:left">N/A</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/12 11:04</td>
<td style="text-align:left">递归</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-10-II-青蛙跳台阶问题-⭐️"><a class="header-anchor" href="#剑指-Offer-10-II-青蛙跳台阶问题-⭐️"> </a>剑指 Offer 10- II. 青蛙跳台阶问题 ⭐️</h2>
<h3 id="题目描述-v16"><a class="header-anchor" href="#题目描述-v16"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/">剑指 Offer 10- II. 青蛙跳台阶问题</a></p>
<blockquote>
<p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p>
<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>
<p><strong>示例 1：</strong></p>
<p>输入：n = 2<br>
输出：2</p>
<p><strong>示例 2：</strong></p>
<p>输入：n = 7<br>
输出：21</p>
<p><strong>示例 3：</strong></p>
<p>输入：n = 0<br>
输出：1</p>
<p><strong>提示：</strong></p>
<p>0 &lt;= n &lt;= 100</p>
</blockquote>
<h3 id="解法：动态规划"><a class="header-anchor" href="#解法：动态规划"> </a>解法：动态规划</h3>
<p><strong>思路</strong></p>
<p><a href="https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/solution/mian-shi-ti-10-ii-qing-wa-tiao-tai-jie-wen-ti-dong/">面试题10- II. 青蛙跳台阶问题（动态规划，清晰图解）</a></p>
<blockquote>
<p>此类求<strong>多少种可能性</strong>的题目一般都有 递推性质 ，即 f(n)和f(n−1)…f(1)之间是有联系的。</p>
</blockquote>
<p>设跳上n级台阶有f(n)种跳法。在所有跳法中，青蛙的最后一步只有两种情况：跳上1级或2级台阶。</p>
<ul>
<li>当为1级台阶： 剩n-1个台阶，此情况共有f(n-1)种跳法；</li>
<li>当为2级台阶： 剩n-2个台阶，此情况共有f(n-2)种跳法。</li>
</ul>
<p>f(n)为以上两种情况之和，即<code>f(n) = f(n-1) + f(n-2)</code>，以上递推性质为斐波那契数列。</p>
<p>本题可转化为求斐波那契数列第n项的值 ，与<a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/solution/mian-shi-ti-10-i-fei-bo-na-qi-shu-lie-dong-tai-gui/">面试题10- I. 斐波那契数列</a>等价，<strong>唯一的不同在于起始数字不同</strong>。<br>
青蛙跳台阶问题：f(0)=1, f(1)=1, f(2)=2；<br>
斐波那契数列问题：f(0)=0, f(1)=1, f(2)=1。</p>
<p><img src="https://pic.leetcode-cn.com/108249e4d62d429f9cd6cab5bbd6afca581ee61c7d762a4c8ea0c62e08e10762-Picture13.png" alt="图解"></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * @param {number} n
 * @return {number}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">numWays</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> sum<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        sum <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
        a <span class="token operator">=</span> b<span class="token punctuation">;</span>
        b <span class="token operator">=</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="提交记录-v13"><a class="header-anchor" href="#提交记录-v13"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/176752970/">通过</a></td>
<td style="text-align:left">76 ms</td>
<td style="text-align:left">37.6 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/12 14:59</td>
<td style="text-align:left">动态规划🚩</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-11-旋转数组的最小数字⭐️"><a class="header-anchor" href="#剑指-Offer-11-旋转数组的最小数字⭐️"> </a>剑指 Offer 11. 旋转数组的最小数字⭐️</h2>
<h3 id="题目描述-v17"><a class="header-anchor" href="#题目描述-v17"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/">剑指 Offer 11. 旋转数组的最小数字</a></p>
<blockquote>
<p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。</p>
<p>示例 1：</p>
<p>输入：[3,4,5,1,2]<br>
输出：1</p>
<p>示例 2：</p>
<p>输入：[2,2,2,0,1]<br>
输出：0</p>
</blockquote>
<h3 id="解法1：从后往前找最小值"><a class="header-anchor" href="#解法1：从后往前找最小值"> </a>解法1：从后往前找最小值</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//从后往前找最小值/** * @param {number[]} numbers * @return {number} */var minArray = function(numbers) {    let min = numbers.pop();    while(numbers.length){        let temp = numbers.pop();        if(temp &lt;= min){            min = temp;        }        else break;    }    return min;};</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="解法2：二分法"><a class="header-anchor" href="#解法2：二分法"> </a>解法2：二分法</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//二分法/** * @param {number[]} numbers * @return {number} */var minArray = function(numbers) {    let left = 0;     let right = numbers.length - 1;        while(left&lt;right){        let middle = Math.floor((left+right)/2);        if(numbers[middle]&gt;numbers[right]) left = middle + 1;        else if(numbers[middle]&lt;numbers[right]) right = middle;        else right--; //题解中有解释：                      //right--只需证明每次执行此操作后，                      //旋转点x仍在[left, right]区间内即可    }    return numbers[left];};</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>思路</strong></p>
<p><a href="https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/solution/mian-shi-ti-11-xuan-zhuan-shu-zu-de-zui-xiao-shu-3/">面试题11. 旋转数组的最小数字（二分法，清晰图解）</a></p>
<p><strong>补充思考：为什么本题二分法不用numbers[middle]和numbers[left]作比较？</strong></p>
<p>二分目的是判断middle在哪个排序数组中，从而缩小区间。</p>
<p>而在numbers[middle] &gt; numbers[left]情况下，无法判断middle在哪个排序数组中。本质上是由于right初始值肯定在右排序数组中； left初始值无法确定在哪个排序数组中。</p>
<p>举例如下：</p>
<p>对于以下两示例，当left = 0, right = 4, middle = 2时，有numbers[middle] &gt; numbers[left]，而结果不同。<br>
[1, 2, 3, 4 ,5] 旋转点 x = 0：middle在右排序数组（此示例只有右排序数组）；<br>
[3, 4, 5, 1 ,2] 旋转点 x = 3：middle在左排序数组。</p>
<h2 id="剑指-Offer-12-矩阵中的路径⭐️⭐️"><a class="header-anchor" href="#剑指-Offer-12-矩阵中的路径⭐️⭐️"> </a>剑指 Offer 12. 矩阵中的路径⭐️⭐️</h2>
<h3 id="题目描述-v18"><a class="header-anchor" href="#题目描述-v18"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/">剑指 Offer 12. 矩阵中的路径</a></p>
<blockquote>
<p>给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。</p>
<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p>
<p>例如，在下面的 3×4 的矩阵中包含单词 “ABCCED”（单词中的字母已标出）。</p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/04/word2.jpg" alt="示例"></p>
<p><strong>示例 1：</strong></p>
<p>输入：board = [[“A”,“B”,“C”,“E”],[“S”,“F”,“C”,“S”],[“A”,“D”,“E”,“E”]], word = “ABCCED”<br>
输出：true</p>
<p><strong>示例 2：</strong></p>
<p>输入：board = [[“a”,“b”],[“c”,“d”]], word = “abcd”<br>
输出：false</p>
<p><strong>提示：</strong></p>
<p>1 &lt;= board.length &lt;= 200<br>
1 &lt;= board[i].length &lt;= 200<br>
board 和 word 仅由大小写英文字母组成</p>
</blockquote>
<h3 id="解法：DFS-剪枝"><a class="header-anchor" href="#解法：DFS-剪枝"> </a>解法：DFS+剪枝</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//DFS+剪枝/** * @param {character[][]} board * @param {string} word * @return {boolean} */var exist = function(board, word) {    for(let i=0; i&lt;board[0].length; i++){        for(let j=0; j&lt;board.length; j++){            //遍历board找到word的第一个字符            if(dfs(board, word, i, j, 0)) return true;        }    }    return false;};//深度优先搜索（DFS)var dfs = function(board, word, x, y, index){    if(x&lt;0 || x&gt;board[0].length || y&lt;0 || y&gt;=board.length || board[y][x]!==word[index]) return false;    else if(index === word.length-1) return true; //说明遍历结束    else{        let letter = board[y][x];        board[y][x] = '-'; //上锁        let res = dfs(board, word, x-1, y, index+1)||dfs(board, word, x+1, y, index+1)||dfs(board, word, x, y-1, index+1)||dfs(board, word, x, y+1, index+1);        board[y][x] = letter; //恢复现场        return res;    }}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>思路</strong></p>
<p><a href="https://leetcode-cn.com/problems/ju-zhen-zhong-de-lu-jing-lcof/solution/mian-shi-ti-12-ju-zhen-zhong-de-lu-jing-shen-du-yo/">面试题12. 矩阵中的路径（ DFS + 剪枝 ，清晰图解）</a></p>
<p>本问题是典型的矩阵搜索问题，可使用<code>深度优先搜索（DFS）+ 剪枝</code>解决。</p>
<ul>
<li>深度优先搜索： 可以理解为暴力法遍历矩阵中所有字符串可能性。DFS 通过递归，先朝一个方向搜到底，再回溯至上个节点，沿另一个方向搜索，以此类推。</li>
<li>剪枝： 在搜索中，遇到<code>这条路不可能和目标字符串匹配成功</code>的情况（例如：此矩阵元素和目标字符不同、此元素已被访问），则应立即返回，称之为<code>可行性剪枝</code>。</li>
</ul>
<p><img src="https://pic.leetcode-cn.com/1604944042-glmqJO-Picture0.png" alt="剪枝示例图"></p>
<h3 id="提交记录-v14"><a class="header-anchor" href="#提交记录-v14"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/177073053/">通过</a></td>
<td style="text-align:left">116 ms</td>
<td style="text-align:left">42.1 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/13 13:38</td>
<td style="text-align:left">dfs递归+剪枝🚩</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-13-机器人的运动范围"><a class="header-anchor" href="#剑指-Offer-13-机器人的运动范围"> </a>剑指 Offer 13. 机器人的运动范围</h2>
<h3 id="题目描述-v19"><a class="header-anchor" href="#题目描述-v19"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/">剑指 Offer 13. 机器人的运动范围</a></p>
<blockquote>
<p>地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？</p>
<p>示例 1：</p>
<p>输入：m = 2, n = 3, k = 1<br>
输出：3</p>
<p>示例 2：</p>
<p>输入：m = 3, n = 1, k = 0<br>
输出：1</p>
<p>提示：</p>
<p>1 &lt;= n,m &lt;= 100<br>
0 &lt;= k &lt;= 20</p>
</blockquote>
<h3 id="解法：DFS-剪枝-v2"><a class="header-anchor" href="#解法：DFS-剪枝-v2"> </a>解法：DFS+剪枝</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number} m * @param {number} n * @param {number} k * @return {number} */</span><span class="token keyword">var</span> <span class="token function-variable function">movingCount</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> memory <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        memory<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            memory<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> memory</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token operator">===</span>m <span class="token operator">||</span> col<span class="token operator">===</span>n <span class="token operator">||</span> memory<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">digitsSum</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">digitsSum</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token operator">&gt;</span>k<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            memory<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> memory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> memory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> memory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">digitsSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>思路</strong></p>
<p><a href="https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/solution/javachao-100-dfsjian-zhi-jian-dan-dai-ma-x58v/">Java超100% DFS+剪枝 简单代码</a></p>
<h2 id="剑指-Offer-14-I-剪绳子"><a class="header-anchor" href="#剑指-Offer-14-I-剪绳子"> </a>剑指 Offer 14- I. 剪绳子</h2>
<h3 id="题目描述-v20"><a class="header-anchor" href="#题目描述-v20"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/jian-sheng-zi-lcof/">剑指 Offer 14- I. 剪绳子</a></p>
<blockquote>
<p>给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 k[0],k[1]…k[m-1] 。请问 k[0] * k[1] * … * k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p>
<p><strong>示例 1：</strong></p>
<p>输入: 2<br>
输出: 1<br>
解释: 2 = 1 + 1, 1 × 1 = 1</p>
<p><strong>示例 2:</strong></p>
<p>输入: 10<br>
输出: 36<br>
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36</p>
<p><strong>提示：</strong></p>
<p>2 &lt;= n &lt;= 58</p>
</blockquote>
<h3 id="解法1：动态规划"><a class="header-anchor" href="#解法1：动态规划"> </a>解法1：动态规划</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//动态规划</span>
<span class="token comment">/**
 * @param {number} n
 * @return {number}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">cuttingRope</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//dp[len]表示绳长为len时的最大乘积</span>
    dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> len<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> len<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> len<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> cutLen<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> cutLen<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> cutLen<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">,</span> 
                               Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>cutLen<span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token operator">-</span>cutLen<span class="token punctuation">)</span><span class="token punctuation">,</span> cutLen<span class="token operator">*</span>dp<span class="token punctuation">[</span>len<span class="token operator">-</span>cutLen<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>思路</strong></p>
<p><a href="https://leetcode-cn.com/problems/jian-sheng-zi-lcof/solution/jian-zhi-offer-14-i-jian-sheng-zi-huan-s-xopj/">剑指 Offer 14- I. 剪绳子，还是动态规划好理解，但是贪心真的快</a></p>
<p>我们想要求长度为n的绳子剪掉后的最大乘积，可以从前面比n小的绳子转移而来</p>
<ul>
<li>用一个dp数组记录从0到n长度的绳子剪掉后的最大乘积，也就是<code>dp[len]</code>表示长度为len的绳子剪成m段后的最大乘积，初始化dp[2] = 1</li>
<li>我们先把绳子剪掉第一段（长度为cutLen），如果只剪掉长度为1，对最后的乘积无任何增益，所以从长度为2开始剪</li>
<li>剪了第一段后，剩下(len - cutLen)长度可以剪也可以不剪。
<ul>
<li>如果不剪的话长度乘积即为cutLen * (len - cutLen)；</li>
<li>如果剪的话长度乘积即为cutLen * dp[len - cutLen]。</li>
<li>取两者最大值<code>max(cutLen * (len - cutLen), cutLen * dp[len - cutLen])</code></li>
</ul>
</li>
<li>判断第一段长度cutLen的取值范围为[2, len)</li>
<li>通过不同的cutLen，求出了很多的dp[len]，取其中的最大值，因此最终<code>dp[len]的转移方程</code>为<code>dp[len] = max(dp[len], max(cutLen * (len - cutLen), cutLen * dp[len - cutLen]))</code></li>
<li>最后返回dp[n]即可</li>
</ul>
<h3 id="解法2：贪心算法"><a class="header-anchor" href="#解法2：贪心算法"> </a>解法2：贪心算法</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//贪心算法</span>
<span class="token comment">/**
 * @param {number} n
 * @return {number}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">cuttingRope</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">//当n≤3时，按照规则应不切分，但由于题目要求必须剪成m&gt;1段，因此必须剪出一段长度为1的绳子，即返回n-1。</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">)</span> res <span class="token operator">*=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span><span class="token punctuation">{</span>
        res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        n <span class="token operator">%=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 余数=0时，直接返回res</span>
        <span class="token comment">// 余数=1时，要将一个1+3转换为2+2，因此返回 3^{a-1} * 4</span>
        <span class="token comment">// 余数=2时，返回 3^a * 2</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> res <span class="token operator">*=</span> n<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> res <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>思路</strong></p>
<p><a href="https://leetcode-cn.com/problems/jian-sheng-zi-lcof/solution/mian-shi-ti-14-i-jian-sheng-zi-tan-xin-si-xiang-by/">面试题14- I. 剪绳子（数学推导 / 贪心思想，清晰图解）</a></p>
<p>上文证明了两个重要结论：<code>① 当所有绳段长度相等时，乘积最大。</code> <code>② 最优的绳段长度为3。</code></p>
<h3 id="提交记录-v15"><a class="header-anchor" href="#提交记录-v15"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/177182177/">通过</a></td>
<td style="text-align:left">92 ms</td>
<td style="text-align:left">37.8 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/13 18:25</td>
<td style="text-align:left">贪心算法🚩</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/177131721/">通过</a></td>
<td style="text-align:left">88 ms</td>
<td style="text-align:left">37.7 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/13 16:13</td>
<td style="text-align:left">动态规划🚩</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-14-II-剪绳子-II⭐️⭐️"><a class="header-anchor" href="#剑指-Offer-14-II-剪绳子-II⭐️⭐️"> </a>剑指 Offer 14- II. 剪绳子 II⭐️⭐️</h2>
<h3 id="题目描述-v21"><a class="header-anchor" href="#题目描述-v21"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof/">剑指 Offer 14- II. 剪绳子 II</a></p>
<blockquote>
<p>给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为 k[0],k[1]…k[m - 1] 。请问 k[0]<em>k[1]</em>…*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p>
<p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p>
<p><strong>示例 1：</strong></p>
<p>输入: 2<br>
输出: 1<br>
解释: 2 = 1 + 1, 1 × 1 = 1</p>
<p><strong>示例 2:</strong></p>
<p>输入: 10<br>
输出: 36<br>
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36</p>
<p><strong>提示：</strong></p>
<p>2 &lt;= n &lt;= 1000</p>
</blockquote>
<h3 id="解法：BigInt-动态规划"><a class="header-anchor" href="#解法：BigInt-动态规划"> </a>解法：BigInt + 动态规划</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//BigInt + 动态规划/** * @param {number} n * @return {number} */var cuttingRope = function(n) {    let dp = new Array(n).fill(BigInt(1));    for (let i = 0; i &lt; n; i++) {        for (let j = i - 1; j &gt;= 0; j--) {            dp[i] = max(dp[i], dp[j] * BigInt((i - j)), BigInt((j + 1) * (i - j)));        }    }    return dp[n - 1] % (1000000007n);};//因为Math.max不能求BigInt类型的最值，所以我们自己写一个max函数判断最值const max = (...args) =&gt; args.reduce((prev, curr) =&gt; prev &gt; curr ? prev : curr)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>补充资料：<a href="https://www.baidu.com/link?url=FX-P-3T8AHKnpUJwila0s8rMT3YmAHssOcWnWwSxx2Os89LzVEmhK6x57oO44HhNkLU_hWSvuB5YMsr18xGRtNrIPXgd4UE-c9EpxkFS-iVEy6H_dwZyZNJ0lpG-O3xPentJc9_drrdL8gVLWA32xa&amp;wd=&amp;eqid=ba2de6cd003b688400000006609f3c8e">BigInt - JavaScript | MDN</a></p>
<h3 id="提交记录-v16"><a class="header-anchor" href="#提交记录-v16"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/177620071/">通过</a></td>
<td style="text-align:left">824 ms</td>
<td style="text-align:left">43.9 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/15 10:29</td>
<td style="text-align:left">BigInt+动态规划🚩</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-15-二进制中1的个数⭐️"><a class="header-anchor" href="#剑指-Offer-15-二进制中1的个数⭐️"> </a>剑指 Offer 15. 二进制中1的个数⭐️</h2>
<h3 id="题目描述-v22"><a class="header-anchor" href="#题目描述-v22"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/">剑指 Offer 15. 二进制中1的个数</a></p>
<blockquote>
<p>请实现一个函数，输入一个整数（以二进制串形式），输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。</p>
<p>示例 1：</p>
<p>输入：00000000000000000000000000001011<br>
输出：3<br>
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 ‘1’。</p>
<p><strong>示例 2：</strong></p>
<p>输入：00000000000000000000000010000000<br>
输出：1<br>
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 ‘1’。</p>
<p><strong>示例 3：</strong></p>
<p>输入：11111111111111111111111111111101<br>
输出：31<br>
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 ‘1’。</p>
<p><strong>提示：</strong></p>
<p>输入必须是长度为 32 的 二进制串 。</p>
</blockquote>
<h3 id="解法1：位运算-逐位判断"><a class="header-anchor" href="#解法1：位运算-逐位判断"> </a>解法1：位运算-逐位判断</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//位运算-逐位判断/** * @param {number} n - a positive integer * @return {number} */var hammingWeight = function(n) {    let res = 0;    while(n != 0){        if(n &amp; 1 == 1) res++;        n &gt;&gt;&gt;= 1;    }    return res;};</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>补充材料：<a href="https://www.baidu.com/link?url=Q5buyUF7pUEimxLfuQbnSTXKctehLQz6H5w-6DH1mH19IiIn_cbCJHW6WDnpQiwt&amp;wd=&amp;eqid=de23a5920047b69c00000006609f3e6a">JS移位运算符(&lt;&lt;、&gt;&gt;和&gt;&gt;&gt;)</a></p>
<h3 id="解法2：位运算-巧用n-n-1"><a class="header-anchor" href="#解法2：位运算-巧用n-n-1"> </a>解法2：位运算-巧用n&amp;(n-1)</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//位运算-巧用n&amp;(n-1)/** * @param {number} n - a positive integer * @return {number} */var hammingWeight = function(n) {    let res = 0;    while(n != 0){        n &amp;= (n-1);        res++;    }    return res;};</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>思路</strong></p>
<p><img src="https://pic.leetcode-cn.com/9bc8ab7ba242888d5291770d35ef749ae76ee2f1a51d31d729324755fc4b1b1c-Picture10.png" alt="n&amp;(n-1)"></p>
<h3 id="提交记录-v17"><a class="header-anchor" href="#提交记录-v17"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/177634769/">通过</a></td>
<td style="text-align:left">120 ms</td>
<td style="text-align:left">39.1 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/15 11:24</td>
<td style="text-align:left">位运算-巧用n&amp;(n-1)🚩</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/177632865/">通过</a></td>
<td style="text-align:left">120 ms</td>
<td style="text-align:left">39.3 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/15 11:12</td>
<td style="text-align:left">位运算-逐位判断🚩</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-16-数值的整数次方⭐️⭐️"><a class="header-anchor" href="#剑指-Offer-16-数值的整数次方⭐️⭐️"> </a>剑指 Offer 16. 数值的整数次方⭐️⭐️</h2>
<h3 id="题目描述-v23"><a class="header-anchor" href="#题目描述-v23"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/">剑指 Offer 16. 数值的整数次方</a></p>
<blockquote>
<p>实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。</p>
<p><strong>示例 1：</strong></p>
<p>输入：x = 2.00000, n = 10<br>
输出：1024.00000<br>
<strong>示例 2：</strong></p>
<p>输入：x = 2.10000, n = 3<br>
输出：9.26100<br>
<strong>示例 3：</strong></p>
<p>输入：x = 2.00000, n = -2<br>
输出：0.25000<br>
解释：2-2 = 1/22 = 1/4 = 0.25</p>
<p><strong>提示：</strong></p>
<p>-100.0 &lt; x &lt; 100.0<br>
-231 &lt;= n &lt;= 231-1<br>
-104 &lt;= xn &lt;= 104</p>
</blockquote>
<h3 id="解法：快速幂-迭代"><a class="header-anchor" href="#解法：快速幂-迭代"> </a>解法：快速幂-迭代</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//快速幂-迭代/** * @param {number} x * @param {number} n * @return {number} */var myPow = function(x, n) {    let res = 1.0;    if(n&lt;0){        n = -n;        x = 1/x;    }    while(n!=0){        if(n &amp; 1 == 1) res *= x;        x *= x;        n &gt;&gt;&gt;= 1;    }    return res;};</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>思路</strong></p>
<p><a href="https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/solution/jian-dan-li-jie-kuai-su-mi-by-ollieq-rl74/">简单理解快速幂</a></p>
<h3 id="提交记录-v18"><a class="header-anchor" href="#提交记录-v18"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/177643612/">通过</a></td>
<td style="text-align:left">104 ms</td>
<td style="text-align:left">38.1 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/05/15 11:57</td>
<td style="text-align:left">快速幂-迭代🚩</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-18-删除链表的节点⭐️"><a class="header-anchor" href="#剑指-Offer-18-删除链表的节点⭐️"> </a>剑指 Offer 18. 删除链表的节点⭐️</h2>
<h3 id="题目描述-v24"><a class="header-anchor" href="#题目描述-v24"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/">剑指 Offer 18. 删除链表的节点</a></p>
<blockquote>
<p>给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。</p>
<p>返回删除后的链表的头节点。</p>
<p>注意：此题对比原题有改动</p>
<p><strong>示例 1:</strong></p>
<p>输入: head = [4,5,1,9], val = 5<br>
输出: [4,1,9]<br>
解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</p>
<p><strong>示例 2:</strong></p>
<p>输入: head = [4,5,1,9], val = 1<br>
输出: [4,5,9]<br>
解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</p>
</blockquote>
<h3 id="解法：单指针"><a class="header-anchor" href="#解法：单指针"> </a>解法：单指针</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token operator">/</span><span class="token operator">**</span> <span class="token operator">*</span> @param <span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span> head <span class="token operator">*</span> @param <span class="token punctuation">{</span>number<span class="token punctuation">}</span> val <span class="token operator">*</span> @<span class="token keyword">return</span> <span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">var</span> <span class="token function-variable function">deleteNode</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">===</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">===</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="提交记录-v19"><a class="header-anchor" href="#提交记录-v19"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/183658013/">通过</a></td>
<td style="text-align:left">100 ms</td>
<td style="text-align:left">39.3 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/06/03 17:02</td>
<td style="text-align:left">单指针</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-24-反转链表⭐️"><a class="header-anchor" href="#剑指-Offer-24-反转链表⭐️"> </a>剑指 Offer 24. 反转链表⭐️</h2>
<h3 id="题目描述-v25"><a class="header-anchor" href="#题目描述-v25"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/">剑指 Offer 24. 反转链表</a></p>
<blockquote>
<p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p>
<p><strong>示例：</strong></p>
<p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>
输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p>
<p><strong>限制：</strong></p>
<p>0 &lt;= 节点个数 &lt;= 5000</p>
</blockquote>
<h3 id="解法1：三指针迭代"><a class="header-anchor" href="#解法1：三指针迭代"> </a>解法1：三指针迭代</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for singly-linked list. * function ListNode(val) { *     this.val = val; *     this.next = null; * } */</span><span class="token operator">/</span><span class="token operator">**</span> <span class="token operator">*</span> @param <span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span> head <span class="token operator">*</span> @<span class="token keyword">return</span> <span class="token punctuation">{</span>ListNode<span class="token punctuation">}</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">{</span>        next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span> <span class="token comment">//反转Node        pre = cur;        cur = next;    }    return pre;};</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="解法2：递归"><a class="header-anchor" href="#解法2：递归"> </a>解法2：递归</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */</span>
<span class="token comment">/**
 * @param {ListNode} head
 * @return {ListNode}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="提交记录-v20"><a class="header-anchor" href="#提交记录-v20"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/190010099/">通过</a></td>
<td style="text-align:left">96 ms</td>
<td style="text-align:left">39.8 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/06/27 00:44</td>
<td style="text-align:left">三指针迭代🚩</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/185400161/">通过</a></td>
<td style="text-align:left">92 ms</td>
<td style="text-align:left">40 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/06/09 18:43</td>
<td style="text-align:left">递归🚩</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-26-树的子结构⭐️⭐️"><a class="header-anchor" href="#剑指-Offer-26-树的子结构⭐️⭐️"> </a>剑指 Offer 26. 树的子结构⭐️⭐️</h2>
<h3 id="题目描述-v26"><a class="header-anchor" href="#题目描述-v26"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/">剑指 Offer 26. 树的子结构</a></p>
<blockquote>
<p>输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</p>
<p>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p>
<p><strong>例如:</strong><br>
给定的树 A:</p>
<p>​    3</p>
<p>/ \</p>
<p>4   5<br>
/ <br>
1   2<br>
给定的树 B：</p>
<p>4<br>
/<br>
1<br>
返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。</p>
<p><strong>示例 1：</strong></p>
<p>输入：A = [1,2,3], B = [3,1]<br>
输出：false</p>
<p><strong>示例 2：</strong></p>
<p>输入：A = [3,4,5,1,2], B = [4,1]<br>
输出：true</p>
<p><strong>限制：</strong></p>
<p>0 &lt;= 节点个数 &lt;= 10000</p>
</blockquote>
<h3 id="解法：前序遍历-递归"><a class="header-anchor" href="#解法：前序遍历-递归"> </a>解法：前序遍历+递归</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } */</span><span class="token operator">/</span><span class="token operator">**</span> <span class="token operator">*</span> @param <span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span> <span class="token constant">A</span> <span class="token operator">*</span> @param <span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span> <span class="token constant">B</span> <span class="token operator">*</span> @<span class="token keyword">return</span> <span class="token punctuation">{</span>boolean<span class="token punctuation">}</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">var</span> <span class="token function-variable function">isSubStructure</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">A</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token constant">B</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isSubStructure</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isSubStructure</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">recur</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">M</span><span class="token punctuation">,</span> <span class="token constant">N</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">N</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">M</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token constant">M</span><span class="token punctuation">.</span>val <span class="token operator">!=</span> <span class="token constant">N</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span><span class="token constant">M</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token constant">N</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">recur</span><span class="token punctuation">(</span><span class="token constant">M</span><span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token constant">N</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="提交记录-v21"><a class="header-anchor" href="#提交记录-v21"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/189221526/">通过</a></td>
<td style="text-align:left">164 ms</td>
<td style="text-align:left">57.7 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/06/23 23:14</td>
<td style="text-align:left">前序遍历+递归🚩</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-27-二叉树的镜像⭐️"><a class="header-anchor" href="#剑指-Offer-27-二叉树的镜像⭐️"> </a>剑指 Offer 27. 二叉树的镜像⭐️</h2>
<h3 id="题目描述-v27"><a class="header-anchor" href="#题目描述-v27"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/">剑指 Offer 27. 二叉树的镜像</a></p>
<blockquote>
<p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p>
<p><strong>例如</strong></p>
<p>输入：</p>
<p>​    	  4<br>
​    	/   <br>
​	   2     7<br>
​	/ \   / <br>
​	1   3 6   9</p>
<p>镜像输出：</p>
<p>​	     4<br>
​	/   <br>
​	7     2<br>
​	 / \    / <br>
​	9   6 3   1</p>
<p><strong>示例 1：</strong></p>
<p>输入：root = [4,2,7,1,3,6,9]<br>
输出：[4,7,2,9,6,3,1]</p>
<p>限制：</p>
<p>0 &lt;= 节点个数 &lt;= 1000</p>
</blockquote>
<h3 id="解法1：递归-v2"><a class="header-anchor" href="#解法1：递归-v2"> </a>解法1：递归</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } */</span><span class="token operator">/</span><span class="token operator">**</span> <span class="token operator">*</span> @param <span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span> root <span class="token operator">*</span> @<span class="token keyword">return</span> <span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">var</span> <span class="token function-variable function">mirrorTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token function">mirrorTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">mirrorTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="解法2：辅助栈（队列）"><a class="header-anchor" href="#解法2：辅助栈（队列）"> </a>解法2：辅助栈（队列）</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } */</span><span class="token operator">/</span><span class="token operator">**</span> <span class="token operator">*</span> @param <span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span> root <span class="token operator">*</span> @<span class="token keyword">return</span> <span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">var</span> <span class="token function-variable function">mirrorTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> temp <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>right <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>**注意：**while的循环条件，因为</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"It's true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//It's true</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"It's true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//It's true</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"It's true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//It's true  奇奇怪怪！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="提交记录-v22"><a class="header-anchor" href="#提交记录-v22"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/189245263/">通过</a></td>
<td style="text-align:left">88 ms</td>
<td style="text-align:left">39 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/06/24 00:24</td>
<td style="text-align:left">辅助栈（队列）🚩</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/189229324/">通过</a></td>
<td style="text-align:left">76 ms</td>
<td style="text-align:left">38.9 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/06/23 23:22</td>
<td style="text-align:left">递归🚩</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-29-顺时针打印矩阵⭐️"><a class="header-anchor" href="#剑指-Offer-29-顺时针打印矩阵⭐️"> </a>剑指 Offer 29. 顺时针打印矩阵⭐️</h2>
<h3 id="题目描述-v28"><a class="header-anchor" href="#题目描述-v28"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/">剑指 Offer 29. 顺时针打印矩阵</a></p>
<blockquote>
<p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p>
<p><strong>示例 1：</strong></p>
<p>输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]<br>
输出：[1,2,3,6,9,8,7,4,5]</p>
<p>示例 2：</p>
<p>输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]<br>
输出：[1,2,3,4,8,12,11,10,9,5,6,7]</p>
<p><strong>限制：</strong></p>
<p>0 &lt;= matrix.length &lt;= 100<br>
0 &lt;= matrix[i].length &lt;= 100</p>
</blockquote>
<h3 id="解法：设定边界"><a class="header-anchor" href="#解法：设定边界"> </a>解法：设定边界</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param {number[][]} matrix * @return {number[]} */</span><span class="token keyword">var</span> <span class="token function-variable function">spiralOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">matrix</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//left    let r = matrix[0].length - 1; //right    let t = 0; //top    let b = matrix.length - 1; //bottom    while(true){        for(let i=l; i&lt;=r; i++) res.push(matrix[t][i]);        if(++t &gt; b) break;        for(let i=t; i&lt;=b; i++) res.push(matrix[i][r]);        if(--r &lt; l) break;        for(let i=r; i&gt;=l; i--) res.push(matrix[b][i]);        if(--b &lt; t) break;        for(let i=b; i&gt;=t; i--) res.push(matrix[i][l]);        if(++l &gt; r) break;    }    return res;};</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="提交记录-v23"><a class="header-anchor" href="#提交记录-v23"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/189539112/">通过</a></td>
<td style="text-align:left">108 ms</td>
<td style="text-align:left">41.4 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/06/25 00:27</td>
<td style="text-align:left">设定边界🚩</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-28-对称的二叉树⭐️"><a class="header-anchor" href="#剑指-Offer-28-对称的二叉树⭐️"> </a>剑指 Offer 28. 对称的二叉树⭐️</h2>
<h3 id="题目描述-v29"><a class="header-anchor" href="#题目描述-v29"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/">剑指 Offer 28. 对称的二叉树</a></p>
<blockquote>
<p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p>
<p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p>
<pre><code> 1
 / \
2    2
</code></pre>
<p>/ \   / <br>
3  4 4  3</p>
<p>但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的。</p>
<p>​	  1<br>
​	 / <br>
​	2   2<br>
​	 \    <br>
​	 3    3</p>
<p><strong>示例 1：</strong></p>
<p>输入：root = [1,2,2,3,4,4,3]<br>
输出：true</p>
<p><strong>示例 2：</strong></p>
<p>输入：root = [1,2,2,null,3,null,3]<br>
输出：false</p>
<p><strong>限制：</strong></p>
<p>0 &lt;= 节点个数 &lt;= 1000</p>
</blockquote>
<h3 id="解法：递归-v3"><a class="header-anchor" href="#解法：递归-v3"> </a>解法：递归</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * Definition for a binary tree node. * function TreeNode(val) { *     this.val = val; *     this.left = this.right = null; * } */</span><span class="token operator">/</span><span class="token operator">**</span> <span class="token operator">*</span> @param <span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span> root <span class="token operator">*</span> @<span class="token keyword">return</span> <span class="token punctuation">{</span>boolean<span class="token punctuation">}</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">var</span> <span class="token function-variable function">isSymmetric</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">recur</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">l<span class="token punctuation">,</span> r</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> r <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> l<span class="token punctuation">.</span>val <span class="token operator">!=</span> r<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>left<span class="token punctuation">,</span> r<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">recur</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>right<span class="token punctuation">,</span> r<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="提交记录-v24"><a class="header-anchor" href="#提交记录-v24"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/189542588/">通过</a></td>
<td style="text-align:left">100 ms</td>
<td style="text-align:left">39.9 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/06/25 00:59</td>
<td style="text-align:left">递归🚩</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-30-包含min函数的栈⭐️"><a class="header-anchor" href="#剑指-Offer-30-包含min函数的栈⭐️"> </a>剑指 Offer 30. 包含min函数的栈⭐️</h2>
<h3 id="题目描述-v30"><a class="header-anchor" href="#题目描述-v30"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof/">剑指 Offer 30. 包含min函数的栈</a></p>
<blockquote>
<p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)</p>
<p><strong>示例：</strong></p>
<p>MinStack minStack = new MinStack();<br>
minStack.push(-2);<br>
minStack.push(0);<br>
minStack.push(-3);<br>
minStack.min();   --&gt; 返回 -3.<br>
minStack.pop();<br>
minStack.top();      --&gt; 返回 0.<br>
minStack.min();   --&gt; 返回 -2.</p>
</blockquote>
<h3 id="解法：辅助栈"><a class="header-anchor" href="#解法：辅助栈"> </a>解法：辅助栈</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * initialize your data structure here.
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">MinStack</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x_stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>min_stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">Infinity</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/** 
 * @param {number} x
 * @return {void}
 */</span>
<span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x_stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>min_stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>min_stack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>min_stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @return {void}
 */</span>
<span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x_stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>min_stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @return {number}
 */</span>
<span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">top</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x_stack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>x_stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @return {number}
 */</span>
<span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">min</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>min_stack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>min_stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Your MinStack object will be instantiated and called as such:
 * var obj = new MinStack()
 * obj.push(x)
 * obj.pop()
 * var param_3 = obj.top()
 * var param_4 = obj.min()
 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>拓展知识：</strong></p>
<p><code>new</code>操作符会改变函数this的指向，如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//在经过 a = new Fn()后，这里会变为 a.num = 1</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>为什么this会指向a？首先new关键字会创建一个空的对象，然后会自动调用一个apply函数，将this指向这个空对象，这样的话函数内部的this就会被这个空的对象替代。</p>
<p>更多请看这里：<a href="https://www.baidu.com/link?url=YNYJlIqqQAv4b3K8bPkQhHwgx13JkqH-yssNM9Iwo4x-xdu8hEj2Jv64w5_o4eyH2SXksI1LgRjxtZ_RlH6Bj_&amp;wd=&amp;eqid=98344481000b48d00000000660d6003d">彻底理解js中this的指向,不必硬背。 - 追梦子 - 博客园</a></p>
<h2 id="剑指-Offer-39-数组中出现次数超过一半的数字⭐️"><a class="header-anchor" href="#剑指-Offer-39-数组中出现次数超过一半的数字⭐️"> </a>剑指 Offer 39. 数组中出现次数超过一半的数字⭐️</h2>
<h3 id="题目描述-v31"><a class="header-anchor" href="#题目描述-v31"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/">剑指 Offer 39. 数组中出现次数超过一半的数字</a></p>
<blockquote>
<p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>
<p><strong>示例 1:</strong></p>
<p>输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]<br>
输出: 2</p>
</blockquote>
<h3 id="解法：哈希表"><a class="header-anchor" href="#解法：哈希表"> </a>解法：哈希表</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * @param {number[]} nums
 * @return {number}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">majorityElement</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">==</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="提交记录-v25"><a class="header-anchor" href="#提交记录-v25"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/195850909/">通过</a></td>
<td style="text-align:left">76 ms</td>
<td style="text-align:left">41.1 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/07/14 23:59</td>
<td style="text-align:left">哈希表</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-40-最小的k个数⭐️"><a class="header-anchor" href="#剑指-Offer-40-最小的k个数⭐️"> </a>剑指 Offer 40. 最小的k个数⭐️</h2>
<h3 id="题目描述-v32"><a class="header-anchor" href="#题目描述-v32"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/">剑指 Offer 40. 最小的k个数</a></p>
<blockquote>
<p>输入整数数组 arr ，找出其中最小的 k 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。</p>
<p><strong>示例 1：</strong></p>
<p>输入：arr = [3,2,1], k = 2<br>
输出：[1,2] 或者 [2,1]</p>
<p><strong>示例 2：</strong></p>
<p>输入：arr = [0,1,2,1], k = 1<br>
输出：[0]</p>
<p><strong>限制：</strong></p>
<p>0 &lt;= k &lt;= arr.length &lt;= 10000<br>
0 &lt;= arr[i] &lt;= 10000</p>
</blockquote>
<h3 id="解法：排序"><a class="header-anchor" href="#解法：排序"> </a>解法：排序</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * @param {number[]} arr
 * @param {number} k
 * @return {number[]}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">getLeastNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="提交记录-v26"><a class="header-anchor" href="#提交记录-v26"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/192688447/">通过</a></td>
<td style="text-align:left">132 ms</td>
<td style="text-align:left">42.3 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/07/06 00:06</td>
<td style="text-align:left">排序</td>
</tr>
</tbody>
</table>
<h2 id="剑指-Offer-50-第一个只出现一次的字符⭐️"><a class="header-anchor" href="#剑指-Offer-50-第一个只出现一次的字符⭐️"> </a>剑指 Offer 50. 第一个只出现一次的字符⭐️</h2>
<h3 id="题目描述-v33"><a class="header-anchor" href="#题目描述-v33"> </a>题目描述</h3>
<p><a href="https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/">剑指 Offer 50. 第一个只出现一次的字符</a></p>
<blockquote>
<p>在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。</p>
<p><strong>示例：</strong></p>
<p>s = “abaccdeff”<br>
返回 “b”</p>
<p>s = “”<br>
返回 " "</p>
<p><strong>限制：</strong></p>
<p>0 &lt;= s 的长度 &lt;= 50000</p>
</blockquote>
<h3 id="解法：哈希表-v2"><a class="header-anchor" href="#解法：哈希表-v2"> </a>解法：哈希表</h3>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * @param {string} s
 * @return {character}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">firstUniqChar</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> char <span class="token keyword">of</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>char<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">return</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token string">" "</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="提交记录-v27"><a class="header-anchor" href="#提交记录-v27"> </a>提交记录</h3>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode-cn.com/submissions/detail/192696791/">通过</a></td>
<td style="text-align:left">124 ms</td>
<td style="text-align:left">41.3 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2021/07/06 00:38</td>
<td style="text-align:left">哈希表</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>前端面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>算法</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript入门教程</title>
    <url>/2021/06/10/TypeScript%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="什么是TypeScript"><a class="header-anchor" href="#什么是TypeScript"> </a>什么是TypeScript</h1>
<p>官网对于TypeScript的定义如下：</p>
<blockquote>
<p>Typed JavaScript Any Scale.</p>
<p>添加了类型系统的JavaScript，适用于任何规模的项目。</p>
</blockquote>
<p>它强调了TypeScript的两个最重要的特性：</p>
<ul>
<li>类型系统</li>
<li>适用于任何规模</li>
</ul>
<h2 id="TypeScript的特性"><a class="header-anchor" href="#TypeScript的特性"> </a>TypeScript的特性</h2>
<h3 id="类型系统"><a class="header-anchor" href="#类型系统"> </a>类型系统</h3>
<h4 id="TypeScript是静态类型"><a class="header-anchor" href="#TypeScript是静态类型"> </a>TypeScript是静态类型</h4>
<p>类型系统按照<code>类型检查的时机</code>来分类，可以分为<strong>动态类型</strong>和<strong>静态类型</strong>。</p>
<p><strong>动态类型</strong>是指在运行时才会进行类型检查，类型错误会导致运行时发生错误。JS是一门解释型语言，没有编译阶段，所以它是动态类型。以下这段代码在运行时才会报错：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Uncaught TypeError: foo.split is not a function</span>
<span class="token comment">// 运行时会报错（foo.split 不是一个函数），造成线上 bug</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>静态类型</strong>是指在编译阶段就能确定每个变量的类型，类型错误会导致语法错误。</p>
<p>TS在运行前需要编译为JS，而在编译阶段就会进行类型检查，所以<strong>TS是静态类型</strong>。这段 TypeScript 代码在编译阶段就会报错了：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Property 'split' does not exist on type 'number'.</span>
<span class="token comment">// 编译时会报错（数字没有 split 方法），无法通过编译</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>TS有强大的<strong>类型推论</strong>，即使不去手动声明变量<code>foo</code>的类型，也能在变量初始化时自动推论出它是一个<code>number</code>类型。</p>
<p>完整的 TypeScript 代码是这样的：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> foo<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Property 'split' does not exist on type 'number'.</span>
<span class="token comment">// 编译时会报错（数字没有 split 方法），无法通过编译</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="TypeScript是弱类型"><a class="header-anchor" href="#TypeScript是弱类型"> </a>TypeScript是弱类型</h4>
<p>类型系统按照<code>是否允许隐式类型变换</code>来分类，可以分为<strong>强类型</strong>和<strong>弱类型</strong>。</p>
<p>TS是完全兼容JS的，它不会修改JS运行时的特性，所以它们都是弱类型。</p>
<h4 id="TypeScript的核心设计理念"><a class="header-anchor" href="#TypeScript的核心设计理念"> </a>TypeScript的核心设计理念</h4>
<p>在完整保留JS运行时行为的基础上，通过引入静态类型系统来提高代码的可维护性，减少可能出现的bug。</p>
<h3 id="适用于任何规模"><a class="header-anchor" href="#适用于任何规模"> </a>适用于任何规模</h3>
<p>TypeScript 非常适用于大型项目——这是显而易见的，类型系统可以为大型项目带来更高的可维护性，以及更少的 bug。</p>
<p>在中小型项目中推行 TypeScript 的最大障碍就是认为使用 TypeScript 需要写额外的代码，降低开发效率。但事实上，由于有<code>类型推论</code>，大部分类型都不需要手动声明了。相反，TypeScript 增强了编辑器（IDE）的功能，包括代码补全、接口提示、跳转到定义、代码重构等，这在很大程度上提高了开发效率。而且 TypeScript 有近百<code>编译选项</code>，如果你认为类型检查过于严格，那么可以通过修改编译选项来降低类型检查的标准。</p>
<p>TypeScript 还可以和 JavaScript 共存。这意味着如果你有一个使用 JavaScript 开发的旧项目，又想使用 TypeScript 的特性，那么你不需要急着把整个项目都迁移到 TypeScript，你可以使用 TypeScript 编写新文件，然后在后续更迭中逐步迁移旧文件。如果一些 JavaScript 文件的迁移成本太高，TypeScript 也提供了一个方案，可以让你在不修改 JavaScript 文件的前提下，编写一个<code>类型声明文件</code>，实现旧项目的渐进式迁移。</p>
<h3 id="与标准同步发展"><a class="header-anchor" href="#与标准同步发展"> </a>与标准同步发展</h3>
<p>TypeScript 的另一个重要的特性是坚持<strong>与 ECMAScript 标准同步发展</strong>。</p>
<h2 id="总结"><a class="header-anchor" href="#总结"> </a>总结</h2>
<p>什么是 TypeScript？</p>
<ul>
<li>TypeScript 是添加了类型系统的 JavaScript，适用于任何规模的项目。</li>
<li>TypeScript 是一门静态类型、弱类型的语言。</li>
<li>TypeScript 是完全兼容 JavaScript 的，它不会修改 JavaScript 运行时的特性。</li>
<li>TypeScript 可以编译为 JavaScript，然后运行在浏览器、Node.js 等任何能运行 JavaScript 的环境中。</li>
<li>TypeScript 拥有很多编译选项，类型检查的严格程度由你决定。</li>
<li>TypeScript 可以和 JavaScript 共存，这意味着 JavaScript 项目能够渐进式的迁移到 TypeScript。</li>
<li>TypeScript 增强了编辑器（IDE）的功能，提供了代码补全、接口提示、跳转到定义、代码重构等能力。</li>
<li>TypeScript 拥有活跃的社区，大多数常用的第三方库都提供了类型声明。</li>
<li>TypeScript 与标准同步发展，符合最新的 ECMAScript 标准（stage 3）。</li>
</ul>
<h1 id="基础"><a class="header-anchor" href="#基础"> </a>基础</h1>
<h2 id="原始数据类型"><a class="header-anchor" href="#原始数据类型"> </a>原始数据类型</h2>
<p>JavaScript的类型分类两种：</p>
<ul>
<li>原始数据类型（Primitive data types）
<ul>
<li>boolean、number、string、null、undefined、Symbol（ES6）、BigInt（ES10）</li>
</ul>
</li>
<li>对象类型（Object types）</li>
</ul>
<h3 id="布尔值-boolean"><a class="header-anchor" href="#布尔值-boolean"> </a>布尔值 boolean</h3>
<p>布尔值是最基础的数据类型，在 TypeScript 中，使用 <code>boolean</code> 定义布尔值类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> isDone<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token comment">// 编译通过</span>
<span class="token comment">// 后面约定，未强调编译错误的代码片段，默认为编译通过</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意，使用构造函数 <code>Boolean</code> 创造的对象<strong>不是</strong>布尔值：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> createdByNewBoolean<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Type 'Boolean' is not assignable to type 'boolean'.</span>
<span class="token comment">//   'boolean' is a primitive, but 'Boolean' is a wrapper object. Prefer using 'boolean' when possible.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>事实上 <code>new Boolean()</code> 返回的是一个 <code>Boolean</code> 对象：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> createdByNewBoolean<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>但是，直接调用 <code>Boolean</code> 可以返回一个 <code>boolean</code> 类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> createdByBoolean<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在 TypeScript 中，<code>boolean</code> 是 JavaScript 中的基本类型，而 <code>Boolean</code> 是 JavaScript 中的构造函数。其他基本类型（除了 <code>null</code> 和 <code>undefined</code>）一样，不再赘述。</p>
<h3 id="数值-number"><a class="header-anchor" href="#数值-number"> </a>数值 number</h3>
<p>使用 <code>number</code> 定义数值类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> decLiteral<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> hexLiteral<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0xf00d</span><span class="token punctuation">;</span>
<span class="token comment">// ES6 中的二进制表示法</span>
<span class="token keyword">let</span> binaryLiteral<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span>
<span class="token comment">// ES6 中的八进制表示法</span>
<span class="token keyword">let</span> octalLiteral<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0o744</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> notANumber<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> infinityNumber<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译结果：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> decLiteral <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> hexLiteral <span class="token operator">=</span> <span class="token number">0xf00d</span><span class="token punctuation">;</span>
<span class="token comment">// ES6 中的二进制表示法</span>
<span class="token keyword">var</span> binaryLiteral <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">// ES6 中的八进制表示法</span>
<span class="token keyword">var</span> octalLiteral <span class="token operator">=</span> <span class="token number">484</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> notANumber <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> infinityNumber <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="字符串-string"><a class="header-anchor" href="#字符串-string"> </a>字符串 string</h3>
<p>使用 <code>string</code> 定义字符串类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> myName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> myAge<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>

<span class="token comment">// 模板字符串</span>
<span class="token keyword">let</span> sentence<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>myName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.
I'll be </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>myAge <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old next month.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译结果：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myName <span class="token operator">=</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> myAge <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
<span class="token comment">// 模板字符串</span>
<span class="token keyword">var</span> sentence <span class="token operator">=</span> <span class="token string">"Hello, my name is "</span> <span class="token operator">+</span> myName <span class="token operator">+</span> "<span class="token punctuation">.</span>
<span class="token constant">I</span>'ll be <span class="token string">" + (myAge + 1) + "</span> years old next month<span class="token punctuation">.</span>"<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="空值-void"><a class="header-anchor" href="#空值-void"> </a>空值 void</h3>
<p>JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 <code>void</code> 表示没有任何返回值的函数：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">alertName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'My name is Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>声明一个 <code>void</code> 类型的变量没有什么用，因为你只能将它赋值为 <code>undefined</code> 和 <code>null</code>（只在 --strictNullChecks 未指定时）：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> unusable<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="null-和-undefined"><a class="header-anchor" href="#null-和-undefined"> </a>null 和 undefined</h3>
<p>在 TypeScript 中，可以使用 <code>null</code> 和 <code>undefined</code> 来定义这两个原始数据类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> u<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> n<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>与 <code>void</code> 的区别是，<code>undefined</code> 和 <code>null</code> 是所有类型的子类型。也就是说 <code>undefined</code> 类型的变量，可以赋值给 <code>number</code> 类型的变量：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 这样不会报错</span>
<span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token comment">// 这样也不会报错</span>
<span class="token keyword">let</span> u<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> u<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而 <code>void</code> 类型的变量不能赋值给 <code>number</code> 类型的变量：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> u<span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>

<span class="token comment">// Type 'void' is not assignable to type 'number'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="任意值"><a class="header-anchor" href="#任意值"> </a>任意值</h2>
<p><strong>任意值（Any）用来表示允许赋值为任意类型。</strong></p>
<h3 id="什么是任意值类型"><a class="header-anchor" href="#什么是任意值类型"> </a>什么是任意值类型</h3>
<p>如果是一个普通类型，在赋值过程中改变类型是不被允许的：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> myFavoriteNumber<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'seven'</span><span class="token punctuation">;</span>
myFavoriteNumber <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>但如果是 <code>any</code> 类型，则允许被赋值为任意类型。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> myFavoriteNumber<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">'seven'</span><span class="token punctuation">;</span>
myFavoriteNumber <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="任意值的属性和方法"><a class="header-anchor" href="#任意值的属性和方法"> </a>任意值的属性和方法</h3>
<p>在任意值上访问任何属性都是允许的：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> anyThing<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anyThing<span class="token punctuation">.</span>myName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anyThing<span class="token punctuation">.</span>myName<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>也允许调用任何方法：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> anyThing<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span>
anyThing<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
anyThing<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
anyThing<span class="token punctuation">.</span>myName<span class="token punctuation">.</span><span class="token function">setFirstName</span><span class="token punctuation">(</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以认为，<strong>声明一个变量为任意值之后，对它的任何操作，返回的内容的类型都是任意值</strong>。</p>
<h3 id="未声明类型的变量"><a class="header-anchor" href="#未声明类型的变量"> </a>未声明类型的变量</h3>
<p><strong>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型</strong>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> something<span class="token punctuation">;</span>
something <span class="token operator">=</span> <span class="token string">'seven'</span><span class="token punctuation">;</span>
something <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>

something<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>等价于</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> something<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
something <span class="token operator">=</span> <span class="token string">'seven'</span><span class="token punctuation">;</span>
something <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>

something<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="类型推论"><a class="header-anchor" href="#类型推论"> </a>类型推论</h2>
<p>如果没有明确的指定类型，那么TypeScript会依照类型推论（Type Inference）的规则推断一个类型。</p>
<h3 id="什么是类型推论"><a class="header-anchor" href="#什么是类型推论"> </a>什么是类型推论</h3>
<p>以下代码虽然没有指定类型，但是会在编译的时候报错：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> myFavoriteNumber <span class="token operator">=</span> <span class="token string">'seven'</span><span class="token punctuation">;</span>
myFavoriteNumber <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>事实上，它等价于：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> myFavoriteNumber<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'seven'</span><span class="token punctuation">;</span>
myFavoriteNumber <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。</p>
<p><strong>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 <code>any</code> 类型而完全不被类型检查</strong>：</p>
<pre class="line-numbers language-ty" data-language="ty"><code class="language-ty">let myFavoriteNumber;
myFavoriteNumber = 'seven';
myFavoriteNumber = 7;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="联合类型"><a class="header-anchor" href="#联合类型"> </a>联合类型</h2>
<p><strong>联合类型（Union Types）表示取值可以为多种类型中的一种。</strong></p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> myFavoriteNumber<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
myFavoriteNumber <span class="token operator">=</span> <span class="token string">'seven'</span><span class="token punctuation">;</span>
myFavoriteNumber <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> myFavoriteNumber<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
myFavoriteNumber <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(2,1): error TS2322: Type 'boolean' is not assignable to type 'string | number'.</span>
<span class="token comment">//   Type 'boolean' is not assignable to type 'number'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>联合类型使用 <code>|</code> 分隔每个类型。</p>
<p>这里的 <code>let myFavoriteNumber: string | number;</code> 的含义是，允许 <code>myFavoriteNumber</code> 的类型是 <code>string</code> 或者 <code>number</code>，但是不能是其他类型。</p>
<h3 id="联合类型的属性和方法"><a class="header-anchor" href="#联合类型的属性和方法"> </a>联合类型的属性和方法</h3>
<p>当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们<strong>只能访问此联合类型的所有类型里共有的属性或方法</strong>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getLength</span><span class="token punctuation">(</span>something<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> something<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// index.ts(2,22): error TS2339: Property 'length' does not exist on type 'string | number'.</span>
<span class="token comment">//   Property 'length' does not exist on type 'number'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例中，<code>length</code> 不是 <code>string</code> 和 <code>number</code> 的共有属性，所以会报错。</p>
<p>访问 <code>string</code> 和 <code>number</code> 的共有属性是没问题的：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getString</span><span class="token punctuation">(</span>something<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> something<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> myFavoriteNumber<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
myFavoriteNumber <span class="token operator">=</span> <span class="token string">'seven'</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myFavoriteNumber<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
myFavoriteNumber <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myFavoriteNumber<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编译时报错</span>

<span class="token comment">// index.ts(5,30): error TS2339: Property 'length' does not exist on type 'number'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例中，第二行的 <code>myFavoriteNumber</code> 被推断成了 <code>string</code>，访问它的 <code>length</code> 属性不会报错。</p>
<p>而第四行的 <code>myFavoriteNumber</code> 被推断成了 <code>number</code>，访问它的 <code>length</code> 属性时就报错了。</p>
<h2 id="接口-对象的类型"><a class="header-anchor" href="#接口-对象的类型"> </a>接口 - 对象的类型</h2>
<p>在TypeScript中，<strong>接口（Interfaces）用来定义对象的类型</strong>。</p>
<h3 id="什么是接口"><a class="header-anchor" href="#什么是接口"> </a>什么是接口</h3>
<p><strong>在面向对象语言中，接口（Interfaces）是对行为的抽象，而具体如何行动需要由类（Classes）去实现（Implement）。</strong></p>
<p>TypeScript中的接口是一个非常灵活的概念，除了可用于<strong>对类的一部分行为进行抽象</strong>以外，也常用于<strong>对对象的形状（Shape）进行描述</strong>。</p>
<p><em>我觉得下面这个例子，举得不是特别好。</em></p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">25</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的例子中，我们定义了一个接口 <code>Person</code>，接着定义了一个变量 <code>tom</code>，它的类型是 <code>Person</code>。这样，我们就约束了 <code>tom</code> 的形状必须和接口 <code>Person</code> 一致。</p>
<p>接口一般首字母大写。有的编程语言中会建议接口的名称加上 <code>I</code> 前缀。</p>
<p>定义的变量比接口少了一些属性是不允许的：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'Tom'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(6,5): error TS2322: Type '{ name: string; }' is not assignable to type 'Person'.</span>
<span class="token comment">//   Property 'age' is missing in type '{ name: string; }'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>多一些属性也是不允许的：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
    gender<span class="token operator">:</span> <span class="token string">'male'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(9,5): error TS2322: Type '{ name: string; age: number; gender: string; }' is not assignable to type 'Person'.</span>
<span class="token comment">//   Object literal may only specify known properties, and 'gender' does not exist in type 'Person'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可见，<strong>赋值的时候，变量的形状必须和接口的形状保持一致</strong>。</p>
<p>顺便一提：</p>
<p><a href="https://www.zhihu.com/question/20149818/answer/704355929">接口和抽象类有什么区别？ - BWH.Steven的回答 - 知乎</a></p>
<h3 id="可选属性"><a class="header-anchor" href="#可选属性"> </a>可选属性</h3>
<p>有时我们希望不要完全匹配一个形状，那么可以用可选属性：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'Tom'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">25</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可选属性的含义是该属性可以不存在。</p>
<p>这时<strong>仍然不允许添加未定义的属性</strong>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
    gender<span class="token operator">:</span> <span class="token string">'male'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// examples/playground/index.ts(9,5): error TS2322: Type '{ name: string; age: number; gender: string; }' is not assignable to type 'Person'.</span>
<span class="token comment">//   Object literal may only specify known properties, and 'gender' does not exist in type 'Person'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="任意属性"><a class="header-anchor" href="#任意属性"> </a>任意属性</h3>
<p>有时候我们希望一个接口允许有任意的属性，可以使用如下方式：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>
    gender<span class="token operator">:</span> <span class="token string">'male'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用 <code>[propName: string]</code> 定义了任意属性取 <code>string</code> 类型的值。</p>
<p>需要注意的是，<strong>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</strong>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
    gender<span class="token operator">:</span> <span class="token string">'male'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(3,5): error TS2411: Property 'age' of type 'number' is not assignable to string index type 'string'.</span>
<span class="token comment">// index.ts(7,5): error TS2322: Type '{ [x: string]: string | number; name: string; age: number; gender: string; }' is not assignable to type 'Person'.</span>
<span class="token comment">//   Index signatures are incompatible.</span>
<span class="token comment">//     Type 'string | number' is not assignable to type 'string'.</span>
<span class="token comment">//       Type 'number' is not assignable to type 'string'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例中，任意属性的值允许是 <code>string</code>，但是可选属性 <code>age</code> 的值却是 <code>number</code>，<code>number</code> 不是 <code>string</code> 的子属性，所以报错了。</p>
<p>另外，在报错信息中可以看出，此时 <code>{ name: 'Tom', age: 25, gender: 'male' }</code> 的类型被推断成了 <code>{ [x: string]: string | number; name: string; age: number; gender: string; }</code>，这是联合类型和接口的结合。</p>
<p>一个接口中只能定义一个任意属性。如果接口中有多个类型的属性，则可以在任意属性中使用联合类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
    gender<span class="token operator">:</span> <span class="token string">'male'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="只读属性"><a class="header-anchor" href="#只读属性"> </a>只读属性</h3>
<p>有时候我们希望对象中的一些字段只能在创建的时候被赋值，那么可以用 <code>readonly</code> 定义只读属性：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token number">89757</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>
    gender<span class="token operator">:</span> <span class="token string">'male'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

tom<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">9527</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(14,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-only property.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例中，使用 <code>readonly</code> 定义的属性 <code>id</code> 初始化后，又被赋值了，所以报错了。</p>
<p><strong>注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候</strong>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">readonly</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> tom<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>
    gender<span class="token operator">:</span> <span class="token string">'male'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

tom<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">89757</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(8,5): error TS2322: Type '{ name: string; gender: string; }' is not assignable to type 'Person'.</span>
<span class="token comment">//   Property 'id' is missing in type '{ name: string; gender: string; }'.</span>
<span class="token comment">// index.ts(13,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-only property.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例中，报错信息有两处，第一处是在对 <code>tom</code> 进行赋值的时候，没有给 <code>id</code> 赋值。</p>
<p>第二处是在给 <code>tom.id</code> 赋值的时候，由于它是只读属性，所以报错了。</p>
<h2 id="数组的类型"><a class="header-anchor" href="#数组的类型"> </a>数组的类型</h2>
<p>有多种定义方法。</p>
<h3 id="「类型-方括号」表示法"><a class="header-anchor" href="#「类型-方括号」表示法"> </a>「类型 + 方括号」表示法</h3>
<p>最简单的方法是使用「类型 + 方括号」来表示数组：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> fibonacci<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="数组泛型-表示法"><a class="header-anchor" href="#数组泛型-表示法"> </a>数组泛型 表示法</h3>
<p>下面用数组泛型（Array Generic）<code>Array&lt;elemType&gt;</code>来表示数组：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> fibonacci<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="接口-表示法"><a class="header-anchor" href="#接口-表示法"> </a>接口 表示法</h3>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">NumberArray</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> fibonacci<span class="token operator">:</span> NumberArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>NumberArray</code>表示：只要索引的类型是数字，那么值的类型就必须是数字。</p>
<p>这种表示法一般不常用，但是它常用来表示<code>类数组</code>。</p>
<h3 id="类数组"><a class="header-anchor" href="#类数组"> </a>类数组</h3>
<p>类数组（Array-like Object）不是数组类型，比如<code>arguments</code>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> args<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Type 'IArguments' is missing the following properties from type 'number[]': pop, push, concat, join, and 24 more.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例中，<code>arguments</code> 实际上是一个类数组，不能用普通的数组的方式来描述，而应该用接口：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> args<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
        length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
        callee<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在这个例子中，我们除了约束当索引的类型是数字时，值的类型必须是数字之外，也约束了它还有 <code>length</code> 和 <code>callee</code> 两个属性。</p>
<p>事实上常用的类数组都有自己的接口定义，如 <code>IArguments</code>, <code>NodeList</code>, <code>HTMLCollection</code> 等：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> args<span class="token operator">:</span> IArguments <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>其中 <code>IArguments</code> 是 TypeScript 中定义好了的类型，它实际上就是：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">IArguments</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
    length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    callee<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="函数的类型"><a class="header-anchor" href="#函数的类型"> </a>函数的类型</h2>
<p>在 JavaScript 中，有两种常见的定义函数的方式——函数声明（Function Declaration）和 函数表达式（Function Expression）：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 函数声明（Function Declaration）</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 函数表达式（Function Expression）</span>
<span class="token keyword">let</span> <span class="token function-variable function">mySum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="函数声明"><a class="header-anchor" href="#函数声明"> </a>函数声明</h3>
<p>一个函数有输入和输出，要在 TypeScript 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="函数表达式"><a class="header-anchor" href="#函数表达式"> </a>函数表达式</h3>
<p>如果要我们现在写一个对函数表达式（Function Expression）的定义，可能会写成这样：</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">//不标准的</span>
<span class="token keyword">let</span> <span class="token function-variable function">mySum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是可以通过编译的，不过事实上，上面的代码只对等号右侧的匿名函数进行了类型定义，而等号左边的 <code>mySum</code>，是通过赋值操作进行类型推论而推断出来的。如果需要我们手动给 <code>mySum</code> 添加类型，则应该是这样：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> <span class="token function-variable function">mySum</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">number</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在 TypeScript 的类型定义中，<code>=&gt;</code> 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型；在 ES6 中，<code>=&gt;</code> 叫做箭头函数。</p>
<p>注意不要混淆了 TypeScript 中的 <code>=&gt;</code> 和 ES6 中的 <code>=&gt;</code>。</p>
<h3 id="用接口定义函数的形状"><a class="header-anchor" href="#用接口定义函数的形状"> </a>用接口定义函数的形状</h3>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> subString<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> mySearch<span class="token operator">:</span> SearchFunc<span class="token punctuation">;</span>
<span class="token function-variable function">mySearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> subString<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>采用函数表达式|接口定义函数的方式时，对等号左侧进行类型限制，可以保证以后对函数名赋值时保证参数个数、参数类型、返回值类型不变。</p>
<h3 id="可选参数"><a class="header-anchor" href="#可选参数"> </a>可选参数</h3>
<p>与接口中的可选属性类似，我们用 <code>?</code> 表示可选的参数：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> lastName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> firstName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> tomcat <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> tom <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>需要注意的是，可选参数必须接在必需参数后面。换句话说，<strong>可选参数后面不允许再出现必需参数了</strong>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> lastName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> tomcat <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> tom <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(1,40): error TS1016: A required parameter cannot follow an optional parameter.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参数默认值"><a class="header-anchor" href="#参数默认值"> </a>参数默认值</h3>
<p>在 ES6 中，我们允许给函数的参数添加默认值，<strong>TypeScript 会将添加了默认值的参数识别为可选参数</strong>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'Cat'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> tomcat <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> tom <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时就不受「可选参数必须接在必需参数后面」的限制了：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> tomcat <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="剩余参数"><a class="header-anchor" href="#剩余参数"> </a>剩余参数</h3>
<p>ES6 中，可以使用 <code>...rest</code> 的方式获取函数中的剩余参数（rest 参数）：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> <span class="token operator">...</span>items</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>事实上，<code>items</code> 是一个数组。所以我们可以用数组的类型来定义它：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span>array<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>items<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意，rest 参数只能是最后一个参数，关于 rest 参数.</p>
<h3 id="重载"><a class="header-anchor" href="#重载"> </a>重载</h3>
<p>重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。</p>
<p>比如，我们需要实现一个函数 <code>reverse</code>，输入数字 <code>123</code> 的时候，输出反转的数字 <code>321</code>，输入字符串 <code>'hello'</code> 的时候，输出反转的字符串 <code>'olleh'</code>。</p>
<p>利用联合类型，我们可以这么实现：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意，TypeScript 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</p>
<h2 id="类型断言"><a class="header-anchor" href="#类型断言"> </a>类型断言</h2>
<p>类型断言（Type Assertion）可以用来手动指定一个值的类型。</p>
<h3 id="语法"><a class="header-anchor" href="#语法"> </a>语法</h3>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">值 <span class="token keyword">as</span> 类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token operator">&lt;</span>类型<span class="token operator">&gt;</span>值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在 tsx 语法（React 的 jsx 语法的 ts 版）中必须使用前者，即 <code>值 as 类型</code>。</p>
<p>形如 <code>&lt;Foo&gt;</code> 的语法在 tsx 中表示的是一个 <code>ReactNode</code>，在 ts 中除了表示类型断言之外，也可能是表示一个泛型。</p>
<p><em>故建议大家在使用类型断言时，统一使用 <code>值 as 类型</code> 这样的语法，本文中也会贯彻这一思想。</em></p>
<h3 id="类型断言的用途"><a class="header-anchor" href="#类型断言的用途"> </a>类型断言的用途</h3>
<h4 id="将一个联合类型断言为其中一个类型"><a class="header-anchor" href="#将一个联合类型断言为其中一个类型"> </a>将一个联合类型断言为其中一个类型</h4>
<p>之前提到过，当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们<strong>只能访问此联合类型的所有类型中共有的属性或方法</strong>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Cat <span class="token operator">|</span> Fish<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> animal<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而有时候，我们确实需要在还不确定类型的时候就访问其中一个类型特有的属性或方法，比如：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isFish</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Cat <span class="token operator">|</span> Fish<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> animal<span class="token punctuation">.</span>swim <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// index.ts:11:23 - error TS2339: Property 'swim' does not exist on type 'Cat | Fish'.</span>
<span class="token comment">//   Property 'swim' does not exist on type 'Cat'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的例子中，获取 <code>animal.swim</code> 的时候会报错。</p>
<p>此时可以使用类型断言，将 <code>animal</code> 断言成 <code>Fish</code>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isFish</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Cat <span class="token operator">|</span> Fish<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Fish<span class="token punctuation">)</span><span class="token punctuation">.</span>swim <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样就可以解决访问 <code>animal.swim</code> 时报错的问题了。</p>
<p><em>需要注意的是，类型断言只能够「欺骗」TypeScript 编译器，无法避免运行时的错误，反而滥用类型断言可能会导致运行时错误</em>。</p>
<p>下面上面的例子编译时不会报错，但在运行时会报错：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">swim</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Cat <span class="token operator">|</span> Fish<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Fish<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> tom<span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">swim</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Uncaught TypeError: animal.swim is not a function`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>原因是 <code>(animal as Fish).swim()</code> 这段代码隐藏了 <code>animal</code> 可能为 <code>Cat</code> 的情况，将 <code>animal</code> 直接断言为 <code>Fish</code> 了，而 TypeScript 编译器信任了我们的断言，故在调用 <code>swim()</code> 时没有编译错误。可是 <code>swim</code> 函数接受的参数是 <code>Cat | Fish</code>，一旦传入的参数是 <code>Cat</code> 类型的变量，由于 <code>Cat</code> 上没有 <code>swim</code> 方法，就会导致运行时错误了。</p>
<p>总之，使用类型断言时一定要格外小心，尽量避免断言后调用方法或引用深层属性，以减少不必要的运行时错误。</p>
<h4 id="将一个父类断言为更加具体的子类"><a class="header-anchor" href="#将一个父类断言为更加具体的子类"> </a>将一个父类断言为更加具体的子类</h4>
<p>当类之间有继承关系时，类型断言也是很常见的：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">ApiError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>
    code<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">HttpError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>
    statusCode<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isApiError</span><span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>error <span class="token keyword">as</span> ApiError<span class="token punctuation">)</span><span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的例子中，我们声明了函数 <code>isApiError</code>，它用来判断传入的参数是不是 <code>ApiError</code> 类型，为了实现这样一个函数，它的参数的类型肯定得是比较抽象的父类 <code>Error</code>，这样的话这个函数就能接受 <code>Error</code> 或它的子类作为参数了。</p>
<p>但是由于父类 <code>Error</code> 中没有 <code>code</code> 属性，故直接获取 <code>error.code</code> 会报错，需要使用类型断言获取 <code>(error as ApiError).code</code>。</p>
<p>大家可能会注意到，在这个例子中有一个更合适的方式来判断是不是 <code>ApiError</code>，那就是使用 <code>instanceof</code>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">ApiError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>
    code<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">HttpError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>
    statusCode<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isApiError</span><span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token keyword">instanceof</span> <span class="token class-name">ApiError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的例子中，确实使用 <code>instanceof</code> 更加合适，因为 <code>ApiError</code> 是一个 JavaScript 的类，能够通过 <code>instanceof</code> 来判断 <code>error</code> 是否是它的实例。</p>
<p>但是有的情况下 <code>ApiError</code> 和 <code>HttpError</code> 不是一个真正的类，而只是一个 TypeScript 的接口（<code>interface</code>），接口是一个类型，不是一个真正的值，它在编译结果中会被删除，当然就无法使用 <code>instanceof</code> 来做运行时判断了：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ApiError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>
    code<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">HttpError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>
    statusCode<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isApiError</span><span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token keyword">instanceof</span> <span class="token class-name">ApiError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// index.ts:9:26 - error TS2693: 'ApiError' only refers to a type, but is being used as a value here.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时就只能用类型断言，通过判断是否存在 <code>code</code> 属性，来判断传入的参数是不是 <code>ApiError</code> 了：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ApiError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>
    code<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">HttpError</span> <span class="token keyword">extends</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span>
    statusCode<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isApiError</span><span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>error <span class="token keyword">as</span> ApiError<span class="token punctuation">)</span><span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="将任意一个类型断言为-any"><a class="header-anchor" href="#将任意一个类型断言为-any"> </a>将任意一个类型断言为 any</h4>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">window<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts:1:8 - error TS2339: Property 'foo' does not exist on type 'Window &amp; typeof globalThis'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>上面的例子中，我们需要将 <code>window</code> 上添加一个属性 <code>foo</code>，但 TypeScript 编译时会报错，提示我们 <code>window</code> 上不存在 <code>foo</code> 属性。</p>
<p>此时我们可以使用 <code>as any</code> 临时将 <code>window</code> 断言为 <code>any</code> 类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token punctuation">(</span>window <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在 <code>any</code> 类型的变量上，访问任何属性都是允许的。</p>
<p>需要注意的是，将一个变量断言为 <code>any</code> 可以说是解决 TypeScript 中类型问题的最后一个手段。</p>
<p><strong>它极有可能掩盖了真正的类型错误，所以如果不是非常确定，就不要使用 <code>as any</code>。</strong></p>
<p>上面的例子中，我们也可以通过扩展 <code>window</code>的类型解决这个错误，不过如果只是临时的增加 <code>foo</code> 属性，<code>as any</code> 会更加方便。</p>
<p>总之，<strong>一方面不能滥用 <code>as any</code>，另一方面也不要完全否定它的作用，我们需要在类型的严格性和开发的便利性之间掌握平衡</strong>（这也是 <a href="https://github.com/Microsoft/TypeScript/wiki/TypeScript-Design-Goals">TypeScript 的设计理念</a>之一），才能发挥出 TypeScript 最大的价值。</p>
<h4 id="将-any-断言为一个具体的类型"><a class="header-anchor" href="#将-any-断言为一个具体的类型"> </a>将 any 断言为一个具体的类型</h4>
<p>在日常的开发中，我们不可避免的需要处理 <code>any</code> 类型的变量，它们可能是由于第三方库未能定义好自己的类型，也有可能是历史遗留的或其他人编写的烂代码，还可能是受到 TypeScript 类型系统的限制而无法精确定义类型的场景。</p>
<p>遇到 <code>any</code> 类型的变量时，我们可以选择无视它，任由它滋生更多的 <code>any</code>。</p>
<p>我们也可以选择改进它，通过类型断言及时的把 <code>any</code> 断言为精确的类型，亡羊补牢，使我们的代码向着高可维护性的目标发展。</p>
<p>举例来说，历史遗留的代码中有个 <code>getCacheData</code>，它的返回值是 <code>any</code>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getCacheData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>window <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>那么我们在使用它时，最好能够将调用了它之后的返回值断言成一个精确的类型，这样就方便了后续的操作：</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">getCacheData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>window <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> tom <span class="token operator">=</span> <span class="token function">getCacheData</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Cat<span class="token punctuation">;</span>
tom<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的例子中，我们调用完 <code>getCacheData</code> 之后，立即将它断言为 <code>Cat</code> 类型。这样的话明确了 <code>tom</code> 的类型，后续对 <code>tom</code> 的访问时就有了代码补全，提高了代码的可维护性。</p>
<h3 id="类型断言的限制"><a class="header-anchor" href="#类型断言的限制"> </a>类型断言的限制</h3>
<p>从上面的例子中，我们可以总结出：</p>
<ul>
<li>联合类型可以被断言为其中一个类型</li>
<li>父类可以被断言为子类</li>
<li>任何类型都可以被断言为 any</li>
<li>any 可以被断言为任何类型</li>
</ul>
<p>但是，并不是任何一个类型都可以被断言为任何另一个类型。</p>
<p>具体来说，若 <code>A</code> 兼容 <code>B</code>，那么 <code>A</code> 能够被断言为 <code>B</code>，<code>B</code> 也能被断言为 <code>A</code>。</p>
<p>下面我们通过一个简化的例子，来理解类型断言的限制：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> tom<span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> animal<span class="token operator">:</span> Animal <span class="token operator">=</span> tom<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在上面的例子中，<code>Cat</code> 包含了 <code>Animal</code> 中的所有属性，除此之外，它还有一个额外的方法 <code>run</code>。TypeScript 并不关心 <code>Cat</code> 和 <code>Animal</code> 之间定义时是什么关系，而只会看它们最终的结构有什么关系，就像面向对象编程中我们可以将子类的实例赋值给类型为父类的变量——所以它与 <code>Cat extends Animal</code> 是等价的：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>TypeScript 中更专业的说法是：<code>Animal</code> 兼容 <code>Cat</code>。</p>
<p>当 <code>Animal</code> 兼容 <code>Cat</code> 时，它们就可以互相进行类型断言了：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">testAnimal</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Cat<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">testCat</span><span class="token punctuation">(</span>cat<span class="token operator">:</span> Cat<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>cat <span class="token keyword">as</span> Animal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样的设计其实也很容易就能理解：</p>
<ul>
<li>允许 <code>animal as Cat</code> 是因为「父类可以被断言为子类」，这个前面已经学习过了</li>
<li>允许 <code>cat as Animal</code> 是因为既然子类拥有父类的属性和方法，那么被断言为父类，获取父类的属性、调用父类的方法，就不会有任何问题，故「子类可以被断言为父类」</li>
</ul>
<p>需要注意的是，这里我们使用了简化的父类子类的关系来表达类型的兼容性，而实际上 TypeScript 在判断类型的兼容性时，比这种情况复杂很多，详细请参考<code>类型的兼容性</code>章节。</p>
<p>总之：</p>
<p>要使得 <code>A</code> 能够被断言为 <code>B</code>，只需要 <code>A</code> 兼容 <code>B</code> 或 <code>B</code> 兼容 <code>A</code> 即可，这也是为了在类型断言时的安全考虑，毕竟毫无根据的断言是非常危险的。</p>
<h3 id="综上所述"><a class="header-anchor" href="#综上所述"> </a>综上所述</h3>
<ul>
<li>联合类型可以被断言为其中一个类型</li>
<li>父类可以被断言为子类</li>
<li>任何类型都可以被断言为 any</li>
<li>any 可以被断言为任何类型</li>
<li>要使得 <code>A</code> 能够被断言为 <code>B</code>，只需要 <code>A</code> 兼容 <code>B</code> 或 <code>B</code> 兼容 <code>A</code> 即可</li>
</ul>
<p>其实前四种情况都是最后一个的特例。</p>
<h3 id="双重断言"><a class="header-anchor" href="#双重断言"> </a>双重断言</h3>
<p>既然：</p>
<ul>
<li>任何类型都可以被断言为 any</li>
<li>any 可以被断言为任何类型</li>
</ul>
<p>那么我们就可以使用双重断言 <code>as any as Foo</code> 来将任何一个类型断言为任何另一个类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span>
    <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">testCat</span><span class="token punctuation">(</span>cat<span class="token operator">:</span> Cat<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>cat <span class="token keyword">as</span> <span class="token builtin">any</span> <span class="token keyword">as</span> Fish<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在上面的例子中，若直接使用 <code>cat as Fish</code> 肯定会报错，因为 <code>Cat</code> 和 <code>Fish</code> 互相都不兼容。</p>
<p>但是若使用双重断言，则可以打破「要使得 <code>A</code> 能够被断言为 <code>B</code>，只需要 <code>A</code> 兼容 <code>B</code> 或 <code>B</code> 兼容 <code>A</code> 即可」的限制，将任何一个类型断言为任何另一个类型。</p>
<p>若你使用了这种双重断言，那么十有八九是非常错误的，它很可能会导致运行时错误。</p>
<p><em><strong>除非迫不得已，千万别用双重断言。</strong></em></p>
<h3 id="类型断言-vs-类型转换"><a class="header-anchor" href="#类型断言-vs-类型转换"> </a>类型断言 vs 类型转换</h3>
<p>类型断言只会影响 TypeScript 编译时的类型，类型断言语句在编译结果中会被删除：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">toBoolean</span><span class="token punctuation">(</span>something<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> something <span class="token keyword">as</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">toBoolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回值为 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在上面的例子中，将 <code>something</code> 断言为 <code>boolean</code> 虽然可以通过编译，但是并没有什么用，代码在编译后会变成：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">toBoolean</span><span class="token punctuation">(</span><span class="token parameter">something</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> something<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">toBoolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回值为 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以<strong>类型断言不是类型转换，它不会真的影响到变量的类型</strong>。</p>
<p>若要进行类型转换，需要直接调用类型转换的方法：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">toBoolean</span><span class="token punctuation">(</span>something<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>something<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">toBoolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回值为 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="类型断言-vs-类型声明"><a class="header-anchor" href="#类型断言-vs-类型声明"> </a>类型断言 vs 类型声明</h3>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getCacheData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>window <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> tom <span class="token operator">=</span> <span class="token function">getCacheData</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Cat<span class="token punctuation">;</span>
tom<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在上面的例子中，我们使用 <code>as Cat</code> 将 <code>any</code> 类型断言为了 <code>Cat</code> 类型。</p>
<p>但实际上还有其他方式可以解决这个问题：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getCacheData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>window <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> tom<span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token function">getCacheData</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tom<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的例子中，我们通过类型声明的方式，将 <code>tom</code> 声明为 <code>Cat</code>，然后再将 <code>any</code> 类型的 <code>getCacheData('tom')</code> 赋值给 <code>Cat</code> 类型的 <code>tom</code>。</p>
<p>这和类型断言是非常相似的，而且产生的结果也几乎是一样的——<code>tom</code> 在接下来的代码中都变成了 <code>Cat</code> 类型。</p>
<p>它们的区别，可以通过这个例子来理解：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> animal<span class="token operator">:</span> Animal <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'tom'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> tom <span class="token operator">=</span> animal <span class="token keyword">as</span> Cat<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在上面的例子中，由于 <code>Animal</code> 兼容 <code>Cat</code>，故可以将 <code>animal</code> 断言为 <code>Cat</code> 赋值给 <code>tom</code>。</p>
<p>但是若直接声明 <code>tom</code> 为 <code>Cat</code> 类型，则会报错，因为不允许将 <code>animal</code> 赋值为 <code>Cat</code> 类型的 <code>tom</code>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> animal<span class="token operator">:</span> Animal <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">'tom'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> tom<span class="token operator">:</span> Cat <span class="token operator">=</span> animal<span class="token punctuation">;</span>

<span class="token comment">// index.ts:12:5 - error TS2741: Property 'run' is missing in type 'Animal' but required in type 'Cat'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这很容易理解，<code>Animal</code> 可以看作是 <code>Cat</code> 的父类，当然不能将父类的实例赋值给类型为子类的变量。</p>
<p>深入的讲，它们的<strong>核心区别</strong>就在于：</p>
<ul>
<li><code>animal</code> 断言为 <code>Cat</code>，只需要满足 <code>Animal</code> 兼容 <code>Cat</code> 或 <code>Cat</code> 兼容 <code>Animal</code> 即可</li>
<li><code>animal</code> 赋值给 <code>tom</code>，需要满足 <code>Cat</code> 兼容 <code>Animal</code> 才行</li>
</ul>
<p>但是 <code>Cat</code> 并不兼容 <code>Animal</code>。</p>
<p>而在前一个例子中，由于 <code>getCacheData('tom')</code> 是 <code>any</code> 类型，<code>any</code> 兼容 <code>Cat</code>，<code>Cat</code> 也兼容 <code>any</code>，故</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> tom <span class="token operator">=</span> <span class="token function">getCacheData</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Cat<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>等价于</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> tom<span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token function">getCacheData</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>知道了它们的核心区别，就知道了类型声明是比类型断言更加严格的。</p>
<p>所以<strong>为了增加代码的质量，我们最好优先使用类型声明，这也比类型断言的 <code>as</code> 语法更加优雅</strong>。</p>
<h3 id="类型断言-vs-泛型"><a class="header-anchor" href="#类型断言-vs-泛型"> </a>类型断言 vs 泛型</h3>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getCacheData</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>window <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> tom <span class="token operator">=</span> <span class="token function">getCacheData</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> Cat<span class="token punctuation">;</span>
tom<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们还有第三种方式可以解决这个问题，那就是泛型：</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">getCacheData</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>window <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> tom <span class="token operator">=</span> <span class="token generic-function"><span class="token function">getCacheData</span><span class="token generic class-name"><span class="token operator">&lt;</span>Cat<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tom<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过给 <code>getCacheData</code> 函数添加了一个泛型 <code>&lt;T&gt;</code>，我们可以更加规范的实现对 <code>getCacheData</code> 返回值的约束，这也同时去除掉了代码中的 <code>any</code>，是<strong>最优的一个解决方案</strong>。</p>
<h2 id="声明文件"><a class="header-anchor" href="#声明文件"> </a>声明文件</h2>
<p>先跳过</p>
<h2 id="内置对象"><a class="header-anchor" href="#内置对象"> </a>内置对象</h2>
<p>JavaScript中，内置对象是指根据标准在全局作用域（Global）上存在的对象。这里的标准是指 ECMAScript 和其他环境（比如 DOM）的标准。</p>
<h3 id="ECMAScript的内置对象"><a class="header-anchor" href="#ECMAScript的内置对象"> </a>ECMAScript的内置对象</h3>
<p>ECMAScript 标准提供的内置对象有：</p>
<p><code>Boolean</code>、<code>Error</code>、<code>Date</code>、<code>RegExp</code> 等。</p>
<p>我们可以在 TypeScript 中将变量定义为这些类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> b<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> e<span class="token operator">:</span> Error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Error occurred'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> d<span class="token operator">:</span> Date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> r<span class="token operator">:</span> RegExp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>更多的内置对象，可以查看 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects">MDN 的文档</a>。</p>
<p>而他们的定义文件，则在 <a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib">TypeScript 核心库的定义文件</a>中。</p>
<h3 id="DOM-和-BOM的内置对象"><a class="header-anchor" href="#DOM-和-BOM的内置对象"> </a>DOM 和 BOM的内置对象</h3>
<p>DOM 和 BOM 提供的内置对象有：</p>
<p><code>Document</code>、<code>HTMLElement</code>、<code>Event</code>、<code>NodeList</code> 等。</p>
<p>TypeScript 中会经常用到这些类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> body<span class="token operator">:</span> HTMLElement <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
<span class="token keyword">let</span> allDiv<span class="token operator">:</span> NodeList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token operator">:</span> MouseEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Do something</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>它们的定义文件同样在 <a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib">TypeScript 核心库的定义文件</a>中。</p>
<h3 id="TypeScript-核心库的定义文件"><a class="header-anchor" href="#TypeScript-核心库的定义文件"> </a>TypeScript 核心库的定义文件</h3>
<p><a href="https://github.com/Microsoft/TypeScript/tree/master/src/lib">TypeScript 核心库的定义文件</a>中定义了所有浏览器环境需要用到的类型，并且是预置在 TypeScript 中的。</p>
<h3 id="用-TypeScript-写-Node-js"><a class="header-anchor" href="#用-TypeScript-写-Node-js"> </a>用 TypeScript 写 Node.js</h3>
<p>Node.js 不是内置对象的一部分，如果想用 TypeScript 写 Node.js，则需要引入第三方声明文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> @types/node --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="进阶"><a class="header-anchor" href="#进阶"> </a>进阶</h1>
<h2 id="类型别名"><a class="header-anchor" href="#类型别名"> </a>类型别名</h2>
<p>类型别名用来给一个类型起个新名字。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">Name</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">NameResolver</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> <span class="token class-name">NameOrResolver</span> <span class="token operator">=</span> Name <span class="token operator">|</span> NameResolver<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span>n<span class="token operator">:</span> NameOrResolver<span class="token punctuation">)</span><span class="token operator">:</span> Name <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> n <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例中，我们使用 <code>type</code> 创建类型别名。</p>
<p>类型别名常用于联合类型。</p>
<h2 id="字符串字面类型"><a class="header-anchor" href="#字符串字面类型"> </a>字符串字面类型</h2>
<p>字符串字面类型用来约束取值只有某几个字符串中的一个。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">type</span> <span class="token class-name">EventNames</span> <span class="token operator">=</span> <span class="token string">'click'</span> <span class="token operator">|</span> <span class="token string">'scroll'</span> <span class="token operator">|</span> <span class="token string">'mousemove'</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">handleEvent</span><span class="token punctuation">(</span>ele<span class="token operator">:</span> Element<span class="token punctuation">,</span> event<span class="token operator">:</span> EventNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// do something</span>
<span class="token punctuation">}</span>

<span class="token function">handleEvent</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'scroll'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 没问题</span>
<span class="token function">handleEvent</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'dblclick'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错，event 不能为 'dblclick'</span>

<span class="token comment">// index.ts(7,47): error TS2345: Argument of type '"dblclick"' is not assignable to parameter of type 'EventNames'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例中，我们使用 <code>type</code> 定了一个字符串字面量类型 <code>EventNames</code>，它只能取三种字符串中的一种。</p>
<p>注意，<strong>类型别名与字符串字面量类型都是使用 <code>type</code> 进行定义。</strong></p>
<h2 id="元组"><a class="header-anchor" href="#元组"> </a>元组</h2>
<p>数组合并了相同类型的对象，而元组（Tuple）合并了不同类型的对象。</p>
<p>元组起源于函数编程语言（如 F#），这些语言中会频繁使用元组。</p>
<p>定义一对值分别为 <code>string</code> 和 <code>number</code> 的元组：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> tom<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>当赋值或访问一个已知索引的元素时，会得到正确的类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> tom<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span>
tom<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>

tom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tom<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以只赋值其中一项：</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token keyword">let</span> tom<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tom<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>但是当直接对元组类型的变量进行初始化或者赋值的时候，需要提供所有元组类型中指定的项。</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token keyword">let</span> tom<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tom <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> tom<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tom <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Property '1' is missing in type '[string]' but required in type '[string, number]'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="越界的元素"><a class="header-anchor" href="#越界的元素"> </a>越界的元素</h3>
<p>当添加越界的元素时，它的类型会被限制为元组中每个类型的联合类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> tom<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tom <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
tom<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'male'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tom<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Argument of type 'true' is not assignable to parameter of type 'string | number'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="枚举"><a class="header-anchor" href="#枚举"> </a>枚举</h2>
<p>枚举（Enum）类型用于取值被限定在一定范围内的场景，比如一周只能有七天，颜色限定为红绿蓝等。</p>
<p>枚举使用 <code>enum</code> 关键字来定义：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Days <span class="token punctuation">{</span>Sun<span class="token punctuation">,</span> Mon<span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token punctuation">,</span> Sat<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>枚举成员会被赋值为从 <code>0</code> 开始递增的数字，同时也会对枚举值到枚举名进行反向映射：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Days <span class="token punctuation">{</span>Sun<span class="token punctuation">,</span> Mon<span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token punctuation">,</span> Sat<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">"Sun"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">"Mon"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">"Tue"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">"Sat"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"Sun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"Mon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"Tue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"Sat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>事实上，上面的例子会被编译为：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Days<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Days</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Sun"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sun"</span><span class="token punctuation">;</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Mon"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Mon"</span><span class="token punctuation">;</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Tue"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Tue"</span><span class="token punctuation">;</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Wed"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Wed"</span><span class="token punctuation">;</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Thu"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Thu"</span><span class="token punctuation">;</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Fri"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Fri"</span><span class="token punctuation">;</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Sat"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sat"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Days <span class="token operator">||</span> <span class="token punctuation">(</span>Days <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="手动赋值"><a class="header-anchor" href="#手动赋值"> </a>手动赋值</h3>
<p>我们也可以给枚举项手动赋值：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Days <span class="token punctuation">{</span>Sun <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> Mon <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token punctuation">,</span> Sat<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">"Sun"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">"Mon"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">"Tue"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">"Sat"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的例子中，未手动赋值的枚举项会接着上一个枚举项递增。</p>
<p>如果未手动赋值的枚举项与手动赋值的重复了，TypeScript 是不会察觉到这一点的：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Days <span class="token punctuation">{</span>Sun <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> Mon <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token punctuation">,</span> Sat<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">"Sun"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">"Wed"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"Sun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"Wed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的例子中，递增到 <code>3</code> 的时候与前面的 <code>Sun</code> 的取值重复了，但是 TypeScript 并没有报错，导致 <code>Days[3]</code> 的值先是 <code>"Sun"</code>，而后又被 <code>"Wed"</code> 覆盖了。编译的结果是：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Days<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Days</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Sun"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sun"</span><span class="token punctuation">;</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Mon"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Mon"</span><span class="token punctuation">;</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Tue"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Tue"</span><span class="token punctuation">;</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Wed"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Wed"</span><span class="token punctuation">;</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Thu"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Thu"</span><span class="token punctuation">;</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Fri"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Fri"</span><span class="token punctuation">;</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Sat"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sat"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Days <span class="token operator">||</span> <span class="token punctuation">(</span>Days <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以使用的时候需要注意，最好不要出现这种覆盖的情况。</p>
<p>当然，手动赋值的枚举项也可以为小数或负数，此时后续未手动赋值的项的递增步长仍为 <code>1</code>：</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token keyword">enum</span> Days <span class="token punctuation">{</span>Sun <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> Mon <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token punctuation">,</span> Sat<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">"Sun"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">"Mon"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">"Tue"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Days<span class="token punctuation">[</span><span class="token string">"Sat"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">6.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>手动赋值的枚举项还可以不是数字，此时需要使用类型断言来让 tsc 无视类型检查 (编译出的 js 仍然是可用的)：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Days <span class="token punctuation">{</span>Sun <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> Mon<span class="token punctuation">,</span> Tue<span class="token punctuation">,</span> Wed<span class="token punctuation">,</span> Thu<span class="token punctuation">,</span> Fri<span class="token punctuation">,</span> Sat <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token string">"S"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> Days<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>Days<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Sun"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sun"</span><span class="token punctuation">;</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Mon"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Mon"</span><span class="token punctuation">;</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Tue"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Tue"</span><span class="token punctuation">;</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Wed"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Wed"</span><span class="token punctuation">;</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Thu"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Thu"</span><span class="token punctuation">;</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Fri"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Fri"</span><span class="token punctuation">;</span>
    Days<span class="token punctuation">[</span>Days<span class="token punctuation">[</span><span class="token string">"Sat"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"S"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sat"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Days <span class="token operator">||</span> <span class="token punctuation">(</span>Days <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="常数项和计算所得项"><a class="header-anchor" href="#常数项和计算所得项"> </a>常数项和计算所得项</h3>
<p>枚举项有两种类型：</p>
<ul>
<li>常数项（constant member）：如我们前面所举的例子</li>
<li>计算所得项（computed member）</li>
</ul>
<p>下面为一个典型的计算所得项的例子：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript">emum Color <span class="token punctuation">{</span>Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>"blue".length</code> 就是一个计算所得项。</p>
<p><strong>如果紧接在计算所得项后面的是未手动赋值的项，那么它就会因为无法获得初始值而报错</strong>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(1,33): error TS1061: Enum member must have initializer.</span>
<span class="token comment">// index.ts(1,40): error TS1061: Enum member must have initializer.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面是常数项和计算所得项的完整定义，部分引用自<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Enums.html">中文手册 - 枚举</a>：</p>
<blockquote>
<p>当满足以下条件时，枚举成员被当作是常数：</p>
<ul>
<li>不具有初始化函数并且之前的枚举成员是常数。在这种情况下，当前枚举成员的值为上一个枚举成员的值加 <code>1</code>。但第一个枚举元素是个例外。如果它没有初始化方法，那么它的初始值为 <code>0</code>。</li>
<li>枚举成员使用常数枚举表达式初始化。常数枚举表达式是 TypeScript 表达式的子集，它可以在编译阶段求值。当一个表达式满足下面条件之一时，它就是一个常数枚举表达式：
<ul>
<li>数字字面量</li>
<li>引用之前定义的常数枚举成员（可以是在不同的枚举类型中定义的）如果这个成员是在同一个枚举类型中定义的，可以使用非限定名来引用</li>
<li>带括号的常数枚举表达式</li>
<li><code>+</code>, <code>-</code>, <code>~</code> 一元运算符应用于常数枚举表达式</li>
<li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>, <code>&amp;</code>, <code>|</code>, <code>^</code> 二元运算符，常数枚举表达式做为其一个操作对象。若常数枚举表达式求值后为 NaN 或 Infinity，则会在编译阶段报错</li>
</ul>
</li>
</ul>
<p>所有其它情况的枚举成员被当作是需要计算得出的值。</p>
</blockquote>
<h3 id="常数枚举"><a class="header-anchor" href="#常数枚举"> </a>常数枚举</h3>
<p>常数枚举是使用<code>const enum</code>定义的枚举类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token keyword">enum</span> Directions <span class="token punctuation">{</span>
    Up<span class="token punctuation">,</span>
    Down<span class="token punctuation">,</span>
    Left<span class="token punctuation">,</span>
    Right
<span class="token punctuation">}</span>

<span class="token keyword">let</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span>Directions<span class="token punctuation">.</span>Up<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Down<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Right<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>常数枚举与普通枚举的区别是，它会在编译阶段被删除，并且不能包含计算成员。</p>
<p>上例的编译结果是：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token comment">/* Up */</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* Down */</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token comment">/* Left */</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token comment">/* Right */</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>假如包含了计算成员，则会在编译阶段报错：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(1,38): error TS2474: In 'const' enum declarations member initializer must be constant expression.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="外部枚举"><a class="header-anchor" href="#外部枚举"> </a>外部枚举</h3>
<p>外部枚举（Ambient Enums）是使用 <code>declare enum</code> 定义的枚举类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">enum</span> Directions <span class="token punctuation">{</span>
    Up<span class="token punctuation">,</span>
    Down<span class="token punctuation">,</span>
    Left<span class="token punctuation">,</span>
    Right
<span class="token punctuation">}</span>

<span class="token keyword">let</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span>Directions<span class="token punctuation">.</span>Up<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Down<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Right<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>之前提到过，<code>declare</code> 定义的类型只会用于编译时的检查，编译结果中会被删除。</p>
<p>上例的编译结果是：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span>Directions<span class="token punctuation">.</span>Up<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Down<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Right<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>外部枚举与声明语句一样，常出现在声明文件中。</p>
<p>同时使用 <code>declare</code> 和 <code>const</code> 也是可以的：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> Directions <span class="token punctuation">{</span>
    Up<span class="token punctuation">,</span>
    Down<span class="token punctuation">,</span>
    Left<span class="token punctuation">,</span>
    Right
<span class="token punctuation">}</span>

<span class="token keyword">let</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span>Directions<span class="token punctuation">.</span>Up<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Down<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Left<span class="token punctuation">,</span> Directions<span class="token punctuation">.</span>Right<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>编译结果：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token comment">/* Up */</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* Down */</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token comment">/* Left */</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token comment">/* Right */</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>TypeScript 的枚举类型的概念<a href="https://msdn.microsoft.com/zh-cn/library/sbbt4032.aspx">来源于 C#</a>。</p>
</blockquote>
<h2 id="类"><a class="header-anchor" href="#类"> </a>类</h2>
<p>传统方法中，JavaScript 通过构造函数实现类的概念，通过原型链实现继承。而在 ES6 中，我们终于迎来了 <code>class</code>。</p>
<p>TypeScript 除了实现了所有 ES6 中的类的功能以外，还添加了一些新的用法。</p>
<p>这一节主要介绍类的用法，下一节再介绍如何定义类的类型。</p>
<h3 id="类的概念"><a class="header-anchor" href="#类的概念"> </a>类的概念</h3>
<p>虽然 JavaScript 中有类的概念，但是可能大多数 JavaScript 程序员并不是非常熟悉类，这里对类相关的概念做一个简单的介绍。</p>
<ul>
<li>类（Class）：定义了一件事物的抽象特点，包含它的属性和方法</li>
<li>对象（Object）：类的实例，通过 <code>new</code> 生成</li>
<li>面向对象（OOP）的三大特性：封装、继承、多态
<ul>
<li>封装（Encapsulation）：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据</li>
<li>继承（Inheritance）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性</li>
<li>多态（Polymorphism）：由继承而产生了相关的不同的类，对同一个方法可以有不同的响应。比如 <code>Cat</code> 和 <code>Dog</code> 都继承自 <code>Animal</code>，但是分别实现了自己的 <code>eat</code> 方法。此时针对某一个实例，我们无需了解它是 <code>Cat</code> 还是 <code>Dog</code>，就可以直接调用 <code>eat</code> 方法，程序会自动判断出来应该如何执行 <code>eat</code></li>
</ul>
</li>
<li>存取器（Getter &amp; Setter）：用以改变属性的读取和赋值行为</li>
<li>修饰符（Modifiers）：修饰符是一些关键字，用于限定成员或类型的性质。比如 <code>public</code> 表示公有属性或方法</li>
<li>抽象类（Abstract Class）：抽象类是供其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现</li>
<li>接口（Interfaces）：不同类之间公有的属性或方法，可以抽象成一个接口。接口可以被类实现（Implements）。一个类只能继承自另一个类，但是可以实现多个接口</li>
</ul>
<h3 id="ES6-中类的用法"><a class="header-anchor" href="#ES6-中类的用法"> </a>ES6 中类的用法</h3>
<p>更详细的介绍可以参考 <a href="http://es6.ruanyifeng.com/#docs/class">ECMAScript 6 入门 - Class</a>。</p>
<h4 id="属性和方法"><a class="header-anchor" href="#属性和方法"> </a>属性和方法</h4>
<p>使用<code>class</code>定义类，使用<code>constructor</code>定义构造函数。</p>
<p>通过<code>new</code>生成新实例的时候，会自动调用构造函数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// My name is Jack</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="类的继承"><a class="header-anchor" href="#类的继承"> </a>类的继承</h4>
<p>使用 <code>extends</code> 关键字实现继承，子类中使用 <code>super</code> 关键字来调用父类的构造函数和方法。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类的 constructor(name)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">'Meow, '</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类的 sayHi()</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Tom</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Meow, My name is Tom</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="存取器"><a class="header-anchor" href="#存取器"> </a>存取器</h4>
<p>使用 getter 和 setter 可以改变属性的赋值和读取行为：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">'Jack'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setter: '</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Kitty'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// setter: Kitty</span>
a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span> <span class="token comment">// setter: Tom</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Jack</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="静态方法"><a class="header-anchor" href="#静态方法"> </a>静态方法</h4>
<p>使用 <code>static</code> 修饰符修饰的方法称为静态方法，它们不需要实例化，而是直接通过类来调用：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function">isAnimal</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Animal<span class="token punctuation">.</span><span class="token function">isAnimal</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
a<span class="token punctuation">.</span><span class="token function">isAnimal</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: a.isAnimal is not a function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="ES7-中类的方法"><a class="header-anchor" href="#ES7-中类的方法"> </a>ES7 中类的方法</h3>
<h4 id="实例属性"><a class="header-anchor" href="#实例属性"> </a>实例属性</h4>
<p>ES6 中实例的属性只能通过构造函数中的 <code>this.xxx</code> 来定义，ES7 提案中可以直接在类里面定义：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  name <span class="token operator">=</span> <span class="token string">'Jack'</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Jack</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="静态属性"><a class="header-anchor" href="#静态属性"> </a>静态属性</h4>
<p>ES7 提案中，可以使用 <code>static</code> 定义一个静态属性：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> num <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="TypeScript-中类的用法"><a class="header-anchor" href="#TypeScript-中类的用法"> </a>TypeScript 中类的用法</h3>
<h4 id="public、private-和-protected"><a class="header-anchor" href="#public、private-和-protected"> </a>public、private 和 protected</h4>
<p>TypeScript 可以使用三种访问修饰符（Access Modifiers），分别是 <code>public</code>、<code>private</code> 和 <code>protected</code>。</p>
<ul>
<li><code>public</code> 修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 <code>public</code> 的</li>
<li><code>private</code> 修饰的属性或方法是私有的，不能在声明它的类的外部访问</li>
<li><code>protected</code> 修饰的属性或方法是受保护的，它和 <code>private</code> 类似，区别是它在子类中也是允许被访问的</li>
</ul>
<p>下面举一些例子：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> name<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Jack</span>
a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Tom</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的例子中，<code>name</code> 被设置为了 <code>public</code>，所以直接访问实例的 <code>name</code> 属性是允许的。</p>
<p>很多时候，我们希望有的属性是无法直接存取的，这时候就可以用 <code>private</code> 了：</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> name<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(9,13): error TS2341: Property 'name' is private and only accessible within class 'Animal'.</span>
<span class="token comment">// index.ts(10,1): error TS2341: Property 'name' is private and only accessible within class 'Animal'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><em>需要注意的是，TypeScript 编译之后的代码中，并没有限制 <code>private</code> 属性在外部的可访问性。</em></p>
<p>上面的例子编译后的代码是：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Animal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> Animal<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用 <code>private</code> 修饰的属性或方法，在子类中也是不允许访问的：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> name<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// index.ts(11,17): error TS2341: Property 'name' is private and only accessible within class 'Animal'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而如果是用 <code>protected</code> 修饰，则允许在子类中访问：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">protected</span> name<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当构造函数修饰为 <code>private</code> 时，该类不允许被继承或者实例化：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> name<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(7,19): TS2675: Cannot extend a class 'Animal'. Class constructor is marked as private.</span>
<span class="token comment">// index.ts(13,9): TS2673: Constructor of class 'Animal' is private and only accessible within the class declaration.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当构造函数修饰为 <code>protected</code> 时，该类只允许被继承：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> name<span class="token punctuation">;</span>
  <span class="token keyword">protected</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(13,9): TS2674: Constructor of class 'Animal' is protected and only accessible within the class declaration.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="参数属性"><a class="header-anchor" href="#参数属性"> </a>参数属性</h4>
<p>修饰符和<code>readonly</code>还可以使用在构造函数参数中，等同于类中定义该属性同时给该属性赋值，使代码更简洁。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token comment">// public name: string;</span>
  <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this.name = name;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="readonly"><a class="header-anchor" href="#readonly"> </a>readonly</h4>
<p>只读属性关键字，只允许出现在属性声明或索引签名或构造函数中。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> name<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Jack</span>
a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(10,3): TS2540: Cannot assign to 'name' because it is a read-only property.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意如果 <code>readonly</code> 和其他访问修饰符同时存在的话，需要写在其后面。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token comment">// public readonly name;</span>
  <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token keyword">readonly</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this.name = name;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="抽象类-abstract"><a class="header-anchor" href="#抽象类-abstract"> </a>抽象类 abstract</h4>
<p><code>abstract</code> 用于定义抽象类和其中的抽象方法。</p>
<p>什么是抽象类？</p>
<p>首先，抽象类是不允许被实例化的：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> name<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(9,11): error TS2511: Cannot create an instance of the abstract class 'Animal'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的例子中，我们定义了一个抽象类 <code>Animal</code>，并且定义了一个抽象方法 <code>sayHi</code>。在实例化抽象类的时候报错了。</p>
<p>其次，抽象类中的抽象方法必须被子类实现：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> name<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is eating.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(9,7): error TS2515: Non-abstract class 'Cat' does not implement inherited abstract member 'sayHi' from class 'Animal'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的例子中，我们定义了一个类 <code>Cat</code> 继承了抽象类 <code>Animal</code>，但是没有实现抽象方法 <code>sayHi</code>，所以编译报错了。</p>
<p>下面是一个正确使用抽象类的例子：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> name<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Meow, My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的例子中，我们实现了抽象方法 <code>sayHi</code>，编译通过了。</p>
<p>需要注意的是，即使是抽象方法，TypeScript 的编译结果中，仍然会存在这个类，上面的代码的编译结果是：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> __extends <span class="token operator">=</span>
  <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__extends<span class="token punctuation">)</span> <span class="token operator">||</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">d<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> p <span class="token keyword">in</span> b<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> d<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>constructor <span class="token operator">=</span> d<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    d<span class="token punctuation">.</span>prototype <span class="token operator">=</span> b <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">__</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> b<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">__</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> Animal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> Animal<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> Cat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">_super</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">__extends</span><span class="token punctuation">(</span>Cat<span class="token punctuation">,</span> _super<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">_super</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">Cat</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Meow, My name is '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Cat<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="类的类型"><a class="header-anchor" href="#类的类型"> </a>类的类型</h3>
<p>给类加上 TypeScript 的类型很简单，与接口类似：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> a<span class="token operator">:</span> Animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// My name is Jack</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="类与接口"><a class="header-anchor" href="#类与接口"> </a>类与接口</h2>
<p>之前学习过，接口（Interfaces）可以用于对「对象的形状（Shape）」进行描述。</p>
<p>这一章主要介绍接口的另一个用途，<strong>对类的一部分行为进行抽象</strong>。</p>
<h3 id="类实现接口"><a class="header-anchor" href="#类实现接口"> </a>类实现接口</h3>
<p>实现（implements）是面向对象中的一个重要概念。一般来讲，一个类只能继承自另一个类，有时候不同类之间可以有一些共有的特性，这时候就可以把特性提取成接口（interfaces），用 <code>implements</code> 关键字来实现。这个特性大大提高了面向对象的灵活性。</p>
<p>举例来说，门是一个类，防盗门是门的子类。如果防盗门有一个报警器的功能，我们可以简单的给防盗门添加一个报警方法。这时候如果有另一个类，车，也有报警器的功能，就可以考虑把报警器提取出来，作为一个接口，防盗门和车都去实现它：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Door</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">SecurityDoor</span> <span class="token keyword">extends</span> <span class="token class-name">Door</span> <span class="token keyword">implements</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'SecurityDoor alert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Car alert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一个类可以实现多个接口：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Light</span> <span class="token punctuation">{</span>
    <span class="token function">lightOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token function">lightOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">Alarm</span><span class="token punctuation">,</span> Light <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Car alert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">lightOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Car light on'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">lightOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Car light off'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例中，<code>Car</code> 实现了 <code>Alarm</code> 和 <code>Light</code> 接口，既能报警，也能开关车灯。</p>
<h3 id="接口继承接口"><a class="header-anchor" href="#接口继承接口"> </a>接口继承接口</h3>
<p>接口与接口之间可以是继承关系：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">LightableAlarm</span> <span class="token keyword">extends</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>
    <span class="token function">lightOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token function">lightOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这很好理解，<code>LightableAlarm</code> 继承了 <code>Alarm</code>，除了拥有 <code>alert</code> 方法之外，还拥有两个新方法 <code>lightOn</code> 和 <code>lightOff</code>。</p>
<h3 id="接口继承类"><a class="header-anchor" href="#接口继承类"> </a>接口继承类</h3>
<p><strong>常见的面向对象语言中，接口是不能继承类的，但是在 TypeScript 中却是可以的：</strong></p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Point3d</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    z<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> point3d<span class="token operator">:</span> Point3d <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> z<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>为什么 TypeScript 会支持接口继承类呢？</p>
<p>实际上，当我们在声明 <code>class Point</code> 时，除了会创建一个名为 <code>Point</code> 的类之外，同时也创建了一个名为 <code>Point</code> 的类型（实例的类型）。</p>
<p>所以我们既可以将 <code>Point</code> 当做一个类来用（使用 <code>new Point</code> 创建它的实例）：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可以将 <code>Point</code> 当做一个类型来用（使用 <code>: Point</code> 表示参数的类型）：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">printPoint</span><span class="token punctuation">(</span>p<span class="token operator">:</span> Point<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">printPoint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个例子实际上可以等价于：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">PointInstanceType</span> <span class="token punctuation">{</span>
    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">printPoint</span><span class="token punctuation">(</span>p<span class="token operator">:</span> PointInstanceType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">printPoint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例中我们新声明的 <code>PointInstanceType</code> 类型，与声明 <code>class Point</code> 时创建的 <code>Point</code> 类型是等价的。</p>
<p>所以回到 <code>Point3d</code> 的例子中，我们就能很容易的理解为什么 TypeScript 会支持接口继承类了：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">PointInstanceType</span> <span class="token punctuation">{</span>
    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 等价于 interface Point3d extends PointInstanceType</span>
<span class="token keyword">interface</span> <span class="token class-name">Point3d</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    z<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> point3d<span class="token operator">:</span> Point3d <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> z<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>当我们声明 <code>interface Point3d extends Point</code> 时，<code>Point3d</code> 继承的实际上是类 <code>Point</code> 的实例的类型。</strong></p>
<p><strong>换句话说，可以理解为定义了一个接口 <code>Point3d</code> 继承另一个接口 <code>PointInstanceType</code>。</strong></p>
<p><strong>所以「接口继承类」和「接口继承接口」没有什么本质的区别。</strong></p>
<p>值得注意的是，<code>PointInstanceType</code> 相比于 <code>Point</code>，缺少了 <code>constructor</code> 方法，这是因为声明 <code>Point</code> 类时创建的 <code>Point</code> 类型是不包含构造函数的。另外，除了构造函数是不包含的，静态属性或静态方法也是不包含的（实例的类型当然不应该包括构造函数、静态属性或静态方法）。</p>
<p>换句话说，声明 <code>Point</code> 类时创建的 <code>Point</code> 类型只包含其中的实例属性和实例方法：</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token comment">/** 静态属性，坐标系原点 */</span>
    <span class="token keyword">static</span> origin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/** 静态方法，计算与原点距离 */</span>
    <span class="token keyword">static</span> <span class="token function">distanceToOrigin</span><span class="token punctuation">(</span>p<span class="token operator">:</span> Point<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>x <span class="token operator">*</span> p<span class="token punctuation">.</span>x <span class="token operator">+</span> p<span class="token punctuation">.</span>y <span class="token operator">*</span> p<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/** 实例属性，x 轴的值 */</span>
    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token comment">/** 实例属性，y 轴的值 */</span>
    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token comment">/** 构造函数 */</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/** 实例方法，打印此点 */</span>
    <span class="token function">printPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">PointInstanceType</span> <span class="token punctuation">{</span>
    x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token function">printPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> p1<span class="token operator">:</span> Point<span class="token punctuation">;</span>
<span class="token keyword">let</span> p2<span class="token operator">:</span> PointInstanceType<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例中最后的类型 <code>Point</code> 和类型 <code>PointInstanceType</code> 是等价的。</p>
<p>同样的，<strong>在接口继承类的时候，也只会继承它的实例属性和实例方法。</strong></p>
<h2 id="泛型"><a class="header-anchor" href="#泛型"> </a>泛型</h2>
<blockquote>
<p>泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</p>
</blockquote>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">createArray</span><span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">createArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['x', 'x', 'x']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例中，我们实现了一个函数 <code>createArray</code>，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值。我们使用了之前提到过的<strong>数组泛型</strong>来定义返回值的类型。</p>
<p>这段代码编译不会报错，但是一个显而易见的缺陷是，它并没有准确的定义返回值的类型：</p>
<p><code>Array&lt;any&gt;</code> 允许数组的每一项都为任意类型。但是我们预期的是，数组中每一项都应该是输入的 <code>value</code> 的类型。</p>
<p>这时候，泛型就派上用场了：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createArray</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token generic-function"><span class="token function">createArray</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['x', 'x', 'x']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例中，我们在函数名后添加了 <code>&lt;T&gt;</code>，其中 <code>T</code> 用来指代任意输入的类型，在后面的输入 <code>value: T</code> 和输出 <code>Array&lt;T&gt;</code> 中即可使用了。</p>
<p>接着在调用的时候，可以指定它具体的类型为 <code>string</code>。当然，也可以不手动指定，而让类型推论自动推算出来：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createArray</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">createArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['x', 'x', 'x']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="多个类型参数"><a class="header-anchor" href="#多个类型参数"> </a>多个类型参数</h3>
<p>定义泛型的时候，可以一次定义多个类型参数：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">swap</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>tuple<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'seven'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['seven', 7]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例中，我们定义了一个 <code>swap</code> 函数，用来交换输入的元组。</p>
<h3 id="泛型约束"><a class="header-anchor" href="#泛型约束"> </a>泛型约束</h3>
<p>在函数内部使用泛型变量的时候，由于事先不知道它是哪种类型，所以不能随意的操作它的属性或方法：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">loggingIdentity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// index.ts(2,19): error TS2339: Property 'length' does not exist on type 'T'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例中，泛型 <code>T</code> 不一定包含属性 <code>length</code>，所以编译的时候报错了。</p>
<p>这时，我们可以对泛型进行约束，只允许这个函数传入那些包含 <code>length</code> 属性的变量。这就是泛型约束：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Lengthwise</span> <span class="token punctuation">{</span>
    length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">loggingIdentity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Lengthwise<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例中，我们使用了 <code>extends</code> 约束了泛型 <code>T</code> 必须符合接口 <code>Lengthwise</code> 的形状，也就是必须包含 <code>length</code> 属性。</p>
<p>此时如果调用 <code>loggingIdentity</code> 的时候，传入的 <code>arg</code> 不包含 <code>length</code>，那么在编译阶段就会报错了：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Lengthwise</span> <span class="token punctuation">{</span>
    length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">loggingIdentity</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Lengthwise<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">loggingIdentity</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// index.ts(10,17): error TS2345: Argument of type '7' is not assignable to parameter of type 'Lengthwise'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>多个类型参数之间也可以互相约束：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">copyFields</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> source<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> id <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        target<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>source<span class="token punctuation">)</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> d<span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">copyFields</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> d<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上例中，我们使用了两个类型参数，其中要求 <code>T</code> 继承 <code>U</code>，这样就保证了 <code>U</code> 上不会出现 <code>T</code> 中不存在的字段。</p>
<h3 id="泛型接口"><a class="header-anchor" href="#泛型接口"> </a>泛型接口</h3>
<p><a href="https://ts.xcatliu.com/basics/type-of-function.html#%E6%8E%A5%E5%8F%A3%E4%B8%AD%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89">之前学习过</a>，可以使用接口的方式来定义一个函数需要符合的形状：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> subString<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> mySearch<span class="token operator">:</span> SearchFunc<span class="token punctuation">;</span>
<span class="token function-variable function">mySearch</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>source<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> subString<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当然也可以使用含有泛型的接口来定义函数的形状：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">CreateArrayFunc</span> <span class="token punctuation">{</span>
    <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> createArray<span class="token operator">:</span> CreateArrayFunc<span class="token punctuation">;</span>
<span class="token function-variable function">createArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">createArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['x', 'x', 'x']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>进一步，我们可以把泛型参数提前到接口名上：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">CreateArrayFunc<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> createArray<span class="token operator">:</span> CreateArrayFunc<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token function-variable function">createArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">createArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['x', 'x', 'x']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意，此时在使用泛型接口的时候，需要定义泛型的类型。</p>
<h3 id="泛型类"><a class="header-anchor" href="#泛型类"> </a>泛型类</h3>
<p>与泛型接口类似，泛型也可以用于类的类型定义中：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">GenericNumber<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    zeroValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>
    <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> myGenericNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
myGenericNumber<span class="token punctuation">.</span>zeroValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
myGenericNumber<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="泛型参数的默认类型"><a class="header-anchor" href="#泛型参数的默认类型"> </a>泛型参数的默认类型</h3>
<p>在 TypeScript 2.3 以后，我们可以为泛型中的类型参数指定默认类型。当使用泛型时没有在代码中直接指定类型参数，从实际值参数中也无法推测出时，这个默认类型就会起作用。</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createArray</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="声明合并"><a class="header-anchor" href="#声明合并"> </a>声明合并</h2>
<p>如果定义了两个相同名字的函数、接口或类，那么它们会合并成一个类型。</p>
<h3 id="函数的合并"><a class="header-anchor" href="#函数的合并"> </a>函数的合并</h3>
<p>之前学习过，我们可以使用重载定义多个函数类型：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="接口的合并"><a class="header-anchor" href="#接口的合并"> </a>接口的合并</h3>
<p>接口中的属性在合并时会简单的合并到一个接口中：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>
    price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>
    weight<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>相当于：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>
    price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    weight<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意，<strong>合并的属性的类型必须是唯一的</strong>：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>
    price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>
    price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>  <span class="token comment">// 虽然重复了，但是类型都是 `number`，所以不会报错</span>
    weight<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>
    price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>
    price<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token comment">// 类型不一致，会报错</span>
    weight<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// index.ts(5,3): error TS2403: Subsequent variable declarations must have the same type.  Variable 'price' must be of type 'number', but here has type 'string'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接口中方法的合并，与函数的合并一样：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>
    price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>
    weight<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>相当于：</p>
<pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>
    price<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    weight<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="类的合并"><a class="header-anchor" href="#类的合并"> </a>类的合并</h3>
<p>类的合并与接口的合并规则一致。</p>
<h2 id="扩展阅读"><a class="header-anchor" href="#扩展阅读"> </a>扩展阅读</h2>
<p>此处记录了<a href="http://www.typescriptlang.org/docs/handbook/basic-types.html">官方手册</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/">中文版</a>）中包含，但是本书未涉及的概念。</p>
<p>我（教程作者）认为它们是一些不重要或者不属于 TypeScript 的概念，所以这里只给出一个简单的释义，详细内容可以点击链接深入理解。</p>
<ul>
<li><a href="http://www.typescriptlang.org/docs/handbook/basic-types.html#never">Never</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Basic%20Types.html#never">中文版</a>）：永远不存在值的类型，一般用于错误处理函数</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/variable-declarations.html">Variable Declarations</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Variable%20Declarations.html">中文版</a>）：使用 <code>let</code> 和 <code>const</code> 替代 <code>var</code>，这是 <a href="http://es6.ruanyifeng.com/#docs/let">ES6 的知识</a></li>
<li><a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Functions.html#this"><code>this</code></a>：箭头函数的运用，这是 <a href="http://es6.ruanyifeng.com/#docs/function">ES6 的知识</a></li>
<li><a href="http://www.typescriptlang.org/docs/handbook/generics.html#using-class-types-in-generics">Using Class Types in Generics</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Generics.html#%E5%9C%A8%E6%B3%9B%E5%9E%8B%E9%87%8C%E4%BD%BF%E7%94%A8%E7%B1%BB%E7%B1%BB%E5%9E%8B">中文版</a>）：创建工厂函数时，需要引用构造函数的类类型</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/type-inference.html#best-common-type">Best common type</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Inference.html#%E6%9C%80%E4%BD%B3%E9%80%9A%E7%94%A8%E7%B1%BB%E5%9E%8B">中文版</a>）：数组的类型推论</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/type-inference.html#contextual-type">Contextual Type</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Inference.html#%E4%B8%8A%E4%B8%8B%E6%96%87%E7%B1%BB%E5%9E%8B">中文版</a>）：函数输入的类型推论</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/type-compatibility.html">Type Compatibility</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Type%20Compatibility.html">中文版</a>）：允许不严格符合类型，只需要在一定规则下兼容即可</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#intersection-types">Advanced Types</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B%EF%BC%88intersection-types%EF%BC%89">中文版</a>）：使用 <code>&amp;</code> 将多种类型的共有部分叠加成一种类型</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types">Type Guards and Differentiating Types</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#%E7%B1%BB%E5%9E%8B%E4%BF%9D%E6%8A%A4%E4%B8%8E%E5%8C%BA%E5%88%86%E7%B1%BB%E5%9E%8B%EF%BC%88type-guards-and-differentiating-types%EF%BC%89">中文版</a>）：联合类型在一些情况下被识别为特定的类型</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions">Discriminated Unions</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced%20Types.html#%E5%8F%AF%E8%BE%A8%E8%AF%86%E8%81%94%E5%90%88%EF%BC%88discriminated-unions%EF%BC%89">中文版</a>）：使用 <code>|</code> 联合多个接口的时候，通过一个共有的属性形成可辨识联合</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/advanced-types.html#polymorphic-this-types">Polymorphic <code>this</code> types</a>（[中文版](<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced">https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Advanced</a> Types.html#多态的this类型)）：父类的某个方法返回 <code>this</code>，当子类继承父类后，子类的实例调用此方法，返回的 <code>this</code> 能够被 TypeScript 正确的识别为子类的实例。</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/symbols.html">Symbols</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Symbols.html">中文版</a>）：新原生类型，这是 <a href="http://es6.ruanyifeng.com/#docs/symbol">ES6 的知识</a></li>
<li><a href="http://www.typescriptlang.org/docs/handbook/iterators-and-generators.html">Iterators and Generators</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Iterators%20and%20Generators.html">中文版</a>）：迭代器，这是 <a href="http://es6.ruanyifeng.com/#docs/iterator">ES6 的知识</a></li>
<li><a href="http://www.typescriptlang.org/docs/handbook/namespaces.html">Namespaces</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Namespaces.html">中文版</a>）：避免全局污染，现在已被 <a href="http://es6.ruanyifeng.com/#docs/module">ES6 Module</a> 替代</li>
<li><a href="http://www.typescriptlang.org/docs/handbook/decorators.html">Decorators</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Decorators.html">中文版</a>）：修饰器，这是 <a href="http://es6.ruanyifeng.com/#docs/decorator">ES7 的一个提案</a></li>
<li><a href="http://www.typescriptlang.org/docs/handbook/mixins.html">Mixins</a>（<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/Mixins.html">中文版</a>）：一种编程模式，与 TypeScript 没有直接关系，可以参考 <a href="http://es6.ruanyifeng.com/#docs/class#Mixin%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0">ES6 中 Mixin 模式的实现</a></li>
</ul>
<h1 id="参考资料"><a class="header-anchor" href="#参考资料"> </a>参考资料</h1>
<p><a href="https://ts.xcatliu.com/">TypeScript 入门教程</a></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>搬运</tag>
        <tag>教程</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端常见面试题</title>
    <url>/2021/06/04/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h1 id="HTML"><a class="header-anchor" href="#HTML"> </a>HTML</h1>
<h2 id="HTML5-有哪些新特性？"><a class="header-anchor" href="#HTML5-有哪些新特性？"> </a>HTML5 有哪些新特性？</h2>
<p><a href="https://www.baidu.com/link?url=tjIR6jywhxzpVeSUGNZ2xAUQH6TrUh0i6kDsNy8YMvJF9urEy-dcTTPRYzdzloq_37FK87xakFS2pXeAx0JaXq&amp;wd=&amp;eqid=9a77417a00056e660000000660a110d4">HTML5的十大新特性 - Vicky_YU - 博客园</a></p>
<p>2008年发布。</p>
<h2 id="link-与-import-的区别"><a class="header-anchor" href="#link-与-import-的区别"> </a>link 与 @import 的区别</h2>
<ol>
<li>link是HTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。</li>
<li>加载页面时，link引入的CSS被同时加载，@import引入的CSS将在页面加载完毕后加载；</li>
<li>link标签作为HTML元素，不存在兼容性问题，而@import是CSS2.1才有的语法，故老版本浏览器（IE5之前）不能识别；</li>
<li>link支持使用Javascript控制DOM去改变样式；而@import不支持。</li>
</ol>
<p><strong>建议使用link的方式引入CSS</strong></p>
<h2 id="src-和-href-的区别"><a class="header-anchor" href="#src-和-href-的区别"> </a>src 和 href 的区别</h2>
<p><strong>请求资源类型不同</strong></p>
<ul>
<li>href是 Hypertext Reference 的缩写，表示超文本引用。用来建立当前元素和文档之间的链接，常用的有：link、a；</li>
<li>在请求 src 资源时会将其指向的资源下载并应用到文档中，常用的有script、img 、iframe；</li>
</ul>
<p><strong>作用结果不同</strong></p>
<ul>
<li>href 用于在当前文档和引用资源之间确立联系；</li>
<li>src 用于替换当前内容；</li>
</ul>
<p><strong>浏览器解析方式不同</strong></p>
<ul>
<li>若在文档中添加href，浏览器会识别该文档为 CSS 文件，就会<strong>并行</strong>下载资源并且不会停止对当前文档的处理。</li>
<li>当浏览器解析到src，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等也如此，类似于将所指向资源应用到当前内容。这也是为什么建议把 js 脚本放在底部而不是头部的原因。</li>
</ul>
<h2 id="meta-标签"><a class="header-anchor" href="#meta-标签"> </a>meta 标签</h2>
<p>元数据（metadata）提供关于 HTML 文档的元数据。<br>
元数据不会显示在页面上，但是对于机器是可读的。<br>
典型的情况是，meta 元素被用于规定页面的描述、关键词、文档的作者、最后修改时间以及其他元数据。<br>
标签始终位于 head 元素中。<br>
元数据可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务，有助于SEO。</p>
<p><strong>属性</strong></p>
<ul>
<li>
<p><strong>name</strong></p>
<p>名称/值对中的名称。author、description、keywords、generator、revised、others。把content 属性关联到一个名称。</p>
</li>
<li>
<p><strong>http-equiv</strong></p>
<p>没有name时，会采用这个属性的值。content-type、expires、refresh、set-cookie。把content 属性关联到http头部</p>
</li>
<li>
<p><strong>content</strong></p>
<p>名称/值对中的值，可以是任何有效的字符串。始终要和name 属性或http-equiv属性一起使</p>
</li>
<li>
<p><strong>scheme</strong></p>
<p>用于指定要用来翻译属性值的方案。</p>
</li>
</ul>
<h2 id="DOCTYPE-的作用"><a class="header-anchor" href="#DOCTYPE-的作用"> </a>DOCTYPE 的作用</h2>
<p>doctype是一种标准通用标记语言的文档类型声明，目的是告诉标准通用标记语言解析器要使用什么样的文档类型定义（DTD）来解析文档。</p>
<p><code>&lt;!DOCTYPE&gt;</code>声明是用来指示web浏览器关于页面使用哪个HTML版本进行编写的指令。</p>
<p><code>&lt;!DOCTYPE&gt;</code>声明必须是HTML文档的第一行，位于html标签之前。</p>
<p>浏览器本身分为两种模式，一种是<strong>标准模式</strong>，一种是<strong>怪异模式</strong>，浏览器通过doctype来区分这两种模式，doctype在html中的作用就是触发浏览器的标准模式，如果html中省略了doctype，浏览器就会进入到Quirks模式的怪异状态，在这种模式下，有些样式会和标准模式存在差异，而html标准和dom标准值规定了标准模式下的行为，没有对怪异模式做出规定，因此不同浏览器在怪异模式下的处理也是不同的，所以一定要在html开头使用doctype。</p>
<h3 id="HTML4-01-的-doctype"><a class="header-anchor" href="#HTML4-01-的-doctype"> </a>HTML4.01 的 doctype</h3>
<p>在HTML4.01中，&lt;!DOCTYPE&gt;声明引用DTD，因为HTML4.01基于SGML。DTD规定了标记语言的规则，这样浏览器才能正确的呈现内容。在HTML4.01中有三种&lt;!DOCTYPE&gt;声明。</p>
<p><strong>严格模式：</strong></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span> <span class="token name">PUBLIC</span> <span class="token string">"-//W3C//DTD HTML 4.01//EN"</span>  <span class="token string">"http://www.w3.org/TR/html4/strict.dtd"</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>过渡模式：</strong></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span> <span class="token name">PUBLIC</span> <span class="token string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span>  <span class="token string">"http://www.w3.org/TR/html4/loose.dtd"</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>框架模式：</strong></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span> <span class="token name">PUBLIC</span> <span class="token string">"-//W3C//DTD HTML 4.01 Frameset//EN"</span>  <span class="token string">"http://www.w3.org/TR/html4/frameset.dtd"</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="HTML5-的-doctype"><a class="header-anchor" href="#HTML5-的-doctype"> </a>HTML5 的 doctype</h3>
<p>HTML5不基于SGML，所以不需要引用DTD。在HTML5中&lt;!DOCTYPE&gt;只有一种</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="如何实现浏览器内多个标签之间的通信？"><a class="header-anchor" href="#如何实现浏览器内多个标签之间的通信？"> </a>如何实现浏览器内多个标签之间的通信？</h2>
<p><strong>本地存储方式：<code>localStorage</code>、<code>Cookie</code></strong></p>
<p><strong>服务器存储方式：<code>WebSocket</code>、<code>SharedWorker</code></strong></p>
<p><a href="https://www.baidu.com/link?url=0NCp0UI5scauYsoLHH5e_8MO0AtfgjK68BNZ0azAa6Kzs0wOn2_jE-2I-WQ3C_qqtWPRaAHIgvL_p18eJMBLUK&amp;wd=&amp;eqid=fde7e6a90005199d0000000660a11273">如何实现浏览器内多个标签页之间的通信?_meijory的博客</a></p>
<blockquote>
<p>本题主要考察<strong>数据存储</strong>的知识，数据存储有<strong>本地</strong>和<strong>服务器存储</strong>两种方式。</p>
<p>这里主要讲解用本地存储方式解决。即调用 <code>localStorage</code>、<code>Cookie</code>等本地存储方式。</p>
</blockquote>
<ol>
<li><strong>调用<code>localStorage</code></strong></li>
</ol>
<p>在一个标签页里面使用 <code>localStorage.setItem(key,value)</code>添加（修改、删除）内容；<br>
在另一个标签页里面监听 <code>storage</code> 事件。<br>
即可得到 <code>localstorge</code> 存储的值，实现不同标签页之间的通信。</p>
<p>标签页1：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
            <span class="token keyword">var</span> name<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>   
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>标签页2：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   
        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"storage"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><em>注意quirks：Safari在无痕模式下设置localStorage值时会抛出QuotaExceededError的异常</em></p>
<ol start="2">
<li><strong>调用<code>cookie + setInterval()</code></strong></li>
</ol>
<p>将要传递的信息存储在cookie中，每隔一定时间读取cookie信息，即可随时获取要传递的信息。</p>
<p>页面1：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
            <span class="token keyword">var</span> name<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
            document<span class="token punctuation">.</span>cookie<span class="token operator">=</span><span class="token string">"name="</span><span class="token operator">+</span>name<span class="token punctuation">;</span>    
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>页面2：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">  
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   
        <span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    
            <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"{\""</span> <span class="token operator">+</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">;\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gim</span></span><span class="token punctuation">,</span><span class="token string">"\",\""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">=</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gim</span></span><span class="token punctuation">,</span> <span class="token string">"\":\""</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\"}"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    
        <span class="token punctuation">}</span>     
        <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Cookies，SessionStorage-和-LocalStorage-的区别"><a class="header-anchor" href="#Cookies，SessionStorage-和-LocalStorage-的区别"> </a>Cookies，SessionStorage 和 LocalStorage 的区别</h2>
<table>
  <tbody><tr>
    <th>特性</th>
    <th>Cookie</th>
    <th>SessionStorage</th>
    <th>LocalStorage</th>
  </tr>
  <tr>
    <td>特性</td>
    <td>一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效</td>
    <td>仅在当前会话下有效，关闭页面或浏览器后被清除</td>
    <td>除非被清除，否则永久保存</td>
  </tr>
  <tr>
    <td>存放数据大小</td>
    <td>4K左右</td>
    <td colspan="2">一般为5MB</td>
  </tr>
  <tr>
    <td>与服务器端通信</td>
    <td>每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td>
    <td colspan="2">仅在客户端（即浏览器）中保存，不参与和服务器的通信</td>
  </tr>
  <tr>
    <td>易用性</td>
    <td>需要程序员自己封装，源生的Cookie接口不友好</td>
    <td colspan="2">源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</td>
  </tr>
</tbody></table>
<h2 id="Cookie-属性"><a class="header-anchor" href="#Cookie-属性"> </a>Cookie 属性</h2>
<ul>
<li><strong>name</strong>字段为一个cookie的名称。</li>
<li><strong>value</strong>字段为一个cookie的值。</li>
<li><strong>domain</strong>字段为可以访问此cookie的域名。</li>
<li><strong>path</strong>字段为可以访问此cookie的页面路径。 <a href="http://xn--domainabc-k99pv92ihfo.com">比如domain是abc.com</a>，path是/test，那么只有/test路径下的页面可以读取此cookie。</li>
<li><strong>expires/Max-Age</strong> 字段为此cookie超时时间。若设置其值为一个时间，那么当到达此时间后，此cookie失效。不设置的话默认值是Session，意思是cookie会和session一起失效。当浏览器关闭(不是浏览器标签页，而是整个浏览器) 后，此cookie失效。</li>
<li><strong>Size</strong>字段 此cookie大小。</li>
<li><strong>http</strong>字段  cookie的httponly属性。若此属性为true，则只有在http请求头中会带有此cookie的信息，而不能通过document.cookie来访问此cookie。</li>
<li><strong>secure</strong>字段 设置是否只能通过https来传递此条cookie</li>
</ul>
<h2 id="浏览器是如何渲染页面的？"><a class="header-anchor" href="#浏览器是如何渲染页面的？"> </a>浏览器是如何渲染页面的？</h2>
<ol>
<li>
<p><strong>解析HTML文件，创建DOM树</strong></p>
<p>自上而下，遇到任何样式（link、style）与脚本（script）都会阻塞。（外部样式不阻塞后续外部脚本的加载）</p>
</li>
<li>
<p><strong>解析CSS</strong></p>
<p>优先级：浏览器默认设置 &lt; 用户设置 &lt; 外部样式 &lt; 内联样式 &lt; HTML中的style样式</p>
</li>
<li>
<p><strong>构建渲染树</strong></p>
<p>将CSS与DOM合并，构建渲染树（Render Tree）</p>
</li>
<li>
<p><strong>布局和绘制</strong></p>
<p>布局和绘制，重绘（repaint）和 重排（layout）</p>
<ul>
<li><strong>重绘</strong>：当元素样式的改变不影响布局时，浏览器将使用重绘对元素进行更新，此时由于只需要 UI 层面的重新像素绘制，因此损耗较少。</li>
<li><strong>回流（reflow）</strong>：又叫重排。当元素的尺寸、结构或者触发某些属性时，浏览器会重新渲染页面，称为回流。此时，浏览器需要重新经过计算，计算后还需要重新页面布局，因此是较重的操作。</li>
</ul>
</li>
</ol>
<h2 id="Canvas-和-SVG-图形的区别"><a class="header-anchor" href="#Canvas-和-SVG-图形的区别"> </a>Canvas 和 SVG 图形的区别</h2>
<h3 id="svg是什么？"><a class="header-anchor" href="#svg是什么？"> </a>svg是什么？</h3>
<p>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)，用来定义用于网络的基于矢量的图形，使用 XML 格式定义图形。<br>
SVG 图像在放大或改变尺寸的情况下其图形质量不会有所损失。<br>
SVG 是万维网联盟的标准，与诸如 DOM 和 XSL 之类的 W3C 标准是一个整体。</p>
<h3 id="canvas是什么？"><a class="header-anchor" href="#canvas是什么？"> </a>canvas是什么？</h3>
<p>HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。画布是一个矩形区域，可以控制其每一像素。canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</p>
<h3 id="canvas和svg的区别比较"><a class="header-anchor" href="#canvas和svg的区别比较"> </a>canvas和svg的区别比较</h3>
<ol>
<li><strong>从时间上看</strong></li>
</ol>
<p>svg并不是html5专有的标签，最初svg是用xml技术（超文本扩展语言，可以自定义标签或属性）描述二维图形的语言。svg存在的历史要比canvas久远，已经有十几年了。</p>
<p>canvas是html5提供的新元素<code>&lt;canvas&gt;</code>。</p>
<ol start="2">
<li><strong>从功能上看</strong></li>
</ol>
<p>SVG 是一种使用 XML 描述 2D 图形的语言。<br>
SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的，可以为某个元素附加 JavaScript 事件处理器。<br>
在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。</p>
<p>Canvas 通过 JavaScript 来绘制 2D 图形。<br>
Canvas 是逐像素进行渲染的。<br>
在 Canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。</p>
<ol start="3">
<li><strong>从技术应用上</strong></li>
</ol>
<p>svg依赖分辨率。<br>
svg不支持事件处理器。<br>
svg弱的文本渲染能力。<br>
svg能够以 .png 或 .jpg 格式保存结果图像。<br>
svg最适合图像密集型的游戏，其中的许多对象会被频繁重绘**。**</p>
<p>canvas不依赖分辨率。<br>
canvas支持事件处理器。<br>
canvas最适合带有大型渲染区域的应用程序（比如谷歌地图）。<br>
canvas复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）。<br>
canvas不适合游戏应用。</p>
<h1 id="CSS"><a class="header-anchor" href="#CSS"> </a>CSS</h1>
<h2 id="CSS选择器有哪些？"><a class="header-anchor" href="#CSS选择器有哪些？"> </a>CSS选择器有哪些？</h2>
<ol>
<li>标签选择器</li>
<li>类选择器</li>
<li>id选择器</li>
<li>子选择器 (div&gt;p)</li>
<li>包含选择器  (div p)</li>
<li>兄弟选择器 (.first~p)</li>
<li>相邻选择器 (.first+p)</li>
<li>全局选择器 (*)</li>
<li>群选择器 (.first,span)</li>
<li>属性选择器 ([type=next])</li>
<li>伪类选择器 (li:first-child{} li:last-child{} li:nth-child(){} li:not(){})</li>
</ol>
<h2 id="如果要重构一个页面，从CSS的角度来讲如何进行性能优化？"><a class="header-anchor" href="#如果要重构一个页面，从CSS的角度来讲如何进行性能优化？"> </a>如果要重构一个页面，从CSS的角度来讲如何进行性能优化？</h2>
<p><strong>网站重构</strong>：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。</p>
<p><strong>优雅降级</strong>：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会针对旧版本的IE进行降级处理了,使之在旧式浏览器上以某种形式降级体验却不至于完全不能用。<br>
如：border-shadow</p>
<p><strong>渐进增强</strong>：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新版本浏览器才支持的功能,向页面增加不影响基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。<br>
如：默认使用flash上传，但如果浏览器支持 HTML5 的文件上传功能，则使用HTML5实现更好的体验；</p>
<h2 id="float-和-clear"><a class="header-anchor" href="#float-和-clear"> </a>float 和 clear</h2>
<p>强力推荐！<a href="https://www.cnblogs.com/iyangyuan/archive/2013/03/27/2983813.html">经验分享：CSS浮动(float,clear)通俗讲解</a></p>
<h3 id="清除浮动的方法"><a class="header-anchor" href="#清除浮动的方法"> </a>清除浮动的方法</h3>
<p><a href="https://www.baidu.com/link?url=_QK643YVCEgtFxRA8KzqFiuXXPrvTjIN2zHDdpHofzsq4b-nNACafnHoo9ksR1wrwpcVjqCDoRF9a2JMI-Cly4FOcKxCSch3loF7kcb5ifC&amp;wd=&amp;eqid=8501b712006421bc0000000660a156da">清除浮动的最常用的四种方法,以及优缺点</a></p>
<p>使用after伪元素清除浮动（推荐使用）</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html">.clearfix:after{/*伪元素是行内元素 正常浏览器清除浮动方法*/
    content: "";
    display: block;
    height: 0;
    clear:both;
    visibility: hidden;
}
.clearfix{
	*zoom: 1;/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/
}
 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fahter clearfix<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>big<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>big<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>small<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!--&lt;div class="clear"&gt;额外标签法&lt;/div&gt;--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="overflow"><a class="header-anchor" href="#overflow"> </a>overflow</h2>
<p>TODO: 解释overflow</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow">overflow | MDN</a></p>
<h2 id="display"><a class="header-anchor" href="#display"> </a>display</h2>
<p>TODO: 解释display</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display">display | MDN</a></p>
<p>对元素设置display：inline-block ，元素不会脱离文本流，而float就会使得元素脱离文本流，且还有父元素高度坍塌的效果</p>
<h2 id="position"><a class="header-anchor" href="#position"> </a>position</h2>
<p>static：无特殊定位，对象遵循正常文档流。top，right，bottom，left等属性不会被应用。</p>
<p>relative：对象遵循正常文档流，但将依据top，right，bottom，left等属性在正常文档流中偏移位置。而其层叠通过z-index属性定义。</p>
<p>absolute：对象脱离正常文档流，使用top，right，bottom，left等属性进行绝对定位。而其层叠通过z-index属性定义。</p>
<p>fixed：对象脱离正常文档流，使用top，right，bottom，left等属性以窗口为参考点进行定位，当出现滚动条时，对象不会随着滚动。而其层叠通过z-index属性定义。</p>
<p>sticky：具体是类似 relative 和 fixed，在 viewport 视口滚动到阈值之前应用 relative，滚动到阈值之后应用 fixed 布局，由 top 决定。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position">position | MDN</a></p>
<table>
<thead>
<tr>
<th style="text-align:left">值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">absolute</td>
<td style="text-align:left">生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td>
</tr>
<tr>
<td style="text-align:left">fixed</td>
<td style="text-align:left">生成绝对定位的元素，<strong>相对于浏览器窗口进行定位</strong>。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。</td>
</tr>
<tr>
<td style="text-align:left">relative</td>
<td style="text-align:left">生成相对定位的元素，<strong>相对于其正常位置进行定位</strong>。因此，“left:20” 会向元素的 LEFT 位置添加 20 像素。</td>
</tr>
<tr>
<td style="text-align:left">static</td>
<td style="text-align:left">默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</td>
</tr>
<tr>
<td style="text-align:left">inherit</td>
<td style="text-align:left">规定应该从父元素继承 position 属性的值。</td>
</tr>
</tbody>
</table>
<h2 id="行内元素有哪些？块级元素有哪些？有什么区别？空（void）元素有哪些？"><a class="header-anchor" href="#行内元素有哪些？块级元素有哪些？有什么区别？空（void）元素有哪些？"> </a>行内元素有哪些？块级元素有哪些？有什么区别？空（void）元素有哪些？</h2>
<h3 id="块级元素"><a class="header-anchor" href="#块级元素"> </a>块级元素</h3>
<ul>
<li>address - 地址</li>
<li>blockquote - 块引用</li>
<li>center - 举中对齐块</li>
<li>dir - 目录列表</li>
<li>div - 常用块级容易，也是 css layout 的主要标签</li>
<li>fieldset - form控制组</li>
<li>p - 段落</li>
</ul>
<h3 id="行内元素（内联元素）"><a class="header-anchor" href="#行内元素（内联元素）"> </a>行内元素（内联元素）</h3>
<ul>
<li>a - 锚点</li>
<li>em - 强调</li>
<li>img - 图片
<ul>
<li><code>&lt;img&gt;</code> 标签有两个必需的属性：src 和 alt．<strong>强烈推荐</strong>在开发中每个图像中都使用 alt 属性。这样即使图像无法显示，用户还是可以看到关于丢失了什么东西的一些信息。而且对于残疾人来说，alt 属性通常是他们了解图像内容的唯一方式</li>
<li><code>&lt;img /&gt;</code> 标签属于替换元素，具有内置的宽高属性，所以可以设置宽高</li>
<li><a href="https://www.baidu.com/link?url=LkFxUYFfMgav5qJNzqWzIDbtaI2zj6qsDv3BTOJG408JhBdOftH2MTFwjECZ2VpdOhMOjWrwyIUD86c7xQnSliuy_j2sJNqkkC1svge6JGO&amp;wd=&amp;eqid=b692746f000d07d40000000660a118f5">img标签到底是行内元素还是块级元素 - 全栈道路 - 博客园</a></li>
</ul>
</li>
<li>font - 字体设定 ( 不推荐 )</li>
<li>i - 斜体</li>
<li>input - 输入框</li>
</ul>
<h3 id="行内元素和块级元素的区别"><a class="header-anchor" href="#行内元素和块级元素的区别"> </a>行内元素和块级元素的区别</h3>
<p>区别一：</p>
<ul>
<li>块级：块级元素会独占一行，默认情况下宽度自动填满其父元素宽度</li>
<li>行内：行内元素不会独占一行，相邻的行内元素会排在同一行。其宽度随内容的变化而变化。</li>
</ul>
<p>区别二：</p>
<ul>
<li>块级：块级元素可以设置宽高</li>
<li>行内：行内元素不可以设置宽高</li>
</ul>
<p>区别三：</p>
<ul>
<li>块级：块级元素可以设置margin，padding</li>
<li>行内：行内元素水平方向的margin-left; margin-right; padding-left; padding-right;可以生效。但是竖直方向的margin-bottom; margin-top; padding-top; padding-bottom;却不能生效。</li>
</ul>
<p>区别四：</p>
<ul>
<li>块级：display:block;</li>
<li>行内：display:inline;</li>
<li>可以通过修改display属性来切换块级元素和行内元素</li>
</ul>
<h3 id="空-void-元素："><a class="header-anchor" href="#空-void-元素："> </a>空(void)元素：</h3>
<ul>
<li><code>&lt;br/&gt;</code> //换行</li>
<li><code>&lt;hr＞</code> //分隔线</li>
<li><code>&lt;input&gt;</code> //文本框等</li>
<li><code>&lt;img&gt;</code> //图片</li>
<li><code>&lt;link&gt; &lt;meta&gt;</code></li>
</ul>
<h2 id="盒子模型"><a class="header-anchor" href="#盒子模型"> </a>盒子模型</h2>
<p>CSS盒模型，本质上是一个盒子包裹着HTML元素，盒子由四个属性组成，由外到内分别是：<strong>margin（外边距）</strong>，<strong>border（边框）</strong>，**padding（内填充）**和 <strong>content（内容）</strong>。</p>
<h3 id="分类-标准盒模型-怪异盒模型"><a class="header-anchor" href="#分类-标准盒模型-怪异盒模型"> </a>分类 - 标准盒模型 &amp; 怪异盒模型</h3>
<ul>
<li><strong>W3C 盒子模型（标准盒模型）</strong></li>
</ul>
<p><img src="https://pic4.zhimg.com/80/v2-0ccf14bce917a263bbf734a35f06c8d3_720w.jpg" alt="标准盒模型"></p>
<p>宽度和高度的计算方式：</p>
<pre class="line-numbers language-none"><code class="language-none">width = contentWidth
height = contentHeight<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>如何在CSS中设置标准盒模型：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>
<p><strong>IE 盒子模型（怪异盒模型）</strong></p>
<p><img src="https://pic2.zhimg.com/80/v2-b4961242f8b1cd27e9d9da2d0f268a4d_720w.jpg" alt="怪异盒模型"></p>
<p>宽度和高度的计算方式：</p>
<pre class="line-numbers language-none"><code class="language-none">width = contentWidth + paddingWidth + borderWidth
height = contentHeight + paddingHeight + borderHeight<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<p>如何在CSS中设置怪异盒模型：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="外边距合并（高度坍塌）"><a class="header-anchor" href="#外边距合并（高度坍塌）"> </a>外边距合并（高度坍塌）</h2>
<blockquote>
<p>MDN是这样的定义外边距合并的：</p>
<p><strong>块</strong>的顶部外边距和底部外边距有时被组合(折叠)为单个外边距，其大小是组合到其中的最大外边距，这种行为称为<strong>外边距合并</strong>。</p>
</blockquote>
<p>所谓外边距合并，其实就是<strong>margin合并</strong>。</p>
<h3 id="外边距合并的几种情况"><a class="header-anchor" href="#外边距合并的几种情况"> </a>外边距合并的几种情况</h3>
<p><strong>都正取大</strong></p>
<p><strong>一正一负相加</strong></p>
<ul>
<li><strong>相邻兄弟元素</strong></li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>up<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我在上面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>down<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我在下面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.up</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid blue<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.down</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://pic2.zhimg.com/80/v2-8dba15cd0b4f45ad3871bca74e675959_720w.jpg" alt="相邻兄弟元素外边距合并" style="zoom:67%;">
<ul>
<li><strong>父子元素</strong></li>
</ul>
<p>块级元素和其第一个子元素的存在外边距合并，也就是上边距“挨到一起”，此时父元素展现出来的外边距，将会是父元素和子元素的<code>margin-top</code> 的较大值。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我是儿子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.child</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="https://pic3.zhimg.com/80/v2-7174251912a4973184100a036edea396_720w.jpg" alt="父子元素外边距合并" style="zoom:67%;">
<h3 id="解决外边距合并的方法"><a class="header-anchor" href="#解决外边距合并的方法"> </a>解决外边距合并的方法</h3>
<p><strong>方法：使用BFC 容器，将两个外边距重合的元素放在不同的BFC 容器中。</strong></p>
<ul>
<li><strong>相邻兄弟元素</strong></li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>up<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我在上面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>down<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我在下面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.up</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid blue<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.down</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span> //触发BFC
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><strong>父子元素</strong></li>
</ul>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我是儿子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> //触发BFC
<span class="token punctuation">}</span>
<span class="token selector">.child</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="BFC"><a class="header-anchor" href="#BFC"> </a>BFC</h2>
<blockquote>
<p>一个**块格式化上下文（block formatting context）**是Web页面的可视化CSS渲染的一部分。它是块盒子的布局发生，浮动互相交互的区域。</p>
</blockquote>
<p><strong>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。</strong></p>
<p>通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p>
<h3 id="BFC-的布局规则（特点）"><a class="header-anchor" href="#BFC-的布局规则（特点）"> </a>BFC 的布局规则（特点）</h3>
<ul>
<li>BFC 是一个隔离的容器，内部子元素不会影响到外部元素</li>
<li>内部块级盒子垂直方向排列</li>
<li>盒子垂直距离由 margin 决定，同一个BFC 盒子的外边距会重叠</li>
<li>BFC 的区域不会与float box叠加</li>
<li>每个元素的margin box的左边，与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>
</ul>
<h3 id="BFC-的触发条件"><a class="header-anchor" href="#BFC-的触发条件"> </a>BFC 的触发条件</h3>
<ul>
<li>根元素，即HTML元素</li>
<li>float的值为left、right、both；不为none</li>
<li>overflow的值为hidden、auto、scroll；不为visible</li>
<li>display的值为inline-block、table-cell、table-caption</li>
<li>position的值为absolute或fixed；不为relative等</li>
</ul>
<h3 id="BFC-的作用"><a class="header-anchor" href="#BFC-的作用"> </a>BFC 的作用</h3>
<ul>
<li>自适应两栏布局
<ul>
<li>父元素要清除浮动，否则父元素会坍塌</li>
<li>左侧定宽，向左浮动，保证两栏并列</li>
<li>右侧不需要再浮动，但是要消除文字环绕，可以为右侧定义一个BFC，因为BFC不会与float重叠</li>
</ul>
</li>
<li>阻止元素被浮动元素覆盖</li>
<li>包含浮动元素时，清除内部浮动</li>
<li>分属于不同的BFC时，阻止外边距合并（margin重叠）</li>
</ul>
<h2 id="IFC"><a class="header-anchor" href="#IFC"> </a>IFC</h2>
<p>既然块级元素会触发BFC，那么<strong>内联元素会触发的则是IFC</strong>。</p>
<p>IFC 只有在一个块元素中<strong>仅包含</strong>内联级别元素时才会生成。</p>
<p><img src="https://pic1.zhimg.com/80/v2-1cbe9087966411c4f79ec13ef03295cc_720w.jpg" alt="IFC模型"></p>
<h3 id="IFC-的布局规则（特点）"><a class="header-anchor" href="#IFC-的布局规则（特点）"> </a>IFC 的布局规则（特点）</h3>
<ul>
<li>内部的 box 会在水平方向排布</li>
<li>这些 box 之间的水平方向的margin、boder、padding 都有效</li>
<li>Box 垂直对齐方式：以它们的底部、顶部对齐，或以它们里面的文本的基线（baseline）对齐（默认，文本与图片对其），例：<code>line-heigth</code>与<code>vertical-align</code>。</li>
</ul>
<h2 id="Flex-布局"><a class="header-anchor" href="#Flex-布局"> </a>Flex 布局</h2>
<p>布局的传统解决方案，基于<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box_model">盒状模型</a>，依赖 <code>display</code>属性 + <code>position</code>属性 + <code>float</code>属性。它对于那些特殊布局非常不方便，比如，<a href="https://css-tricks.com/centering-css-complete-guide/">垂直居中</a>就不容易实现。</p>
<p>2009年，W3C 提出了一种新的方案——Flex 布局，可以简便、完整、响应式地实现各种页面布局。是 CSS3 的特性。</p>
<blockquote>
<p><strong>Flex</strong> 是 Flexible Box 的缩写，意为“<strong>弹性布局</strong>”，用来为盒状模型提供最大的灵活性。</p>
</blockquote>
<h3 id="Flex-容器-Flex-项目"><a class="header-anchor" href="#Flex-容器-Flex-项目"> </a>Flex 容器 &amp; Flex 项目</h3>
<p>采用 Flex 布局的元素，称为 <strong>Flex 容器（flex container）</strong>，简称"容器"。它的所有子元素自动成为容器成员，称为 <strong>Flex 项目（flex item）</strong>，简称"项目"。</p>
<p>容器默认存在两根轴：水平的<strong>主轴（main axis）<strong>和垂直的</strong>交叉轴（cross axis）</strong>。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p>
<p><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png" alt="主轴与交叉轴"></p>
<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>
<h3 id="Flex-容器的属性"><a class="header-anchor" href="#Flex-容器的属性"> </a>Flex 容器的属性</h3>
<p>以下6个属性设置在容器上。</p>
<ul>
<li><code>flex-direction</code></li>
<li><code>flex-wrap</code></li>
<li><code>flex-flow</code>：flex-direction + flex-wrap</li>
<li><code>justify-content</code></li>
<li><code>align-items</code></li>
<li><code>align-content</code>：justify-content + align-items</li>
</ul>
<h4 id="flex-direction-属性"><a class="header-anchor" href="#flex-direction-属性"> </a>flex-direction 属性</h4>
<p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row | row-reverse | column | column-reverse<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>它的四个值：</p>
<ul>
<li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li>
<li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li>
<li><code>column</code>：主轴为垂直方向，起点在上沿。</li>
<li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li>
</ul>
<p><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png" alt="flex-direction"></p>
<h4 id="flex-wrap-属性"><a class="header-anchor" href="#flex-wrap-属性"> </a>flex-wrap 属性</h4>
<p>默认情况下，项目都排在一条线（又称"轴线"）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span><span class="token punctuation">{</span>
  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> nowrap | wrap | wrap-reverse<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png" alt="flex-wrap"></p>
<p>它的三个值：</p>
<ul>
<li><code>nowrap</code>（默认）：不换行。</li>
</ul>
<img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015071007.png" alt="nowrap" style="zoom:50%;">
<ul>
<li><code>wrap</code>：换行，第一行在上方。</li>
</ul>
<img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015071008.jpg" alt="wrap" style="zoom:50%;">
<ul>
<li><code>wrap-reverse</code>：换行，第一行在下方。</li>
</ul>
<img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015071009.jpg" alt="wrap-reverse" style="zoom:50%;">
<h4 id="flex-flow-属性"><a class="header-anchor" href="#flex-flow-属性"> </a>flex-flow 属性</h4>
<p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">flex-flow</span><span class="token punctuation">:</span> &lt;flex-direction&gt; || &lt;flex-wrap&gt;<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="justify-content-属性"><a class="header-anchor" href="#justify-content-属性"> </a>justify-content 属性</h4>
<p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png" alt="justify-content" style="zoom: 67%;">
<p>它有五个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>
<ul>
<li><code>flex-start</code>（默认值）：左对齐</li>
<li><code>flex-end</code>：右对齐</li>
<li><code>center</code>： 居中</li>
<li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li>
<li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
<h4 id="align-items-属性"><a class="header-anchor" href="#align-items-属性"> </a>align-items 属性</h4>
<p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png" alt="align-items" style="zoom:67%;">
<p>它也有五个值，具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>
<ul>
<li><code>flex-start</code>：交叉轴的起点对齐。</li>
<li><code>flex-end</code>：交叉轴的终点对齐。</li>
<li><code>center</code>：交叉轴的中点对齐。</li>
<li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
<li><code>baseline</code>: 项目的第一行文字的基线对齐。</li>
</ul>
<h4 id="align-content-属性"><a class="header-anchor" href="#align-content-属性"> </a>align-content 属性</h4>
<p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around | stretch<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png" alt="align-content" style="zoom:67%;">
<p>它有六个值：</p>
<ul>
<li><code>flex-start</code>：与交叉轴的起点对齐。</li>
<li><code>flex-end</code>：与交叉轴的终点对齐。</li>
<li><code>center</code>：与交叉轴的中点对齐。</li>
<li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li>
</ul>
<h3 id="flex-项目的属性"><a class="header-anchor" href="#flex-项目的属性"> </a>flex 项目的属性</h3>
<p>以下6个属性设置在项目上。</p>
<ul>
<li><code>order</code></li>
<li><code>flex-grow</code></li>
<li><code>flex-shrink</code></li>
<li><code>flex-basis</code></li>
<li><code>flex</code>：flex-grow + flex-shrink + flex-basis</li>
<li><code>align-self</code></li>
</ul>
<h4 id="order-属性"><a class="header-anchor" href="#order-属性"> </a>order 属性</h4>
<p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">order</span><span class="token punctuation">:</span> &lt;integer&gt;<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png" alt="order" style="zoom:67%;">
<h4 id="flex-grow-属性"><a class="header-anchor" href="#flex-grow-属性"> </a>flex-grow 属性</h4>
<p><code>flex-grow</code>属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">flex-grow</span><span class="token punctuation">:</span> &lt;number&gt;<span class="token punctuation">;</span> <span class="token comment">/* default 0 */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png" alt="flex-grow" style="zoom:67%;">
<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
<h4 id="flex-shrink-属性"><a class="header-anchor" href="#flex-shrink-属性"> </a>flex-shrink 属性</h4>
<p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">flex-shrink</span><span class="token punctuation">:</span> &lt;number&gt;<span class="token punctuation">;</span> <span class="token comment">/* default 1 */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg" alt="flex-shrink" style="zoom: 67%;">
<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
<p>负值对该属性无效。</p>
<h4 id="flex-basis-属性"><a class="header-anchor" href="#flex-basis-属性"> </a>flex-basis 属性</h4>
<p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">flex-basis</span><span class="token punctuation">:</span> &lt;length&gt; | auto<span class="token punctuation">;</span> <span class="token comment">/* default auto */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p>
<h4 id="flex-属性"><a class="header-anchor" href="#flex-属性"> </a>flex 属性</h4>
<p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">flex</span><span class="token punctuation">:</span> none | [ &lt;<span class="token string">'flex-grow'</span>&gt; &lt;<span class="token string">'flex-shrink'</span>&gt;? || &lt;<span class="token string">'flex-basis'</span>&gt; ]
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p>
<p><strong>flex: 1 === flex: 1 1 0</strong></p>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h3 id="align-self-属性"><a class="header-anchor" href="#align-self-属性"> </a>align-self 属性</h3>
<p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span>
  <span class="token property">align-self</span><span class="token punctuation">:</span> auto | flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png" alt="align-self" style="zoom:67%;">
<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>
<h2 id="CSS-水平垂直居中"><a class="header-anchor" href="#CSS-水平垂直居中"> </a>CSS 水平垂直居中</h2>
<h3 id="绝对定位元素的居中实现"><a class="header-anchor" href="#绝对定位元素的居中实现"> </a>绝对定位元素的居中实现</h3>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.center-vertical</span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> -50px<span class="token punctuation">;</span> <span class="token comment">/*高度的一半*/</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> -50px<span class="token punctuation">;</span> <span class="token comment">/*宽度的一半*/</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这一种工作中用的应该是最多的，兼容性也是很好。</p>
<p><strong>缺点</strong>：需要提前知道元素的尺寸。如果不知道元素尺寸，这个时候就需要JS获取了。</p>
<p>CSS3.0的兴起，使这个问题有了更好的解决方法，就是使用 <code>transform</code> 代替 <code>margin</code> 。transform 中 <code>translate</code> 偏移的百分比是<strong>相对于自身大小</strong>而说的。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.content</span><span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>优点</strong>：无论绝对定位元素的尺寸是多少，它都是水平垂直居中显示的。</p>
<p><strong>缺点</strong>：兼容性问题。</p>
<h3 id="margin-auto-实现绝对定位元素的居中"><a class="header-anchor" href="#margin-auto-实现绝对定位元素的居中"> </a>margin: auto; 实现绝对定位元素的居中</h3>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.center-vertical</span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="CSS3-0-弹性布局"><a class="header-anchor" href="#CSS3-0-弹性布局"> </a>CSS3.0 弹性布局</h3>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html,body</span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">body</span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token comment">/*定义body的元素水平居中*/</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token comment">/*定义body的元素垂直居中*/</span>   
<span class="token punctuation">}</span>
<span class="token selector">.content</span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="vertical-align-middle-垂直方向居中"><a class="header-anchor" href="#vertical-align-middle-垂直方向居中"> </a>vertical-align:middle; 垂直方向居中</h3>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.big-box</span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.box</span><span class="token punctuation">{</span>
    <span class="token property">line-height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">img</span><span class="token punctuation">{</span>
    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="display-table实现"><a class="header-anchor" href="#display-table实现"> </a>display:table实现</h3>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.son</span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="CSS的权重和优先级"><a class="header-anchor" href="#CSS的权重和优先级"> </a>CSS的权重和优先级</h2>
<p><strong>权重</strong></p>
<ul>
<li>从0开始，一个行内样式+1000，一个id选择器+100，一个属性选择器、class或者伪类+10，一个元素选择器，或者伪元素+1，通配符+0</li>
<li>权重相同，写在后面的覆盖前面的</li>
<li><em>继承也有权值但很低，有的文献提出它只有0.1，所以可以理解为继承的权值最低。</em></li>
</ul>
<p><strong>优先级</strong></p>
<ul>
<li>使用<code>!important</code> 达到最大优先级，都使用<code>!important</code>时，权重大的优先级高</li>
</ul>
<h2 id="CSS-动画有哪些？"><a class="header-anchor" href="#CSS-动画有哪些？"> </a>CSS 动画有哪些？</h2>
<p><code>animation</code>、<code>transition</code>、<code>transform</code>、<code>translate</code> 这几个属性要搞清楚：</p>
<ul>
<li><strong>animation</strong>：用于设置动画属性，他是一个简写的属性，包含6个属性</li>
<li><strong>transition</strong>：用于设置元素的样式过渡，和animation有着类似的效果，但细节上有很大的不同</li>
<li><strong>transform</strong>：用于元素进行旋转、缩放、移动或倾斜，和设置样式的动画并没有什么关系
<ul>
<li><strong>translate</strong>：只是transform的一个属性值，即移动，除此之外还有scale等</li>
</ul>
</li>
</ul>
<h2 id="visibility、display-和-opacity的区别"><a class="header-anchor" href="#visibility、display-和-opacity的区别"> </a>visibility、display 和 opacity的区别</h2>
<ul>
<li>display：设置了none属性会隐藏元素，且<strong>其位置也不会被保留下来</strong>，所以会触发浏览器渲染引擎的回流和重绘。</li>
<li>visibility：设置hidden会隐藏元素，但是<strong>其位置还在页面文档流中</strong>，不会被删除，所以会触发浏览器渲染引擎的重绘</li>
<li>opacity：会将元素设置为透明，但是<strong>其位置也在页面文档流中</strong>，不会被删除，所以会触发浏览器渲染引擎的重绘</li>
</ul>
<h1 id="JavaScript基础"><a class="header-anchor" href="#JavaScript基础"> </a>JavaScript基础</h1>
<h2 id="ES6有哪些新特性？"><a class="header-anchor" href="#ES6有哪些新特性？"> </a>ES6有哪些新特性？</h2>
<p><a href="https://www.jianshu.com/p/87008f4f8513">ES6新特性</a></p>
<h2 id="基本类型-引用类型"><a class="header-anchor" href="#基本类型-引用类型"> </a>基本类型 引用类型</h2>
<p><strong>基本类型（6种）：</strong></p>
<p><strong>undefined、null、string、number、boolean、Symbol（ES6 新增的）、BigInt（ES2020）</strong></p>
<p>普通基本类型：undefined、null、symbol（ES6）</p>
<p>特殊基本包装类型：string、number、boolean</p>
<p><strong>引用类型（5种）：Object、Array、RegExp、Date、Function</strong></p>
<p><strong>区别：引用类型值可添加属性和方法，而基本类型值则不可以。</strong></p>
<p><strong>基本类型</strong></p>
<p>基本类型的变量是存放在栈内存（Stack）里的<br>
基本数据类型的值是按值访问的<br>
基本类型的比较是它们的值的比较</p>
<p><strong>引用类型</strong></p>
<p>引用类型的值是保存在堆内存（Heap）中的对象（Object）<br>
引用类型的值是按引用访问的<br>
引用类型的比较是引用的比较</p>
<h2 id="问：JS-隐式转换，显式转换"><a class="header-anchor" href="#问：JS-隐式转换，显式转换"> </a>问：JS 隐式转换，显式转换</h2>
<p>一般非基础类型进行转换时会先调用 valueOf，如果 valueOf 无法返回基本类型值，就会调用 toString</p>
<h3 id="字符串和数字"><a class="header-anchor" href="#字符串和数字"> </a>字符串和数字</h3>
<ul>
<li>+ 操作符，如果有一个为字符串，那么都转化到字符串然后执行字符串拼接</li>
<li>- 操作符，转换为数字，相减 (-a, a * 1 a/1) 都能进行隐式强制类型转换</li>
</ul>
<h3 id="布尔值到数字"><a class="header-anchor" href="#布尔值到数字"> </a>布尔值到数字</h3>
<ul>
<li>1 + true = 2</li>
<li>1 + false = 1</li>
</ul>
<h3 id="转换为布尔值"><a class="header-anchor" href="#转换为布尔值"> </a>转换为布尔值</h3>
<ul>
<li>for 中第二个</li>
<li>while</li>
<li>if</li>
<li>三元表达式</li>
<li>|| （逻辑或） &amp;&amp; （逻辑与）左边的操作数</li>
</ul>
<h3 id="符号"><a class="header-anchor" href="#符号"> </a>符号</h3>
<ul>
<li>不能被转换为数字</li>
<li>能被转换为布尔值（都是 true）</li>
<li>可以被转换成字符串 “Symbol(cool)”</li>
</ul>
<h3 id="宽松相等和严格相等"><a class="header-anchor" href="#宽松相等和严格相等"> </a>宽松相等和严格相等</h3>
<p>宽松相等允许进行强制类型转换，而严格相等不允许</p>
<h4 id="字符串与数字"><a class="header-anchor" href="#字符串与数字"> </a>字符串与数字</h4>
<p>转换为数字然后比较</p>
<h4 id="其他类型与布尔类型"><a class="header-anchor" href="#其他类型与布尔类型"> </a>其他类型与布尔类型</h4>
<p>先把布尔类型转换为数字，然后继续进行比较</p>
<h4 id="对象与非对象"><a class="header-anchor" href="#对象与非对象"> </a>对象与非对象</h4>
<p>执行对象的 ToPrimitive(对象）然后继续进行比较</p>
<h4 id="假值列表"><a class="header-anchor" href="#假值列表"> </a>假值列表</h4>
<ul>
<li>undefined</li>
<li>null</li>
<li>false</li>
<li>+0, -0, NaN</li>
<li>“”</li>
</ul>
<h2 id="var、let、const-的区别"><a class="header-anchor" href="#var、let、const-的区别"> </a>var、let、const 的区别</h2>
<ul>
<li>
<p>var声明的变量会挂载在window上，作用在全局，而let和const声明的变量作用在块作用域中</p>
</li>
<li>
<p>var声明变量存在变量提升，let和const不存在变量提升</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined  ===&gt;  a已声明还没赋值，默认得到undefined值</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错：b is not defined  ===&gt; 找不到b这个变量</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错：c is not defined  ===&gt; 找不到c这个变量</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>同一作用域下let和const不能声明同名变量，而var可以</p>
</li>
<li>
<p>let、const 存在暂时性死区</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">//在当前块作用域中存在a使用let/const声明的情况下，给a赋值10时，只会在当前作用域找变量a，</span>
    <span class="token comment">// 而这时，还未到声明时候，所以控制台Error:a is not defined</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>const</p>
<ul>
<li>一旦声明必须赋值，且不能用 null 占位</li>
<li>声明后不能修改</li>
<li>如果声明的是复合类型数据，可以修改其属性</li>
</ul>
</li>
</ul>
<h2 id="为什么要添加-let？"><a class="header-anchor" href="#为什么要添加-let？"> </a>为什么要添加 let？</h2>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> buttons <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>buttons<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    buttons<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"用户点击了按钮"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在上面的例子中无论用户如何点击都将打印“<strong>用户点击了按钮5</strong>”，是不是很奇怪，具体原因的话，得细品，这里就不赘述了。</p>
<p>在ES6之前，为了解决这个问题，我们得用<strong>IIFE</strong>来解决：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> buttons <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>buttons<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// buttons[i].addEventListener("click", function (){</span>
  <span class="token comment">//   console.log("用户点击了按钮" + (i+1));</span>
  <span class="token comment">// })</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    buttons<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"用户点击了按钮"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是因为函数是有作用域的。但是现在ES6横空出世，为我们带来了<code>let</code>关键字，我们就只需要将for循环中的var改为let就可以实现同样的功能啦。</p>
<h2 id="问：0-1-0-2-0-3-吗？为什么？"><a class="header-anchor" href="#问：0-1-0-2-0-3-吗？为什么？"> </a>问：0.1 + 0.2 === 0.3 吗？为什么？</h2>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0.30000000000000004</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在两数相加时，会先转换成二进制，0.1和0.2转换成二进制的时候尾数会发生无限循环，然后进行对阶运算，JS引擎对二进制进行截断，所以造成精度丢失。</p>
<p>JavaScirpt使用Number类型来表示数字（整数或浮点数），遵循IEEE754标准，通过64位来表示一个数字（1+11+52）</p>
<ul>
<li>1符号位，0表示正数，1表示负数 s</li>
<li>11指数位（e）</li>
<li>52尾数，小数部分（即有效数字）</li>
</ul>
<p>最大安全数字：<code>Number.MAX_SAFE_INTEGER = Math.pow(2，53) - 1</code>，转换成整数就是16位，所以<br>
0.1===0.1，是因为通过<code>toPrecision(16)</code>去有效位之后，两者是相等的。</p>
<p>总结：<strong>精度丢失可能出现在进制转换和对阶运算中</strong>。</p>
<h2 id="问：JS-整数是怎么表示的？"><a class="header-anchor" href="#问：JS-整数是怎么表示的？"> </a>问：JS 整数是怎么表示的？</h2>
<p>通过 Number 类型来表示，遵循 IEEE754 标准，通过 64 位来表示一个数字，（1 + 11 + 52），最大安全数字是 Math.pow(2, 53) - 1，对于 16 位十进制。（符号位 + 指数位 + 小数部分有效位）</p>
<h2 id="问：Number-的存储空间是多大？如果后台发送了一个超过最大自己的数字怎么办"><a class="header-anchor" href="#问：Number-的存储空间是多大？如果后台发送了一个超过最大自己的数字怎么办"> </a>问：Number() 的存储空间是多大？如果后台发送了一个超过最大自己的数字怎么办</h2>
<p>Math.pow(2, 53) ，53 为有效数字，会发生截断，等于 JS 能支持的最大数字。</p>
<h2 id="写代码：实现函数能够深度克隆基本类型"><a class="header-anchor" href="#写代码：实现函数能够深度克隆基本类型"> </a>写代码：实现函数能够深度克隆基本类型</h2>
<h3 id="浅克隆"><a class="header-anchor" href="#浅克隆"> </a>浅克隆</h3>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cloneObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> cloneObj<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="深克隆"><a class="header-anchor" href="#深克隆"> </a>深克隆</h3>
<p>实现方法：</p>
<ol>
<li>
<p>JSON.stringify() 以及 JSON.parse()</p>
<ul>
<li>不可以拷贝 undefined ， function， RegExp 等等类型</li>
</ul>
</li>
<li>
<p>Object.assign(target, source)</p>
<ul>
<li>
<p>多层嵌套（对象属性的值为引用类型）时，失效，因为只拷贝了引用。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"> <span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    b<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    c<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["a", 5, "c"]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["a", 5, "c"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ol>
<h4 id="手写深拷贝：递归拷贝"><a class="header-anchor" href="#手写深拷贝：递归拷贝"> </a>手写深拷贝：递归拷贝</h4>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span> obj<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="问：事件是如何实现的？"><a class="header-anchor" href="#问：事件是如何实现的？"> </a>问：事件是如何实现的？</h2>
<p>基于发布订阅模式，就是在浏览器加载的时候会读取事件相关的代码，但是只有实际等到具体的事件触发的时候才会执行。</p>
<p>在 Web 端，我们常见的就是 DOM 事件：</p>
<ul>
<li>DOM0级事件，直接在html元素上绑定<code>on-event</code>，比如onclick；取消的话，<code>dom.onclick=null</code>，同一个事件只能有一个处理程序，后面的会覆盖前面的。</li>
<li>DOM2级事件，通过<code>addEventListener</code>注册事件，通过 <code>removeEventListener</code> 来删除事件，一个事件可以有多个事件处理程序，按顺序执行，捕获事件和冒泡事件</li>
<li>DOM3级事件，增加了事件类型，比如Ul事件，焦点事件，鼠标事件</li>
</ul>
<p>参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/73091706">https://zhuanlan.zhihu.com/p/73091706</a></p>
<h2 id="问：事件流"><a class="header-anchor" href="#问：事件流"> </a>问：事件流</h2>
<p><strong>事件流</strong>描述了页面接收事件的顺序。</p>
<p>有意思的是，IE 和 Netscape 开发团队居然提出了两个截然相反的事件流概念：</p>
<ol>
<li>IE的事件流是 事件冒泡流，</li>
<li>标准的浏览器事件流是 事件捕获流。</li>
</ol>
<p>不过 addEventLister 给出了第三个参数同时支持冒泡与捕获，下文将介绍。</p>
<h3 id="分类"><a class="header-anchor" href="#分类"> </a>分类</h3>
<h4 id="事件冒泡流"><a class="header-anchor" href="#事件冒泡流"> </a>事件冒泡流</h4>
<p>IE 的事件流叫事件冒泡，也就是说事件的传播为：从事件开始的具体元素，一级级往上传播到较为不具体的节点。</p>
<p>案例如下：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>事件冒泡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>d</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当我们点击 div 元素时，事件是这样传播的：</p>
<p>div ➡️ body ➡️ html ➡️ document</p>
<p>现代浏览器都支持事件冒泡，IE9、Firefox、Chrome和Safari则将事件一直冒泡到window对象。</p>
<h4 id="事件捕获流"><a class="header-anchor" href="#事件捕获流"> </a>事件捕获流</h4>
<p>Netscape 团队提出的另一种事件流叫做事件捕获。它的原理刚好和事件冒泡相反，它的<strong>用意在于在事件到达预定目标之前捕获它，而最具体的节点应该是最后才接收到事件的</strong>。</p>
<p>比如还是上面的案例，当点击 div 元素时，事件的传播方向就变成了这样：</p>
<p>document ➡️ html ➡️ body ➡️ div</p>
<p>IE9、Firefox、Chrome 和 Safari 目前也支持这种事件流模型，但是有些老版本的浏览器不支持，所以很少人使用事件捕获，而是用事件冒泡的多一点。</p>
<h3 id="DOM-事件流"><a class="header-anchor" href="#DOM-事件流"> </a>DOM 事件流</h3>
<p>“DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段（在事件处理中被看作冒泡阶段的一部分）、事件冒泡阶段。</p>
<p>事件捕获最先发生，为提前拦截事件提供了可能。然后是实际的目标元素接收到事件。最后一个阶段是冒泡，最迟要在这个阶段响应事件。以前面的例子，则会按下图顺序触发事件。</p>
<img src="https://i.loli.net/2021/10/12/obhgdzx1FqV2Y8G.png" alt="image-20210928181153225" style="zoom:50%;">
<h3 id="事件处理程序"><a class="header-anchor" href="#事件处理程序"> </a>事件处理程序</h3>
<p><strong>事件</strong>就是用户或者浏览器自身执行某种动作，比如click、load、mouseover。<br>
而响应某个事件的函数就叫做<strong>事件处理程序（事件监听器）</strong>，事件处理程序的名字以 on 开头，click=&gt;onclick、load=&gt;onload</p>
<p>DOM2提供了两个方法来让我们处理和删除事件处理程序的操作：a<strong>ddEventListener()</strong> 和 <strong>removeEventListener()</strong> 。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment">// 该方法应用至DOM节点</span>
<span class="token comment">// 第一个参数为事件名；</span>
<span class="token comment">// 第二个为事件处理程序；</span>
<span class="token comment">// 第三个为布尔值，true 为事件捕获阶段调用事件处理程序，false 为事件冒泡阶段调用事件处理程序。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="IE-兼容"><a class="header-anchor" href="#IE-兼容"> </a>IE 兼容</h4>
<ul>
<li>attchEvent(‘on’ + type, handler)</li>
<li>detachEvent(‘on’ + type, handler)</li>
</ul>
<h3 id="事件监听器执行顺序"><a class="header-anchor" href="#事件监听器执行顺序"> </a>事件监听器执行顺序</h3>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>事件冒泡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parEle<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我是父元素
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sonEle<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>我是子元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> sonEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'sonEle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> parEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'parEle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  parEle<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'父级 捕获'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  parEle<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'父级 冒泡'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  sonEle<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'子级捕获'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sonEle<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'子级冒泡'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* 父级 捕获
   * 子级捕获
   * 子级冒泡
   * 父级 冒泡 */</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当容器元素及嵌套元素，既在捕获阶段，又在冒泡阶段调用事件处理程序时，事件按DOM事件流的顺序执行事件处理程序：父级捕获 ➡️ 子级冒泡 ➡️ 子级捕获 ➡️ 父级冒泡 。</p>
<h3 id="参考链接"><a class="header-anchor" href="#参考链接"> </a>参考链接</h3>
<p><a href="https://juejin.im/entry/5826ba9d0ce4630056f85e07">https://juejin.im/entry/5826ba9d0ce4630056f85e07</a></p>
<h2 id="问：new-一个函数发生了什么"><a class="header-anchor" href="#问：new-一个函数发生了什么"> </a>问：new 一个函数发生了什么</h2>
<blockquote>
<p>源于 MDN：</p>
<p>对于<code>var o = new Foo();</code></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//JavaScript 实际上执行的是：</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
o<span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
<span class="token function">Foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">///由于这里this是指向o,可以把什么this.name/getName绑定到o上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<ol>
<li>创造一个全新的对象</li>
<li>这个对象会被执行 [[Prototype]] 连接：将这个新对象的 [[Prototype]] 连接到其构造函数.prototype 所指向的对象上</li>
<li>这个新对象会绑定到函数调用的 this</li>
<li>如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象；否则直接返回函数的返回值</li>
</ol>
<h3 id="问：new-一个构造函数，如果函数返回-return-、-return-null-，-return-1-，-return-true-会发生什么情况？"><a class="header-anchor" href="#问：new-一个构造函数，如果函数返回-return-、-return-null-，-return-1-，-return-true-会发生什么情况？"> </a>问：new 一个构造函数，如果函数返回 <code>return {}</code> 、 <code>return null</code> ， <code>return 1</code> ， <code>return true</code> 会发生什么情况？</h3>
<p>如果函数返回一个对象，那么new 这个函数调用返回这个函数的返回对象，否则返回 new 创建的新对象</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token constant">A</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token constant">B</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token constant">C</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token constant">D</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// B {}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// C {}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// D {}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="问：symbol-有什么用处？"><a class="header-anchor" href="#问：symbol-有什么用处？"> </a>问：<code>symbol</code> 有什么用处？</h2>
<p>可以用来表示一个独一无二的变量防止命名冲突。</p>
<p>还可以利用 <code>symbol</code> 不会被常规的方法（除了 <code>Object.getOwnPropertySymbols</code> 外）遍历到，所以可以用来模拟私有变量。</p>
<blockquote>
<p>主要用来提供遍历接口，布置了 <code>symbol.iterator</code> 的对象才可以使用 <code>for···of</code> 循环，可以统一处理数据结构。调用之后回返回一个遍历器对象，包含有一个 next 方法，使用 next 方法后有两个返回值 value 和 done 分别表示函数当前执行位置的值和是否遍历完毕。</p>
<p>Symbol.for() 可以在全局访问 symbol</p>
</blockquote>
<h2 id="for…in-和-for…of-区别"><a class="header-anchor" href="#for…in-和-for…of-区别"> </a>for…in 和 for…of 区别</h2>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">'李四'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token string">'12'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name age</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> arr<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { name: '张三' } { name: '李四' }</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> obj<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: obj is not iterable</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="for…in"><a class="header-anchor" href="#for…in"> </a>for…in</h3>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">method</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> myArray<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>
myArray<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"数组"</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> index <span class="token keyword">in</span> myArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 1</span>
<span class="token comment">// 2</span>
<span class="token comment">// 4</span>
<span class="token comment">// 5</span>
<span class="token comment">// 6</span>
<span class="token comment">// 7</span>
<span class="token comment">// 数组</span>
<span class="token comment">// [Function (anonymous)]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>index索引为字符串型数字，不能直接进行几何运算</li>
<li>遍历顺序有可能不是按照实际数组的内部顺序</li>
<li>使用for in会遍历数组所有的<strong>可枚举</strong>属性，包括原型。例如上栗的原型方法method和name属性</li>
</ol>
<p><strong>所以for in更适合遍历对象，不要使用for in遍历数组。</strong></p>
<h3 id="for…of"><a class="header-anchor" href="#for…of"> </a>for…of</h3>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">method</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> myArray<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>
myArray<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"数组"</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">of</span> myArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 1</span>
<span class="token comment">// 2</span>
<span class="token comment">// 4</span>
<span class="token comment">// 5</span>
<span class="token comment">// 6</span>
<span class="token comment">// 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所有拥有Symbol.iterator的对象被称为<strong>可迭代</strong>的。for-of 循环首先调用集合的Symbol.iterator方法，紧接着返回一个新的迭代器对象。迭代器对象可以是任意具有.next()方法的对象；for-of循环将重复调用这个方法，每次循环调用一次。举个例子，这段代码是我能想出来的最简单的迭代器：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> zeroesForeverIterator <span class="token operator">=</span> <span class="token punctuation">{</span>
 <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>done<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以：</p>
<ul>
<li>for…of适用遍历数/数组对象/字符串/map/set等拥有迭代器对象的集合.但是不能遍历对象,因为没有迭代器对象.与forEach()不同的是，它可以正确响应break、continue和return语句</li>
<li>for-of循环不支持普通对象，但如果你想迭代一个对象的属性，你可以用for-in循环（这也是它的本职工作）或内建的Object.keys()方法：</li>
</ul>
<h2 id="问：什么是作用域？"><a class="header-anchor" href="#问：什么是作用域？"> </a>问：什么是作用域？</h2>
<p>ES5 中只存在两种作用域：全局作用域和函数作用域。在 JavaScript 中，我们将作用域定义为一套规则，这套规则用来管理引擎如何在当前作用域以及嵌套子作用域中根据标识符名称进行变量（变量名或者函数名）查找。</p>
<h2 id="什么是作用域链？"><a class="header-anchor" href="#什么是作用域链？"> </a>什么是作用域链？</h2>
<p>当访问一个变量时，编译器在执行这段代码时，会首先从当前的作用域中查找是否有这个标识符，如果没有找到，就会去父作用域查找，如果父作用域还没找到继续向上查找，直到全局作用域为止。而作用域链，就是由当前作用域与上层作用域的一系列变量对象组成，它保证了当前执行的作用域对符合访问权限的变量和函数的有序访问。</p>
<h2 id="闭包"><a class="header-anchor" href="#闭包"> </a>闭包</h2>
<p><strong>闭包是指有权访问另一个函数作用域中的变量的函数。</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">outer</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'Jake'</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="闭包产生的本质"><a class="header-anchor" href="#闭包产生的本质"> </a>闭包产生的本质</h3>
<p>当前环境中存在指向父级作用域的引用。</p>
<h3 id="闭包的应用场景"><a class="header-anchor" href="#闭包的应用场景"> </a>闭包的应用场景</h3>
<h4 id="柯里化"><a class="header-anchor" href="#柯里化"> </a>柯里化</h4>
<p><strong>柯里化</strong>是指一个函数，它接受函数A，并返回一个新的函数，这个新的函数能够处理函数A的剩余参数。</p>
<p><a href="https://www.baidu.com/link?url=QH54rAi6yWUH7fGhuq-Rm7UOtknoW1DFy7_ORz0zP0VuAExroUh6RLA7agsxCBmj&amp;wd=&amp;eqid=d34418c300abc4870000000660a15dca">一文搞懂JS系列(四)之闭包应用-柯里化,偏函数 - 知乎</a></p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token parameter">province<span class="token punctuation">,</span>city<span class="token punctuation">,</span>area</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> province <span class="token operator">+</span> city <span class="token operator">+</span> area<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token string">'浙江省'</span><span class="token punctuation">,</span><span class="token string">'杭州市'</span><span class="token punctuation">,</span><span class="token string">'西湖区'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//浙江省杭州市西湖区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>进行柯里化后，如下：</p>
  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token parameter">province</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">city</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">area</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> province <span class="token operator">+</span> city <span class="token operator">+</span> area<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token string">'浙江省'</span><span class="token punctuation">,</span><span class="token string">'杭州市'</span><span class="token punctuation">,</span><span class="token string">'西湖区'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//浙江省杭州市西湖区</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="防抖-和-节流"><a class="header-anchor" href="#防抖-和-节流"> </a>防抖 和 节流</h4>
<p><a href="https://www.baidu.com/link?url=SQRVBQZgWGtcHNjz_1zCX6sPnY07wtseQahyrBufokh8-0lPfET201IAjVVp33DM&amp;wd=&amp;eqid=e2d4eb4700627d4f0000000660a15eeb">函数的防抖和节流是个啥??? - 知乎</a></p>
<p><a href="https://segmentfault.com/a/1190000018428170">浅谈 JS 防抖和节流</a></p>
<p><strong>应用场景</strong></p>
<ul>
<li>
<p>搜索框input事件，例如要支持输入实时搜索可以使用节流方案（间隔一段时间就必须查询相关内容），或者使用防抖方案实现输入间隔大于某个值（如500ms），就当做用户输入完成，然后开始搜索，具体使用哪种方案要看业务需求。</p>
</li>
<li>
<p>页面resize事件，常见于需要做页面适配的时候。需要根据最终呈现的页面情况进行dom渲染（这种情形一般是使用防抖，因为只需要判断最后一次的变化情况）</p>
</li>
</ul>
<p><strong>防抖</strong></p>
<p>函数防抖，这里的抖动就是执行的意思，而一般的抖动都是持续的，多次的。假设函数持续多次执行，我们希望让它冷静下来再执行。也就是<strong>当持续触发事件的时候，函数是完全不执行的，等最后一次触发结束的一段时间之后，再去执行。</strong></p>
<ul>
<li>持续触发不执行</li>
<li>不触发的一段时间之后再执行</li>
</ul>
<img src="https://pic3.zhimg.com/v2-5a26d943a69c5c50263d841dec0307c6_b.webp" alt="防抖" style="zoom: 67%;">
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*
* fn [function] 需要防抖的函数
* delay [number] 毫秒，防抖期限值
*/</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">//借助闭包，这个返回值用于clearTimeout</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 进入该分支语句，说明当前正在一个计时过程中，并且又触发了相同事件。所以要取消当前的计时，重新开始计时</span>
            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
            timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span> 
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token comment">// 进入该分支说明当前并没有在计时，那么就开始一个计时</span>
            timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>delay<span class="token punctuation">)</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>节流</strong></p>
<p>节流的意思是让函数有节制地执行，而不是毫无节制的触发一次就执行一次。什么叫有节制呢？就是在一段时间内，只执行一次。</p>
<ul>
<li>持续触发并不会执行多次</li>
<li>到一定时间再去执行</li>
</ul>
<img src="https://pic1.zhimg.com/v2-3cf8ffee0dbe9dfc471e022d528a94a0_b.webp" alt="节流" style="zoom:67%;">
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>delay</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> valid <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>valid<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//当valid === false</span>
           <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token comment">// 休息时间 暂不接客</span>
       <span class="token punctuation">}</span>
       <span class="token comment">// 工作时间，执行函数并且在间隔期内把状态位设为无效</span>
        valid <span class="token operator">=</span> <span class="token boolean">false</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            valid <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="原型链"><a class="header-anchor" href="#原型链"> </a>原型链</h2>
<h3 id="什么是原型链？"><a class="header-anchor" href="#什么是原型链？"> </a>什么是原型链？</h3>
<p>当对象查找一个属性的时候，如果没有在自身找到，那么就会查找自身的原型，如果原型还没有找到，那么会继续查找原型的原型，直到找到 Object.prototype 的原型时，此时原型为 null，查找停止。</p>
<p>这种通过原型链接的逐级向上的查找链被称为原型链。</p>
<h3 id="什么是原型继承？"><a class="header-anchor" href="#什么是原型继承？"> </a>什么是原型继承？</h3>
<p>一个对象可以使用另外一个对象的属性或者方法，就称之为继承。具体是通过将这个对象的原型设置为另外一个对象，这样根据原型链的规则，如果查找一个对象属性且在自身不存在时，就会查找另外一个对象，相当于一个对象可以使用另外一个对象的属性和方法了。</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 组合式继承（P244）</span>
<span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 继承属性</span>
  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 继承方法</span>
<span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="为什么原型链的终点是-null？"><a class="header-anchor" href="#为什么原型链的终点是-null？"> </a>为什么原型链的终点是 null？</h3>
<p>我们先假设<code>Object.prototype</code>为终点。那么，当我们取它的原型时，应该怎么办？即 <code>Object.prototype.__proto__</code>应该返回什么？</p>
<p>取一个对象的属性时，可能发生三种情况：</p>
<ol>
<li>如果属性存在，那么返回属性的值。</li>
<li>如果属性不存在，那么返回undefined。</li>
<li>不管属性存在还是不存在，有可能抛异常。</li>
</ol>
<p>我们已经假设<code>Object.prototype</code>是终点了，所以看起来不能是情况1。另外，抛出异常也不是好的设计，所以也不是情况3。那么情况2呢，它不存在原型属性，返回undefined怎么样？也不好，因为返回 undefined 一种解释是原型不存在，但是也相当于原型就是 undefined。这样，在原型链上就会存在一个非对象的值。</p>
<p>所以，最佳选择就是 null。<strong>一方面，你没法访问null的属性，所以起到了终止原型链的作用；另一方面，null 在某种意义上也是一种对象，即空对象。这样一来，就不会违反“原型链上只能有对象”的约定。</strong></p>
<p>所以，“原型链的终点是null”虽然不是必须不可的，但是却是最合理的。</p>
<h2 id="问：-函数中的arguments是数组吗？类数组转数组的方法了解一下？"><a class="header-anchor" href="#问：-函数中的arguments是数组吗？类数组转数组的方法了解一下？"> </a>问： 函数中的arguments是数组吗？类数组转数组的方法了解一下？</h2>
<p>是类数组，是属于鸭子类型的范畴，长得像数组。</p>
<p>类数组转数组的方法：</p>
<ul>
<li>
<p>… 运算符</p>
</li>
<li>
<p>Array.from</p>
</li>
<li>
<p>Array.prototype.slice.apply(arguments)</p>
</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Arguments] { '0': 'a' }</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="instanceof-如何使用"><a class="header-anchor" href="#instanceof-如何使用"> </a>instanceof 如何使用</h2>
<p>左边可以是任意值，右边只能是函数</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token string">'hello tuture'</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="判断数据类型的四种方法"><a class="header-anchor" href="#判断数据类型的四种方法"> </a>判断数据类型的四种方法</h2>
<ol>
<li>
<p>typeof</p>
</li>
<li>
<p>instanceof： instanceof 用来判断A是否为B的实例，表达式为：<code>A instanceof B</code>。如果A是B的实例，则返回true，否则返回false。instanceof 检测的是原型，内部机制是通过判断对象的原型链中是否有类型的原型。</p>
 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">myInstanceof</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span>origin</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     <span class="token keyword">while</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> origin<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// target.__proto__ 也可以写作 Object.getPrototypeOf(target)</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span>
         <span class="token punctuation">}</span>
         target <span class="token operator">=</span> target<span class="token punctuation">.</span>__proto__
     <span class="token punctuation">}</span>
     <span class="token keyword">return</span> <span class="token boolean">false</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myInstanceof</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>Array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myInstanceof</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>Object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>constructor</p>
<img src="https://i.loli.net/2021/10/13/wz2YPBrOWtHALsG.png" alt="constructor" style="zoom:67%;">
</li>
<li>
<p>Object.prototype.toString()： toString()是Object的原型方法，调用该方法，默认返回当前对象的[[Class]]。这是一个内部属性，其格式为[object Xxx],其中Xxx就是对象的类型。</p>
<p>对于Object对象，直接调用toString()就能返回[object Object],而对于其他对象，则需要通过call、apply来调用才能返回正确的类型信息。</p>
<p><img src="https://i.loli.net/2021/10/13/FUN1JHZy9hfOul6.png" alt=""></p>
<p><img src="https://i.loli.net/2021/10/13/ZI9QqjMbGts37kL.png" alt="Object.prototype.toString()"></p>
</li>
</ol>
<h2 id="typeof-NaN会输出什么？"><a class="header-anchor" href="#typeof-NaN会输出什么？"> </a>typeof NaN会输出什么？</h2>
<p><code>typeof NaN === 'number'</code></p>
<h2 id="合并对象的方法"><a class="header-anchor" href="#合并对象的方法"> </a>合并对象的方法</h2>
<ul>
<li>
<p>Object.assign(target, …sources)</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  <span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> o3 <span class="token operator">=</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
   
  <span class="token keyword">var</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">,</span> o3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: 1, b: 2, c: 3 }</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// { a: 1, b: 2, c: 3 }, 且目标对象自身也会改变。</span>
<span class="token operator">-</span> 扩展运算符

  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`js
  <span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">...</span>obj1<span class="token punctuation">,</span> <span class="token operator">...</span>obj2<span class="token punctuation">}</span>
  
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// { a: 1, b: 2}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>JQuery的 $.extend方法</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> sex<span class="token operator">:</span> <span class="token string">'man'</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> object2 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">}</span>

$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>object1<span class="token punctuation">,</span> object2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="写代码：数组扁平化"><a class="header-anchor" href="#写代码：数组扁平化"> </a>写代码：数组扁平化</h2>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="问：bind，call，apply-具体指什么"><a class="header-anchor" href="#问：bind，call，apply-具体指什么"> </a>问：bind，call，apply 具体指什么</h2>
<p><strong>使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。</strong></p>
<p><strong>call</strong>: Array.prototype.call(this, args1, args2])</p>
<p><strong>apply</strong>: Array.prototype.apply(this, [args1, args2]) 。ES6 之前用来展开数组调用，foo.appy(null, [])，ES6 之后使用 <code>...</code> 操作符</p>
<h2 id="写代码：手写-call、apply、bind"><a class="header-anchor" href="#写代码：手写-call、apply、bind"> </a>写代码：手写 call、apply、bind</h2>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// call：参数为数组的展开</span>
<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    context <span class="token operator">=</span> context <span class="token operator">||</span> window <span class="token comment">// context为可选参数，如果不传的话默认上下文是window</span>
    
    <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 数组元素为除 context 之外的所有参数</span>
    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">// 给content创建一个fn属性，并将值设置为需要调用的函数</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
    
    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn
    <span class="token keyword">return</span> result
<span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// apply：参数为数组</span>
<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  context <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>
  
  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> result<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> args <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// bind</span>
<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  context <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>
  
  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> _args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>_args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bindThis</span><span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> oTarget</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>oTarget<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="问：如果一个构造函数，bind了一个对象，用这个构造函数创建出的实例会继承这个对象的属性吗？为什么？"><a class="header-anchor" href="#问：如果一个构造函数，bind了一个对象，用这个构造函数创建出的实例会继承这个对象的属性吗？为什么？"> </a>问：如果一个构造函数，bind了一个对象，用这个构造函数创建出的实例会继承这个对象的属性吗？为什么？</h2>
<p>不会继承，因为根据 this 绑定四大规则，new 绑定的优先级高于 bind 显示绑定，通过 new 进行构造函数调用时，会创建一个新对象，这个新对象会代替 bind 的对象绑定，作为此函数的 this，并且在此函数没有返回对象的情况下，返回这个新建的对象</p>
<h2 id="箭头函数和普通函数有啥区别？箭头函数能当构造函数吗？"><a class="header-anchor" href="#箭头函数和普通函数有啥区别？箭头函数能当构造函数吗？"> </a>箭头函数和普通函数有啥区别？箭头函数能当构造函数吗？</h2>
<p><strong>普通函数</strong>通过 function 关键字定义，在运行时绑定，只取决于函数的调用方式，在哪里被调用，调用位置。（取决于调用者，和是否独立运行）</p>
<p><strong>箭头函数</strong>使用被称为 “胖箭头” 的操作 <code>=&gt;</code> 定义，箭头函数不应用普通函数 this 绑定的四种规则，而是根据外层（函数或全局）的作用域来决定 this，且箭头函数的绑定无法被修改（new 也不行）。</p>
<ul>
<li>箭头函数常用于回调函数中，包括事件处理器或定时器</li>
<li>没有原型、没有 super，没有 arguments，没有 new.target</li>
<li>不能通过 new 关键字调用
<ul>
<li>因为，箭头函数没有 [[Construct]] 方法，不能被用作构造函数调用，当使用 new 进行函数调用时会报错
<ul>
<li>一个函数内部有两个方法：[[Call]] 和 [[Construct]]，在通过 new 进行函数调用时，会执行 [[construct]] 方法，创建一个实例对象，然后再执行这个函数体，将函数的 this 绑定在这个实例对象上。当直接调用时，执行 [[Call]] 方法，直接执行函数体</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  i<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">c</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">.</span>i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined Window</span>
obj<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 Object {...}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="问：知道-ES6-的-Class-嘛？Static-关键字有了解嘛？"><a class="header-anchor" href="#问：知道-ES6-的-Class-嘛？Static-关键字有了解嘛？"> </a>问：知道 ES6 的 Class 嘛？Static 关键字有了解嘛？</h2>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this 的内容定义在实例上</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">locate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'instance'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 定义在类的原型上</span>
  <span class="token function">locate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'prototype'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 定义在类本身上</span>
  <span class="token keyword">static</span> <span class="token function">locate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span><span class="token function">locate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// instance Person { locate: [Function (anonymous)] }</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">locate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prototype {}</span>
Person<span class="token punctuation">.</span><span class="token function">locate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// class [class Person]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="写代码：Promise-原理"><a class="header-anchor" href="#写代码：Promise-原理"> </a>写代码：Promise 原理</h2>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">myPromise</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallBack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallBack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'PENDING'</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>

    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'RESOLVED'</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallBack<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=&gt;</span> <span class="token function">cb</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'REJECTED'</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallBack<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=&gt;</span> <span class="token function">cb</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onResolved<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">'PENDING'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallBack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallBack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">'RESOLVED'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">onResolved</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">'REJECTED'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="问：js脚本加载问题，async、defer问题"><a class="header-anchor" href="#问：js脚本加载问题，async、defer问题"> </a>问：js脚本加载问题，async、defer问题</h2>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这种情况下 JS 会阻塞浏览器，浏览器必须等待 index.js 加载和执行完毕才能去做其它事情。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>async 模式下，JS 不会阻塞浏览器做任何其它的事情。它的加载是异步的，当它加载结束，JS 脚本会立即执行。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">defer</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myscript.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>defer 模式下，JS 的加载是异步的，执行是被推迟的。等整个 myscript.js 文档解析完成、DOMContentLoaded 事件即将被触发时，被标记了 defer 的 JS 文件才会开始依次执行。</p>
<p><strong>因此：</strong></p>
<ul>
<li>如果与 DOM 和其他脚本依赖不强时，使用 async</li>
<li>如果依赖其他脚本和 DOM 结果，使用 defer</li>
</ul>
<h2 id="如何判断一个对象是不是空对象？"><a class="header-anchor" href="#如何判断一个对象是不是空对象？"> </a>如何判断一个对象是不是空对象？</h2>
<p><code>Object.keys(obj).length === 0</code></p>
<h2 id="说下对js的了解吧"><a class="header-anchor" href="#说下对js的了解吧"> </a>说下对js的了解吧</h2>
<p>JavaScript严格意义上来说分为：语言标准部分（ECMAScript）+ 宿主环境部分</p>
<p><strong>语言标准部分</strong></p>
<p>2015年发布的ES6，引入了诸多新特性，使得编写大型项目变成可能</p>
<p><strong>宿主环境部分</strong></p>
<ul>
<li>在浏览器宿主环境包括 DOM + BOM 等</li>
<li>在Node中，宿主环境包括一些文件、数据库、网络、与操作系统的交互等</li>
</ul>
<h2 id="写代码：数组去重"><a class="header-anchor" href="#写代码：数组去重"> </a>写代码：数组去重</h2>
<p><code>Array.from(new Set([1, 1, 2, 2]))</code></p>
<h2 id="问：setTimeout-fn-0-多久才执行，Event-Loop"><a class="header-anchor" href="#问：setTimeout-fn-0-多久才执行，Event-Loop"> </a>问：<code>setTimeout(fn, 0)</code>多久才执行，Event Loop</h2>
<p>setTimeout 按照顺序放到队列里面，然后等待函数调用栈清空之后才开始执行，而这些操作进入队列的顺序，则由设定的延迟时间来决定</p>
<h2 id="什么是EventLoop"><a class="header-anchor" href="#什么是EventLoop"> </a>什么是EventLoop</h2>
<p><code>Event Loop</code>即事件循环，指<strong>浏览器或Node的一种解决JavaScript单线程运行时，阻塞的一种机制</strong>，也就是异步的原理。</p>
<p>javascript是一门<strong>单线程</strong>语言，虽然HTML5提出了Web-workers这样的多线程解决方案，但是并没有改变JaveScript是单线程的本质。</p>
<blockquote>
<p><strong>什么是H5 Web Workers？</strong></p>
<p>就是将一些大计算量的代码交由Web Worker运行而不冻结用户界面，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p>
</blockquote>
<h3 id="javascript事件循环-Event-Loop"><a class="header-anchor" href="#javascript事件循环-Event-Loop"> </a>javascript事件循环 Event Loop</h3>
<p>两类任务：</p>
<ul>
<li>同步任务</li>
<li>异步任务</li>
</ul>
<p><img src="https://i.loli.net/2021/10/13/6raKAg8jLdRUHTX.png" alt="两类任务"></p>
<ol>
<li><strong>同步和异步任务分别进入不同的“场所”执行。</strong>
<ul>
<li><strong>所有同步任务都在主线程上执行，形成一个执行栈；</strong></li>
<li><strong>而异步任务进入Event Table，并注册回调函数</strong>
<ul>
<li><strong>当这个异步任务有了运行结果，Event Table会将这个回调函数移入Event Queue，进入等待状态</strong></li>
</ul>
</li>
</ul>
</li>
<li><strong>当主线程内同步任务执行完成，会去Event Queue读取对应的函数，并结束它的等待状态，进入主线程执行</strong></li>
<li><strong>主线程不断重复上面3个步骤，也就是常说的Event Loop(事件循环)。</strong></li>
</ol>
<blockquote>
<p><strong>那么我们怎么知道什么时候主线程是空的呢？</strong></p>
<p>js引擎存在monitoring process进程，会持续不断地检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。</p>
</blockquote>
<h3 id="宏任务-和-微任务"><a class="header-anchor" href="#宏任务-和-微任务"> </a>宏任务 和 微任务</h3>
<p><strong>宏任务，macrotask，也叫tasks。</strong> 一些异步任务的回调会依次进入macro task queue，等待后续被调用，这些异步任务包括：</p>
<ul>
<li>script (可以理解为外层同步代码)</li>
<li>setTimeout</li>
<li>setInterval</li>
<li>setImmediate (Node独有)</li>
<li>requestAnimationFrame (浏览器独有)</li>
<li>I/O</li>
<li>UI rendering (浏览器独有)</li>
</ul>
<p><strong>微任务，microtask，也叫jobs。</strong> 另一些异步任务的回调会依次进入micro task queue，等待后续被调用，这些异步任务包括：</p>
<ul>
<li>process.nextTick (Node独有)</li>
<li>Promise</li>
<li>Object.observe</li>
<li>MutationObserver</li>
</ul>
<h4 id="setTimeout和setInterval"><a class="header-anchor" href="#setTimeout和setInterval"> </a>setTimeout和setInterval</h4>
<p><code>setTimeout(fn,0)</code>这里的延迟0秒时什么意思呢？</p>
<p><strong>含义是，当主线程执行栈内为空时，不用等待，就马上执行。</strong></p>
<p>setInterval和setTimeout类似，只是前者是循环的执行。对于执行顺序来说，<code>setInterval</code>会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待。对于<code>setInterval(fn,ms)</code>来说，我们已经知道<strong>不是每过<code>ms</code>秒会执行一次<code>fn</code>，而是每过<code>ms</code>秒，会有<code>fn</code>进入Event Queue</strong>。<strong>一旦setInterval的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了</strong>。</p>
<h4 id="promise、process-nextTick和async-await"><a class="header-anchor" href="#promise、process-nextTick和async-await"> </a>promise、process.nextTick和async/await</h4>
<p><code>setTimeout(fn, 0)</code>在下一轮“事件循环”开始时执行，<code>Promise.then()</code>在本轮“事件循环”结束时执行。</p>
<p>不同类型的任务会进入对应的Event Queue：</p>
<p><strong>Promise中的异步体现在<code>then</code>和<code>catch</code>中，所以写在Promise中的代码是被当做同步任务立即执行的。</strong></p>
<p><strong>await实际上是一个让出线程的标志</strong>。<strong>await后面的表达式会先执行一遍，将await后面的代码加入到microtask中</strong>，然后就会跳出整个async函数来执行后面的代码；</p>
<blockquote>
<p>因为async await 本身就是promise+generator的语法糖。所以await后面的代码是microtask。</p>
</blockquote>
<h3 id="浏览器的-EventLoop"><a class="header-anchor" href="#浏览器的-EventLoop"> </a>浏览器的 EventLoop</h3>
<p><img src="https://i.loli.net/2021/10/13/Yb8MwprtAhiJ6qW.png" alt=""></p>
<p>这张图将浏览器的Event Loop完整的描述了出来，我来讲执行一个JavaScript代码的具体流程：</p>
<ol>
<li>执行全局Script同步代码，这些同步代码有一些是同步语句，有一些是异步语句（比如setTimeout等）；</li>
<li>全局Script代码执行完毕后，调用栈Stack会清空；</li>
<li>从微队列microtask queue中取出位于队首的回调任务，放入调用栈Stack中执行，执行完后microtask queue长度减1；</li>
<li>继续取出位于队首的任务，放入调用栈Stack中执行，以此类推，直到直到把microtask queue中的所有任务都执行完毕。<strong>注意，如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行</strong>；</li>
<li>microtask queue中的所有任务都执行完毕，此时microtask queue为空队列，调用栈Stack也为空；</li>
<li>取出宏队列macrotask queue中位于队首的任务，放入Stack中执行；</li>
<li>执行完毕后，调用栈Stack为空；</li>
<li>重复第3-7个步骤；</li>
<li>重复第3-7个步骤；</li>
<li>…</li>
</ol>
<p><strong>可以看到，这就是浏览器的事件循环Event Loop</strong></p>
<p>这里归纳3个重点：</p>
<ol>
<li>宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务；</li>
<li>微任务队列中所有的任务都会被依次取出来执行，直到microtask queue为空；</li>
<li>图中没有画UI rendering的节点，因为这个是由浏览器自行判断决定的，但是只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render。</li>
</ol>
<p><strong>举个例子</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
    script start
    script end
    promise1
    promise2
    setTimeout
 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>图解</strong></p>
<img src="https://pic2.zhimg.com/v2-d1ca0d6b13501044a5f74c99becbcd3d_b.webp" alt="图解" style="zoom: 150%;">
<p><strong>再举个例子</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 end'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async2 end'</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
<span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Promise'</span><span class="token punctuation">)</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span>
<span class="token comment">/*
    script start
    async2 end
    Promise
    script end
    async1 end
    promise1
    promise2
    setTimeout
 */</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="JS为什么不能多线程？"><a class="header-anchor" href="#JS为什么不能多线程？"> </a>JS为什么不能多线程？</h2>
<p>作为浏览器脚本语言，JavaScript的主要用途是与用户互动，以及操作DOM。这决定了它只能是单线程，否则会带来很复杂的同步问题。</p>
<p>比如，假定JavaScript同时有两个线程，一个线程在某个DOM节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？所以，为了避免复杂性，JavaScript就是单线程。</p>
<p>为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p>
<h2 id="复制一个数组有哪些方法？哪个方法最好？"><a class="header-anchor" href="#复制一个数组有哪些方法？哪个方法最好？"> </a>复制一个数组有哪些方法？哪个方法最好？</h2>
<ul>
<li>for()循环（浅拷贝）</li>
<li>while()循环（浅拷贝）</li>
<li>Array.map（浅拷贝）</li>
<li>Array.filter（浅拷贝）</li>
<li>Array.reduce（浅拷贝）
<ul>
<li><code>reduce()</code> 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。——<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce">Array.prototype.reduce() | MDN</a></li>
</ul>
</li>
<li>Array.slice（浅拷贝） ⭐️⭐️</li>
<li>Array.cancat（浅拷贝）</li>
<li>Array.from（浅拷贝）</li>
<li>扩展运算符[…]（深拷贝/浅拷贝）⭐️</li>
<li>JSON.parse &amp; JSON.stringify（深拷贝）</li>
</ul>
<h2 id="命令式代码-与-声明式代码"><a class="header-anchor" href="#命令式代码-与-声明式代码"> </a>命令式代码 与 声明式代码</h2>
<p>TODO</p>
<p>DOM操作</p>
<p>Vue</p>
<h2 id="面向对象编程-与-函数式编程"><a class="header-anchor" href="#面向对象编程-与-函数式编程"> </a>面向对象编程 与 函数式编程</h2>
<p>TODO</p>
<p>第一公民</p>
<p>例子：</p>
<p>需求：</p>
<ol>
<li>对一个数组，只保留小于100的数</li>
<li>对这个数组所有元素，都乘以2</li>
<li>对这个数组所有元素求和</li>
</ol>
<p>函数式编程：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">344</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> n<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> pre<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="JavaScript-高阶函数"><a class="header-anchor" href="#JavaScript-高阶函数"> </a>JavaScript 高阶函数</h2>
<p>TODO</p>
<ul>
<li>filter()：过滤，不改变数组</li>
<li>map()：映射，不改变数组，返回新数组</li>
<li>reduce()：累加，不改变数组，返回一个值</li>
<li>forEach()：只是简单的将数组遍历，不改变数组，返回undefined</li>
</ul>
<h2 id="写代码：reduce-实现一个-map，filter"><a class="header-anchor" href="#写代码：reduce-实现一个-map，filter"> </a>写代码：reduce 实现一个 map，filter</h2>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myMap</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">handle<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    pre<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">handle</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> pre<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">myMap</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myFilter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">handle<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">handle</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span> pre<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> pre<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">myFilter</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> n <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="写代码：手写-forEach"><a class="header-anchor" href="#写代码：手写-forEach"> </a>写代码：手写 forEach</h2>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myForEach</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">handle<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token function">handle</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">myForEach</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="写代码：快速排序"><a class="header-anchor" href="#写代码：快速排序"> </a>写代码：快速排序</h2>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">quickSort</span> <span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span>
    
    <span class="token keyword">let</span> pivotIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> pivot <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>pivotIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//基准数</span>
    
    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span><span class="token punctuation">{</span>
            left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2, 3, 4, 4, 5 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="找出数组中出现次数最多的元素"><a class="header-anchor" href="#找出数组中出现次数最多的元素"> </a>找出数组中出现次数最多的元素</h2>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">more</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> max<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//定义一个用来存储出现次数最多的元素</span>
    <span class="token keyword">let</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//定义一个用来存储最出现的次数</span>
    arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span>k</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token comment">//对该数组进行reduce遍历</span>
        p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">?</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">++</span><span class="token operator">:</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&gt;</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>
            num<span class="token operator">=</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
            max<span class="token operator">=</span>k
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> p
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>max<span class="token operator">:</span>max<span class="token punctuation">,</span>num<span class="token operator">:</span>num<span class="token punctuation">}</span><span class="token comment">//返回最多元素对象</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>思路：reduce的第二个参数是传递给函数的初始值，第一个参数是一个函数。那么此方法中第一次将{}传递给了p参数，k参数为当前遍历的对象相当于Foreach中的item参数</p>
<h2 id="跨域"><a class="header-anchor" href="#跨域"> </a>跨域</h2>
<blockquote>
<p><strong>什么是同源策略？</strong></p>
<p><strong>同源策略</strong>是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。</p>
<p>所谓同源是指**"协议+域名+端口"三者相同**，即便两个不同的域名指向同一个ip地址，也非同源。</p>
<p>同源策略限制以下几种行为：</p>
<ul>
<li>Cookie、LocalStorage 和 IndexDB 无法读取</li>
<li>DOM和JS对象无法获得</li>
<li>AJAX 请求不能发送</li>
</ul>
</blockquote>
<p><img src="https://i.loli.net/2021/10/13/WKhkfN4ogHCAz9D.png" alt=""></p>
<h3 id="9种跨域解决方案"><a class="header-anchor" href="#9种跨域解决方案"> </a>9种跨域解决方案</h3>
<ul>
<li>
<p><strong>JSONP跨域</strong>：JSONP 的原理就是利用<code>&lt;script&gt;</code>标签没有跨域限制，通过<code>&lt;script&gt;</code>标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解析执行，从而前端拿到callback函数返回的数据。缺点是仅支持GET请求。</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--原生实现--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    script<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">'text/javascript'</span><span class="token punctuation">;</span>

    <span class="token comment">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span>
    script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback'</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 回调执行函数</span>
    <span class="token keyword">function</span> <span class="token function">handleCallback</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//服务器返回</span>
<span class="token function">handleCallback</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"status"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token operator">:</span> <span class="token string">"admin"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//JQuery AJAX实现</span>
$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">'http://www.domain2.com:8080/login'</span><span class="token punctuation">,</span>
    type<span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>
    dataType<span class="token operator">:</span> <span class="token string">'jsonp'</span><span class="token punctuation">,</span>  <span class="token comment">// 请求方式为jsonp</span>
    jsonpCallback<span class="token operator">:</span> <span class="token string">"handleCallback"</span><span class="token punctuation">,</span>    <span class="token comment">// 自定义回调函数名</span>
    data<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>用原生 AJAX 实现；用 JQuery AJAX 实现；用 Vue axios 实现</li>
</ul>
</li>
<li>
<p><strong>跨域资源共享（CORS）</strong>：它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。</p>
<ul>
<li>
<p>浏览器将CORS跨域请求分为：简单请求 和 非简单请求。</p>
<ul>
<li>对于简单请求（HEAD/GET/POST），浏览器在头信息中，增加一个 Origin 字段，直接发出CORS请求。响应头字段中，Access-Control-Allow-Origin字段值要么是请求时Origin字段的值，要么是 <code>*</code> ，表示接受任意域名请求。</li>
<li>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为"预检"请求（preflight）。
<ul>
<li>预检请求的请求方法是 OPTIONS，表示这个请求时用来询问的。</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IE8/9需用window.XDomainRequest兼容</span>

<span class="token comment">// 前端设置是否带cookie</span>
xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">,</span> <span class="token string">'http://www.domain2.com:8080/login'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'user=admin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>
<p>前端设置：可以用原生 AJAX；可以用 JQuery AJAX</p>
</li>
<li>
<p>服务端设置：nodejs</p>
</li>
</ul>
</li>
<li>
<p><strong>nginx 代理跨域</strong>：实际上与CORS跨域原理一样，通过配置文件设置请求响应头 Access-Control-Allow-Origin等字段</p>
<ul>
<li>Nginx（engine x）是一个高性能的HTTP和反向代理web服务器</li>
</ul>
</li>
<li>
<p><strong>nodejs中间件代理跨域</strong>：原理与nginx相同，都是通过启动一个代理服务器，实现数据的转发。</p>
</li>
<li>
<p><code>document.domain</code> + <code>&lt;iframe&gt;</code> 跨域：仅限主域相同，子域不同的跨域应用场景。原理是，两个页面都通过 js 强制设置 document.domain 为基础主域，实现了同域。</p>
</li>
<li>
<p><code>location.hash</code> + <code>&lt;iframe&gt;</code> 跨域：原理是，A想与B跨域通信，通过中间页C（与A同域）来实现。三个页面，通过域之间利用 iframe 的 location.hash 传值，相同域之间直接 js 访问来通信。</p>
</li>
<li>
<p><code>window.name</code> + <code>&lt;iframe&gt;</code> 跨域：原理是，<code>window.name</code> 值在不同的页面加载后依旧存在，而且可以支持非常长的 name 值（2MB）</p>
</li>
<li>
<p><strong>postMessage 跨域</strong>：它是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，具体见链接。</p>
</li>
<li>
<p><strong>WebSocket 协议跨域</strong>：WebSocket protocol 是HTML5的一种新协议，它实现了浏览器和服务器的全双工通信（双向同时通信），同时允许跨域通讯，是 server push 技术的一种很好体现。</p>
</li>
</ul>
<p><a href="https://www.imooc.com/article/291931"><strong>9种常见的前端跨域解决方案（详解）</strong></a></p>
<h3 id="项目中是如何跨域的"><a class="header-anchor" href="#项目中是如何跨域的"> </a>项目中是如何跨域的</h3>
<p>知乎懂你大数据分析平台：在Spring Boot中，通过全局配置一次性解决跨域问题，全局配置只需要在配置类中重写addCorsMappings方法即可</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span> <span class="token comment">//表示本应用的所有方法都会去处理跨域请求</span>
                <span class="token punctuation">.</span><span class="token function">allowedOriginPatterns</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"POST"</span><span class="token punctuation">,</span><span class="token string">"PUT"</span><span class="token punctuation">,</span><span class="token string">"DELETE"</span><span class="token punctuation">,</span><span class="token string">"OPTIONS"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>更常规的方法是，使用CORS可以在前端代码不做任何修改的情况下，实现跨域：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"http://localhost:8081"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"http://localhost:8081"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">"post hello"</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="AJAX异步调用和异步刷新的过程"><a class="header-anchor" href="#AJAX异步调用和异步刷新的过程"> </a>AJAX异步调用和异步刷新的过程</h2>
<ol>
<li>创建XMLHttpRequest对象,也就是创建一个异步调用对象</li>
<li>创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息</li>
<li>设置响应HTTP请求状态变化的函数</li>
<li>发送HTTP请求</li>
<li>获取异步调用返回的数据</li>
<li>使用JavaScript和DOM实现局部刷新</li>
</ol>
<h2 id="图片懒加载"><a class="header-anchor" href="#图片懒加载"> </a>图片懒加载</h2>
<p>有时候一个网页会包含很多的图片，例如淘宝京东这些购物网站，商品图片多只之又多，页面图片多，加载的图片就多。服务器压力就会很大。不仅影响渲染速度还会浪费带宽。比如一个1M大小的图片，并发情况下，达到1000并发，即同时有1000个人访问，就会产生1个G的带宽。</p>
<p>为了解决以上问题，提高用户体验，就出现了懒加载方式来减轻服务器的压力，<strong>优先加载可视区域的内容，其他部分等进入了可视区域再加载，从而提高性能。</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20190524171929234.gif" alt="图片懒加载"></p>
<p><img src="https://pic1.zhimg.com/80/v2-af1ab0c5f34e468e8647135c1f9f51e4_720w.jpg" alt=""></p>
<p>如果：offsetTop-scroolTop&lt;clientHeight，则图片进入了可视区内，则被请求。</p>
<h2 id="前端路由"><a class="header-anchor" href="#前端路由"> </a>前端路由</h2>
<h3 id="后端路由阶段"><a class="header-anchor" href="#后端路由阶段"> </a>后端路由阶段</h3>
<img src="https://i.loli.net/2021/07/27/8nEO2XvNHjzWqAr.png" alt="后端路由" style="zoom: 50%;">
<p>早期的网站开发中，整个HTML页面是由服务器渲染的：服务器直接生成渲染好的HTML页面，返回给客户端进行展示。</p>
<p>当有多个页面时，每个页面具有相应的URL。客户端将URL发送给服务器，服务器通过正则对该URL进行匹配，交给Controller进行处理，最终生成HTML或者数据，返回给客户端。</p>
<p>由服务器渲染好整个页面，然后返回给客户端的这种方式叫做<strong>后端渲染</strong>。</p>
<p>后端渲染：JSP（Java Server Page）技术，HTML+CSS+Java</p>
<p>这种情况下渲染好的页面，不需要单独加在任何JS或CSS，可以直接交给浏览器展示，同时也有利于SEO的优化。</p>
<p><strong>缺点：</strong></p>
<ul>
<li>整个页面的模块需要由后端人员编写和维护，或前端人员需要通过PHP和Java等语言编写页面代码</li>
<li>HTML代码和数据以及对应的逻辑会混在一起，给编写和维护带来麻烦</li>
</ul>
<h3 id="前后端分离阶段"><a class="header-anchor" href="#前后端分离阶段"> </a>前后端分离阶段</h3>
<img src="https://i.loli.net/2021/07/27/OhHroI9Qq7bedEk.png" alt="前后端分离" style="zoom:50%;">
<p>随着Ajax的出现，有了前后端分离的开发模式。</p>
<p>后端只提供API来返回数据，前端通过Ajax获取数据，并通过JS将数据渲染到页面中。</p>
<p>这样就解决了后端渲染的问题，使前后端责任清晰：后端专注于数据，前端专注于交互和可视化。并且当移动端出现后，后端不需要做任何改变，依然可以使用之前的API。</p>
<h3 id="单页面富应用（SPA）阶段"><a class="header-anchor" href="#单页面富应用（SPA）阶段"> </a>单页面富应用（SPA）阶段</h3>
<p><img src="https://i.loli.net/2021/07/27/f4ipySWDm7E12CJ.png" alt="SPA"></p>
<p>SPA（single page web application，单页面富应用）最主要的特点是，<strong>在前后端分离的基础上加了一层前端路由</strong>，也就是前端来维护一套路由规则。</p>
<p>前端路由的核心就是，<strong>改变URL页面是不会刷新的</strong>。</p>
<h1 id="计算机网络"><a class="header-anchor" href="#计算机网络"> </a>计算机网络</h1>
<h2 id="HTTP报文"><a class="header-anchor" href="#HTTP报文"> </a>HTTP报文</h2>
<h3 id="HTTP请求报文"><a class="header-anchor" href="#HTTP请求报文"> </a>HTTP请求报文</h3>
<ul>
<li><strong>请求行</strong></li>
<li><strong>请求头部</strong></li>
<li><strong>空行</strong></li>
<li><strong>请求数据</strong></li>
</ul>
<p><img src="https://pic1.zhimg.com/80/v2-d77f5b72a815b5f42cce15d0388bfca0_720w.jpg" alt="HTTP请求报文结构"></p>
<h3 id="HTTP响应报文"><a class="header-anchor" href="#HTTP响应报文"> </a>HTTP响应报文</h3>
<ul>
<li><strong>状态行</strong></li>
<li><strong>响应头部</strong></li>
<li><strong>空行</strong></li>
<li><strong>响应包体</strong></li>
</ul>
<img src="https://pic2.zhimg.com/80/v2-f6d91d3c666d70d9d730873bb07f66a9_720w.jpg" alt="HTTP响应报文" style="zoom: 80%;">
<h2 id="从输入URL到页面成功展示到浏览器的过程？"><a class="header-anchor" href="#从输入URL到页面成功展示到浏览器的过程？"> </a>从输入URL到页面成功展示到浏览器的过程？</h2>
<ol>
<li>从浏览器 **接收到url **到 <strong>开启网络请求线程</strong>（这一部分涉及浏览器的机制以及进程与线程之间的关系）</li>
<li>从 **开启网络线程 **到 <strong>发出一个完整的http请求</strong>（这一部分涉及到dns查询，tcp/ip请求，五层因特网协议栈等知识）</li>
<li>从 <strong>服务器接收到请求</strong> 到 <strong>对应后台接收到请求</strong>（这一部分可能涉及到负载均衡，安全拦截以及后台内部的处理等等）</li>
<li><strong>后台和前台的http交互</strong>（这一部分包括http头部、响应码、报文结构、cookie,cookie优化，以及编码解码，如gzip压缩等）
<ul>
<li>单独拎出来的 <strong>缓存问题</strong>，http的缓存（这部分包括http缓存头部，etag，catch-control等）</li>
</ul>
</li>
<li>浏览器接收到<strong>http数据包</strong>后的<strong>解析流程</strong>（这部分包括dom树、css规则树、合并成render树，然后layout、painting渲染、复合图层合成、GPU绘制、外链资源处理、loaded和domcontentloaded等）</li>
<li><strong>CSS的可视化格式模型</strong>（元素的渲染规则，如css三大模型，BFC，IFC等概念）</li>
<li><strong>JS引擎解析过程</strong>（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）</li>
<li>其它（可以拓展不同的知识模块，如跨域，web安全，hybrid模式等等内容）</li>
</ol>
<h3 id="1-网络通信"><a class="header-anchor" href="#1-网络通信"> </a>1. 网络通信</h3>
<ol>
<li>
<p><strong>在浏览器中输入url</strong></p>
</li>
<li>
<p><strong>应用层DNS解析域名</strong></p>
<p>客户端先检查本地是否有对应的IP地址，若找到则返回响应的IP地址。若没找到则请求上级DNS服务器，直至找到或到根节点。</p>
</li>
<li>
<p><strong>应用层客户端发送HTTP请求</strong></p>
<p>HTTP请求包括请求报头和请求主体两个部分，其中请求报头包含了至关重要的信息，包括请求的方法（GET / POST）、目标url、遵循的协议（http / https / ftp…），返回的信息是否需要缓存，以及客户端是否发送cookie等。</p>
</li>
<li>
<p><strong>传输层TCP传输报文</strong></p>
<p>位于传输层的TCP协议为传输报文提供可靠的字节流服务。它为了方便传输，将大块的数据分割成以报文段为单位的数据包进行管理，并为它们编号，方便服务器接收时能准确地还原报文信息。TCP协议通过“三次握手”等方法保证传输的安全可靠。</p>
</li>
<li>
<p><strong>网络层IP协议查询MAC地址</strong></p>
<p>IP协议的作用是把TCP分割好的各种数据包传送给接收方。而要保证确实能传到接收方还需要接收方的MAC地址，也就是物理地址。IP地址和MAC地址是一一对应的关系，一个网络设备的IP地址可以更换，但是MAC地址一般是固定不变的。<strong>ARP协议可以将IP地址解析成对应的MAC地址</strong>。当通信的双方不在同一个局域网时，需要多次中转才能到达最终的目标，在中转的过程中需要通过下一个中转站的MAC地址来搜索下一个中转目标。</p>
</li>
<li>
<p><strong>数据到达数据链路层</strong></p>
<p>在找到对方的MAC地址后，就将数据发送到数据链路层传输。这时，客户端发送请求的阶段结束。</p>
</li>
<li>
<p><strong>服务器接收数据</strong></p>
<p>接收端的服务器在链路层接收到数据包，再层层向上直到应用层。这过程中包括在运输层通过TCP协议讲分段的数据包重新组成原来的HTTP请求报文。</p>
</li>
<li>
<p><strong>服务器响应请求</strong></p>
<p>服务接收到客户端发送的HTTP请求后，查找客户端请求的资源，并返回响应报文。</p>
</li>
<li>
<p><strong>服务器返回相应文件</strong></p>
<p>请求成功后，服务器会返回相应的HTML文件。接下来就到了页面的渲染阶段了。</p>
</li>
</ol>
<h3 id="2-页面渲染"><a class="header-anchor" href="#2-页面渲染"> </a>2. 页面渲染</h3>
<p>现代浏览器渲染页面的过程是这样的：解析HTML以</p>
<p><strong>构建DOM树 –&gt; 构建渲染树 –&gt; 布局渲染树 –&gt; 绘制渲染树</strong>。</p>
<p><strong>DOM树</strong>是由HTML文件中的标签排列组成；<strong>渲染树</strong>是在DOM树中加入CSS或HTML中的style样式而形成，渲染树只包含需要显示在页面中的DOM元素，像<code>&lt;head&gt;</code>元素或display属性值为none的元素都不在渲染树中。</p>
<p>在浏览器还没接收到完整的HTML文件时，它就开始渲染页面了，在遇到外部链入的脚本标签或样式标签或图片时，会再次发送HTTP请求重复上述的步骤。在收到CSS文件后会对已经渲染的页面重新渲染，加入它们应有的样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。</p>
<h2 id="发出完整的HTTP请求"><a class="header-anchor" href="#发出完整的HTTP请求"> </a>发出完整的HTTP请求</h2>
<h3 id="DNS查询得到IP"><a class="header-anchor" href="#DNS查询得到IP"> </a>DNS查询得到IP</h3>
<p>如果输入的是域名，需要进行DNS解析成IP，大致流程：</p>
<ul>
<li>如果浏览器有缓存，直接使用浏览器缓存，否则使用本机缓存，再没有的话就是用host。</li>
<li>如果本地没有，就向dns域名服务器查询（当然，中间可能还会经过路由，也有缓存等），查询到对应的IP。</li>
</ul>
<h4 id="DNS解析流程"><a class="header-anchor" href="#DNS解析流程"> </a>DNS解析流程</h4>
<ol>
<li><strong>浏览器缓存</strong></li>
</ol>
<p>当用户通过浏览器访问某域名时，浏览器首先会在自己的缓存中查找是否有该域名对应的IP地址（若曾经访问过该域名且没有清空缓存便存在）；</p>
<ol start="2">
<li><strong>系统缓存</strong></li>
</ol>
<p>当浏览器缓存中无域名对应IP则会自动检查用户计算机系统Hosts文件DNS缓存是否有该域名对应IP；</p>
<ol start="3">
<li><strong>路由器缓存</strong></li>
</ol>
<p>当浏览器及系统缓存中均无域名对应IP则进入路由器缓存中检查，以上三步均为客服端的DNS缓存；</p>
<ol start="4">
<li><strong>ISP（互联网服务提供商）DNS缓存</strong></li>
</ol>
<p>当在用户客服端查找不到域名对应IP地址，则将进入ISP DNS缓存中进行查询。比如你用的是电信的网络，则会进入电信的DNS缓存服务器中进行查找；</p>
<ol start="5">
<li><strong>根域名服务器</strong></li>
</ol>
<p>当以上均未完成，则进入根服务器进行查询。全球仅有13台根域名服务器，1个主根域名服务器，其余12为辅根域名服务器。根域名收到请求后会查看区域文件记录，若无则将其管辖范围内顶级域名（<a href="http://xn--bvs.com">如.com</a>）服务器IP告诉本地DNS服务器；</p>
<ol start="6">
<li><strong>顶级域名服务器</strong></li>
</ol>
<p>顶级域名服务器收到请求后查看区域文件记录，若无则将其管辖范围内主域名服务器的IP地址告诉本地DNS服务器；</p>
<ol start="7">
<li><strong>权威域名服务器</strong></li>
</ol>
<p>主域名服务器接受到请求后查询自己的缓存，如果没有则进入下一级域名服务器进行查找，并重复该步骤直至找到正确纪录；</p>
<ol start="8">
<li><strong>保存结果至缓存</strong></li>
</ol>
<p>本地域名服务器把返回的结果保存到缓存，以备下一次使用，同时将该结果反馈给客户端，客户端通过这个IP地址与web服务器建立链接。</p>
<h3 id="TCP-IP"><a class="header-anchor" href="#TCP-IP"> </a>TCP/IP</h3>
<p>互联网的协议就是TCP/IP。注意：TCP/IP不是一个协议，而是一个协议族的统称。里面包括IP协议、IMCP协议、TCP协议等等等。</p>
<p>浏览器发出的http请求的本质上就是TCP/IP请求。TCP将http长报文划分为短报文，通过<code>三次握手与服务端建立连接</code>，进行可靠传输。建立连接成功后，接下来就正式传输数据。然后，<code>待到断开连接时，需要进行四次挥手</code>（因为是全双工的，所以需要四次挥手）。</p>
<p><img src="https://img-blog.csdnimg.cn/20190404200435539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDg1MTE4OA==,size_16,color_FFFFFF,t_70" alt="三次握手"></p>
<p><img src="https://img-blog.csdnimg.cn/20190404200456345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDg1MTE4OA==,size_16,color_FFFFFF,t_70" alt="四次挥手"></p>
<p>SYN(synchronous建立联机) ACK(acknowledgement 确认)</p>
<p>FIN(finish结束) Sequence number(顺序号码)</p>
<p><strong>GET和POST的区别</strong></p>
<ul>
<li>POST更安全（不会作为url的一部分，不会被缓存、保存在服务器日志、以及浏览器浏览记录和书签中）</li>
<li>POST发送的数据更大（GET有url长度限制）</li>
<li>POST能发送更多的数据类型和编码方式（GET只能发送ASCII字符进行url编码）</li>
<li>GET参数通过URL传递，POST放在Request body中</li>
<li>GET在浏览器回退时是无害的，而POST会再次提交请求</li>
<li>POST用于修改和写入数据，GET一般用于搜索排序和筛选之类的操作</li>
<li>POST比GET慢</li>
</ul>
<p><strong>GET和POST的相同点</strong></p>
<p>GET和POST是HTTP协议中的两种发送请求的方法。HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP连接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。</p>
<h2 id="计算机网络的三大体系结构"><a class="header-anchor" href="#计算机网络的三大体系结构"> </a>计算机网络的三大体系结构</h2>
<p>计算机网络体系可以大致分为一下三种，<strong>OSI七层模型</strong>、<strong>TCP/IP四层模型</strong>和<strong>五层模型</strong>。</p>
<ul>
<li>OSI七层模型：大而全，但是比较复杂、而且是先有了理论模型，没有实际应用。</li>
<li>TCP/IP四层模型：是由实际应用发展总结出来的，从实质上讲，TCP/IP只有最上面三层，最下面一层没有什么具体内容，TCP/IP参考模型没有真正描述这一层的实现。</li>
<li>五层模型：五层模型只出现在计算机网络教学过程中，这是对七层模型和四层模型的一个折中，既简洁又能将概念阐述清楚。</li>
</ul>
<img src="https://img-blog.csdnimg.cn/20210522130909162.png" alt="计算机网络三大体系" style="zoom:67%;">
<img src="https://i.loli.net/2021/07/20/Qp1IFjBg4vCGOR9.png" alt="网络模型及其协议" style="zoom:67%;">
<h3 id="七层网络体系结构各层的主要功能"><a class="header-anchor" href="#七层网络体系结构各层的主要功能"> </a>七层网络体系结构各层的主要功能</h3>
<ul>
<li><strong>应用层</strong>：为应用程序提供交互服务。在互联网中的应用层协议很多，如域名系统DNS，支持万维网应用的HTTP协议，支持电子邮件的SMTP协议等。</li>
<li><strong>表示层</strong>：主要负责数据格式的转换，如加密解密、转换翻译、压缩解压缩等。</li>
<li><strong>会话层</strong>：负责在网络中的两节点之间建立、维持和终止通信，如服务器验证用户登录便是由会话层完成的。</li>
<li><strong>运输层</strong>：有时也译为传输层，向主机进程提供通用的数据传输服务。该层主要有以下两种协议
<ul>
<li>TCP：提供面向连接的、可靠的数据传输服务；</li>
<li>UDP：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性。</li>
</ul>
</li>
<li><strong>网络层</strong>：选择合适的路由和交换结点，确保数据及时传送。主要包括IP协议。</li>
<li><strong>数据链路层</strong>：数据链路层通常简称为链路层。将网络层传下来的IP数据包组装成帧，并再相邻节点的链路上传送帧。</li>
<li><strong>物理层</strong>：实现相邻节点间比特流的透明传输，尽可能屏蔽传输介质和通信手段的差异。</li>
</ul>
<h2 id="TCP和UDP区别"><a class="header-anchor" href="#TCP和UDP区别"> </a>TCP和UDP区别</h2>
<table>
<thead>
<tr>
<th></th>
<th>TCP</th>
<th>UDP</th>
</tr>
</thead>
<tbody>
<tr>
<td>是否连接</td>
<td>面向连接</td>
<td>无连接</td>
</tr>
<tr>
<td>是否可靠</td>
<td>可靠传输，使用流量控制和拥塞控制</td>
<td>不可靠传输，不适用流量控制和拥塞控制</td>
</tr>
<tr>
<td>是否有序</td>
<td>有序，消息在传输过程中可能会乱序，TCP会重新排序</td>
<td>无序</td>
</tr>
<tr>
<td>传输速度</td>
<td>慢</td>
<td>快</td>
</tr>
<tr>
<td>连接对象个数</td>
<td>只能一对一通信</td>
<td>支持一对一、一对多、多对一和多对多交互通信</td>
</tr>
<tr>
<td>传输方式</td>
<td>面向字节流</td>
<td>面向报文</td>
</tr>
<tr>
<td>首部开销</td>
<td>首部最小20字节，最大60字节</td>
<td>首部开销小，仅8字节</td>
</tr>
<tr>
<td>适用场景</td>
<td>适用于要求可靠传输的应用，如文件传输</td>
<td>适用于实时应用，如IP电话、视频会议、直播</td>
</tr>
</tbody>
</table>
<h2 id="HTTPS是什么？具体流程"><a class="header-anchor" href="#HTTPS是什么？具体流程"> </a>HTTPS是什么？具体流程</h2>
<p>HTTPS是在HTTP和TCP之间建立了一个安全层，HTTP与TCP通信的时候，必须先进过一个安全层，对数据包进行加密，然后将加密后的数据包传送给TCP，相应的TCP必须将数据包解密，才能传给上面的HTTP。</p>
<ol>
<li>浏览器传输一个client_random和加密方法列表</li>
<li>服务器收到后，传给浏览器一个server_random、加密方法列表和数字证书（包含了公钥）</li>
<li>然后浏览器对数字证书进行合法验证，如果验证通过，则生成一个pre_random，然后用公钥加密传给服务器</li>
<li>服务器用client_random、server_random和pre_random，使用公钥加密生成secret，然后之后的传输使用这个secret作为秘钥来进行数据的加解密。</li>
</ol>
<h2 id="进程和线程的区别"><a class="header-anchor" href="#进程和线程的区别"> </a>进程和线程的区别</h2>
<blockquote>
<p><strong>线程是CPU调度程序执行的最小单位；进程是操作系统分配资源的最小单位。</strong></p>
</blockquote>
<p>做个简单的比喻：线程=车厢，进程=火车</p>
<ul>
<li><strong>线程在进程下行进</strong>（单纯的车厢无法运行）</li>
<li><strong>一个进程可以包含多个线程</strong>（一辆火车可以有多个车厢）</li>
<li><strong>不同进程间数据很难共享</strong>（一辆火车上的乘客很难换到另外一辆火车，比如站点换乘）</li>
<li><strong>同一进程下，不同线程间数据很易共享</strong>（A车厢换到B车厢很容易）</li>
<li><strong>进程要比线程消耗更多的计算机资源</strong>（采用多列火车相比多个车厢更耗资源）</li>
<li><strong>进程间不会相互影响，一个线程挂掉将导致整个进程挂掉</strong>（一列火车不会影响到另外一列火车，但是如果一列火车上中间的一节车厢着火了，将影响到所有车厢）</li>
<li><strong>进程可以拓展到多机，线程最多适合多核</strong>（不同火车可以开在多个轨道上，同一火车的车厢不能在行进的不同的轨道上）</li>
<li><strong>进程使用的内存地址可以上锁，即一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。</strong>－“<strong>互斥锁</strong>”（比如火车上的洗手间）
<ul>
<li><img src="https://img-blog.csdnimg.cn/20181026153449471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2lzdW5iaW4=,size_1,color_FFFFFF,t_70" alt="互斥锁"></li>
</ul>
</li>
<li><strong>进程使用的内存地址可以限定使用量。</strong>－“<strong>信号量</strong>”（比如火车上的餐厅，最多只允许多少人进入，如果满了需要在门口等，等有人出来了才能进去）</li>
</ul>
<h3 id="进程间通信"><a class="header-anchor" href="#进程间通信"> </a>进程间通信</h3>
<p><a href="https://blog.csdn.net/qq_19525389/article/details/81774622">进程间通信的五种方式</a></p>
<ul>
<li>管道</li>
<li>系统IPC
<ul>
<li>信号量</li>
<li>消息队列</li>
<li>共享内存</li>
</ul>
</li>
<li>套接字（socket）</li>
</ul>
<h2 id="并行-和-并发-的区别"><a class="header-anchor" href="#并行-和-并发-的区别"> </a>并行 和 并发 的区别</h2>
<p>你吃饭吃到一半，电话来了，你一直到吃完了以后才去接，这就说明你不支持并发也不支持并行。<br>
你吃饭吃到一半，电话来了，你停了下来接了电话，接完后继续吃饭，这说明你支持<strong>并发</strong>。<br>
你吃饭吃到一半，电话来了，你一边打电话一边吃饭，这说明你支持<strong>并行</strong>。</p>
<p><strong>并发的关键是你有处理多个任务的能力，不一定要同时。</strong><br>
<strong>并行的关键是你有同时处理多个任务的能力。</strong></p>
<p>所以我认为它们最关键的点就是：是否是『同时』。</p>
<h2 id="HTTP常用状态码及使用场景"><a class="header-anchor" href="#HTTP常用状态码及使用场景"> </a>HTTP常用状态码及使用场景</h2>
<ul>
<li>1xx：表示目前是协议的中间状态，还需要后续请求</li>
<li>2xx：表示请求成功</li>
<li>3xx：表示重定向状态，需要重新请求</li>
<li>4xx：表示请求报文错误</li>
<li>5xx：服务器端错误</li>
</ul>
<p>常用状态码：</p>
<ul>
<li>101切换请求协议，从HTTP切换到WebSocket</li>
<li>200请求成功，有响应体</li>
<li>301永久重定向：会缓存
<ul>
<li>代表访问的地址的资源被永久移除了，以后都不应该访问这个地址，搜索引擎抓取的时候也会用新的地址替换这个老的，比如域名换了。可以在返回的响应的location首部去获取到返回的地址。</li>
</ul>
</li>
<li>302临时重定向：不会缓存
<ul>
<li>表示这个资源只是暂时不能被访问了，但是之后过一段时间还是可以继续访问，一般是访问某个网站的资源需要权限时，会需要用户去登录，跳转到登录页面之后登录之后，还可以继续访问。</li>
</ul>
</li>
<li>304协商缓存命中
<ul>
<li><a href="https://www.baidu.com/link?url=daqLk-6aagGZDMLEZeHsxx7vBBikdeGLcCuw_XCmHUQSbkh9M7c9zp7m7WWjLYtn&amp;wd=&amp;eqid=f0d8900900013f290000000660bf2d5d">彻底底弄懂强缓存与协商缓存</a></li>
</ul>
</li>
<li>400请求错误</li>
<li>403服务器禁止访问</li>
<li>404资源未找到</li>
<li>500服务器端错误</li>
<li>503服务器繁忙</li>
</ul>
<h2 id="HTTP缓存"><a class="header-anchor" href="#HTTP缓存"> </a>HTTP缓存</h2>
<p>HTTP缓存又分为<strong>强缓存</strong>和<strong>协商缓存</strong>：</p>
<ul>
<li>强缓存：直接从本地副本比对读取，<strong>不去请求服务器</strong>，返回的状态码是 <strong>200</strong>。</li>
<li>协商缓存：<strong>会去服务器比对</strong>，若没改变才直接读取本地缓存，返回的状态码是 <strong>304</strong>。</li>
</ul>
<p>首先通过<code>Cache-Control</code>验证强缓存是否可用，如果强缓存可用，那么直接读取缓存；如果不可以，那么进入协商缓存阶段，发起HTTP请求，服务器通过请求头中是否带上<code>lf-Modified-Since</code>和<code>If-None-Match</code>这些条件请求字段检查资源是否更新：</p>
<ul>
<li>若资源更新，那么返回资源和200状态码</li>
<li>如果资源未更新，那么告诉浏览器直接使用缓存获取资源</li>
</ul>
<p><a href="https://www.baidu.com/link?url=daqLk-6aagGZDMLEZeHsxx7vBBikdeGLcCuw_XCmHUQSbkh9M7c9zp7m7WWjLYtn&amp;wd=&amp;eqid=f0d8900900013f290000000660bf2d5d">彻底底弄懂强缓存与协商缓存</a></p>
<h2 id="HTTP常用的请求方式"><a class="header-anchor" href="#HTTP常用的请求方式"> </a>HTTP常用的请求方式</h2>
<p>HTTP/1.1规定如下请求方法：</p>
<ul>
<li>GET：通用获取数据</li>
<li>HEAD：获取资源的元信息</li>
<li>POST：提交数据</li>
<li>PUT：修改数据</li>
<li>DELETE：删除数据</li>
<li>CONNECT：建立连接隧道，用于代理服务器</li>
<li>OPTIONS：列出可对资源实行的请求方法，常用于跨域</li>
<li>TRACE：追踪请求-响应的传输路径</li>
</ul>
<h2 id="TCP-三次握手-和-四次挥手"><a class="header-anchor" href="#TCP-三次握手-和-四次挥手"> </a>TCP 三次握手 和 四次挥手</h2>
<h3 id="三次握手"><a class="header-anchor" href="#三次握手"> </a>三次握手</h3>
<h4 id="为什么要进行三次握手"><a class="header-anchor" href="#为什么要进行三次握手"> </a>为什么要进行三次握手</h4>
<p>为了确认双方发送和接受能力。</p>
<h4 id="三次握手主要流程"><a class="header-anchor" href="#三次握手主要流程"> </a>三次握手主要流程</h4>
<ol>
<li>一开始双方处于<code>CLOSED</code>状态，然后服务端开始监听某个端口，进入<code>LISTEN</code>状态</li>
<li>客户端主动发起连接，发送 <code>SYN = 1</code>、<code>seq = x</code>，然后自己变成<code>SYN-SENT</code></li>
<li>服务端收到之后，返回 <code>SYN = 1</code>、<code>seq = y</code> 和 <code>ACK = 1</code>、<code>ack = x + 1</code>，自己变为<code>SYN-REVD</code></li>
<li>客户端再次发送 <code>ACK = 1</code>、<code>seq = x + 1</code>、<code>ACK = y + 1</code>，进入<code>ESTABLISHED</code></li>
</ol>
<p><img src="https://i.loli.net/2021/10/13/5drVxcBm2fESZFi.png" alt="三次握手图示"></p>
<h4 id="为什么不是两次？"><a class="header-anchor" href="#为什么不是两次？"> </a>为什么不是两次？</h4>
<p>主要有三个原因：</p>
<ol>
<li>
<p>防止已过期的连接请求报文突然又传送到服务器，因而产生错误和资源浪费。</p>
<p>在双方两次握手即可建立连接的情况下，假设客户端发送 A 报文段请求建立连接，由于网络原因造成 <strong>A 暂时无法到达服务器</strong>，服务器接收不到请求报文段就不会返回确认报文段。</p>
<p>客户端在长时间得不到应答的情况下重新发送请求报文段 B，这次 B 顺利到达服务器，服务器随即返回确认报文并进入 ESTABLISHED 状态，客户端在收到 确认报文后也进入 ESTABLISHED 状态，双方建立连接并传输数据，之后正常断开连接。</p>
<p>此时姗姗来迟的 A 报文段才到达服务器，服务器随即返回确认报文并进入 ESTABLISHED 状态，但是已经进入 CLOSED 状态的客户端无法再接受确认报文段，更无法进入 ESTABLISHED 状态，这将导致服务器长时间单方面等待，造成资源浪费。</p>
</li>
<li>
<p>三次握手才能让双方均确认自己和对方的发送和接收能力都正常。</p>
<p>第一次握手：客户端只是发送处请求报文段，什么都无法确认，而服务器可以确认自己的接收能力和对方的发送能力正常；</p>
<p>第二次握手：客户端可以确认自己发送能力和接收能力正常，对方发送能力和接收能力正常；</p>
<p>第三次握手：服务器可以确认自己发送能力和接收能力正常，对方发送能力和接收能力正常；</p>
<p>可见三次握手才能让双方都确认自己和对方的发送和接收能力全部正常，这样就可以愉快地进行通信了。</p>
<p><strong>总结：两次握手没有办法让服务器知道自己发送能力正常！</strong></p>
</li>
<li>
<p>告知对方自己的初始序号值，并确认收到对方的初始序号值。</p>
<p>TCP 实现了可靠的数据传输，原因之一就是 TCP 报文段中维护了序号字段和确认序号字段，通过这两个字段双方都可以知道在自己发出的数据中，哪些是已经被对方确认接收的。这两个字段的值会在初始序号值得基础递增，<strong>如果是两次握手，只有发起方的初始序号可以得到确认，而另一方的初始序号则得不到确认。</strong></p>
</li>
</ol>
<h3 id="什么是-SYN洪泛攻击？如何防范？"><a class="header-anchor" href="#什么是-SYN洪泛攻击？如何防范？"> </a>什么是 SYN洪泛攻击？如何防范？</h3>
<p><strong>SYN洪泛攻击属于 DOS 攻击的一种，它利用 TCP 协议缺陷，通过发送大量的半连接请求，耗费 CPU 和内存资源。</strong></p>
<p>原理：</p>
<ul>
<li>在三次握手过程中，服务器发送 <code>[SYN/ACK]</code> 包（第二个包）之后、收到客户端的 <code>[ACK]</code> 包（第三个包）之前的 TCP 连接称为半连接（half-open connect），此时服务器处于 <code>SYN_RECV</code>（等待客户端响应）状态。如果接收到客户端的 <code>[ACK]</code>，则 TCP 连接成功，如果未接受到，则会<strong>不断重发请求</strong>直至成功。</li>
<li>SYN 攻击的攻击者在短时间内<strong>伪造大量不存在的 IP 地址</strong>，向服务器不断地发送 <code>[SYN]</code> 包，服务器回复 <code>[SYN/ACK]</code> 包，并等待客户的确认。由于源地址是不存在的，服务器需要不断的重发直至超时。</li>
<li>这些伪造的 <code>[SYN]</code> 包将长时间占用未连接队列，影响了正常的 SYN，导致目标系统运行缓慢、网络堵塞甚至系统瘫痪。</li>
</ul>
<p>**检测：**当在服务器上看到大量的半连接状态时，特别是源 IP 地址是随机的，基本上可以断定这是一次 SYN 攻击。</p>
<p><strong>防范：</strong></p>
<ul>
<li>通过防火墙、路由器等过滤网关防护。</li>
<li>通过加固 TCP/IP 协议栈防范，如增加最大半连接数，缩短超时时间。</li>
<li>SYN cookies技术。SYN Cookies 是对 TCP 服务器端的三次握手做一些修改，专门用来防范 SYN 洪泛攻击的一种手段。</li>
</ul>
<h4 id="三次握手连接阶段，最后一次ACK包丢失，会发生什么？"><a class="header-anchor" href="#三次握手连接阶段，最后一次ACK包丢失，会发生什么？"> </a>三次握手连接阶段，最后一次ACK包丢失，会发生什么？</h4>
<p><strong>服务端：</strong></p>
<ul>
<li>第三次的ACK在网络中丢失，那么服务端该TCP连接的状态为SYN_RECV,并且会根据 TCP的超时重传机制，会等待3秒、6秒、12秒后重新发送SYN+ACK包，以便客户端重新发送ACK包。</li>
<li>如果重发指定次数之后，仍然未收到 客户端的ACK应答，那么一段时间后，服务端自动关闭这个连接。</li>
</ul>
<p><strong>客户端：</strong></p>
<p>客户端认为这个连接已经建立，如果客户端向服务端发送数据，服务端将以RST包（Reset，标示复位，用于异常的关闭连接）响应。此时，客户端知道第三次握手失败。</p>
<h3 id="四次挥手"><a class="header-anchor" href="#四次挥手"> </a>四次挥手</h3>
<h4 id="四次挥手主要流程"><a class="header-anchor" href="#四次挥手主要流程"> </a>四次挥手主要流程</h4>
<ol>
<li>一开始都处于<code>ESTABLISH</code>状态，然后客户端发送 <code>FIN = 1</code>、<code>seq = u</code>，状态变为<code>FIN-WAIT-1</code></li>
<li>服务端收到后，发送 <code>ACK = 1</code>、<code>seq = v</code>、<code>ack = u + 1</code>，然后进入CLOSE-WAIT状态</li>
<li>客户端收到之后，进入<code>FIN-WAIT-2</code>状态</li>
<li>过了一会儿，等数据处理完，服务端再次发送 <code>FIN = 1</code>、<code>ACK = 1</code>、<code>seq =w</code>、<code>ack = u + 1</code>，进入<code>LAST-ACK</code>阶段</li>
<li>客户端收到FIN之后，发送 <code>ACK = 1</code>、<code>seq = u + 1</code>、<code>ack = w + 1</code>，进入<code>TIME-WAIT</code>（等待 2MSL），如果服务端没有重发请求，就表明ACK成功到达，客户端变为CLOSED状态，否则重发 ACK</li>
<li>服务端收到后，进入<code>CLOSED</code>状态</li>
</ol>
<p><img src="https://i.loli.net/2021/10/13/vtj8lnzXkZUsrQu.png" alt="四次握手图示"></p>
<h4 id="为什么连接的时候是三次握手，关闭的时候却是四次握手？"><a class="header-anchor" href="#为什么连接的时候是三次握手，关闭的时候却是四次握手？"> </a>为什么连接的时候是三次握手，关闭的时候却是四次握手？</h4>
<p>服务器在收到客户端的 FIN 报文段后，可能还有一些数据要传输，所以不能马上关闭连接，但是会做出应答，返回 ACK 报文段。</p>
<p>接下来可能会继续发送数据，在数据发送完后，服务器会向客户单发送 FIN 报文，表示数据已经发送完毕，请求关闭连接。服务器的<strong>ACK和FIN一般都会分开发送</strong>，从而导致多了一次，因此一共需要四次挥手。</p>
<h4 id="为什么要等待-2MSL？"><a class="header-anchor" href="#为什么要等待-2MSL？"> </a>为什么要等待 2MSL？</h4>
<blockquote>
<p>MSL：Maximum Segement Lifetime</p>
</blockquote>
<p>因为如果不等待的话，如果服务端还有很多数据包要给客户端发，但此时客户端端口被新应用占据，那么就会接收到无用的数据包，造成数据包混乱</p>
<ul>
<li>1个MSL保证四次挥手中主动关闭方最后的ACK报文能最终到达对端</li>
<li>1个MSL保证，如果对端没有收到ACK，那么进行重传的FlIN报文能够到达</li>
</ul>
<p><em>另外的解答：</em></p>
<p>主要有两个原因：</p>
<ol>
<li>
<p>确保 ACK 报文能够到达服务端，从而使服务端正常关闭连接。</p>
<p>第四次挥手时，客户端第四次挥手的 ACK 报文不一定会到达服务端。服务端会超时重传 FIN/ACK 报文，此时如果客户端已经断开了连接，那么就无法响应服务端的二次请求，这样服务端迟迟收不到 FIN/ACK 报文的确认，就无法正常断开连接。</p>
<p>MSL 是报文段在网络上存活的最长时间。客户端等待 2MSL 时间，即「客户端 ACK 报文 1MSL 超时 + 服务端 FIN 报文 1MSL 传输」，就能够收到服务端重传的 FIN/ACK 报文，然后客户端重传一次 ACK 报文，并重新启动 2MSL 计时器。如此保证服务端能够正常关闭。</p>
<p>如果服务端重发的 FIN 没有成功地在 2MSL 时间里传给客户端，服务端则会继续超时重试直到断开连接。</p>
</li>
<li>
<p>防止已失效的连接请求报文段出现在之后的连接中。</p>
</li>
</ol>
<p>TCP 要求在 2MSL 内不使用相同的序列号。客户端在发送完最后一个 ACK 报文段后，再经过时间 2MSL，就可以保证本连接持续的时间内产生的所有报文段都从网络中消失。这样就可以使下一个连接中不会出现这种旧的连接请求报文段。或者即使收到这些过时的报文，也可以不处理它。</p>
<h2 id="TCP协议如何保证可靠性？"><a class="header-anchor" href="#TCP协议如何保证可靠性？"> </a>TCP协议如何保证可靠性？</h2>
<p>TCP主要提供了检验和、序列号/确认应答、超时重传、滑动窗口、拥塞控制和 流量控制等方法实现了可靠性传输。</p>
<ul>
<li>
<p><strong>检验和</strong>：通过检验和的方式，接收端可以检测出来数据是否有差错和异常，假如有差错就会直接丢弃TCP段，重新发送。</p>
</li>
<li>
<p><strong>序列号/确认应答</strong>：</p>
<p>序列号的作用不仅仅是应答的作用，有了序列号能够将接收到的数据根据序列号排序，并且去掉重复序列号的数据。</p>
<p>TCP传输的过程中，每次接收方收到数据后，都会对传输方进行确认应答。也就是发送ACK报文，这个ACK报文当中带有对应的确认序列号，告诉发送方，接收到了哪些数据，下一次的数据从哪里发。</p>
</li>
<li>
<p><strong>滑动窗口</strong>：滑动窗口既提高了报文传输的效率，也避免了发送方发送过多的数据而导致接收方无法正常处理的异常。</p>
</li>
<li>
<p><strong>超时重传</strong>：超时重传是指发送出去的数据包到接收到确认包之间的时间，如果超过了这个时间会被认为是丢包了，需要重传。最大超时时间是动态计算的。</p>
</li>
<li>
<p><strong>拥塞控制</strong>：在数据传输过程中，可能由于网络状态的问题，造成网络拥堵，此时引入拥塞控制机制，在保证TCP可靠性的同时，提高性能。</p>
</li>
<li>
<p><strong>流量控制</strong>：如果主机A 一直向主机B发送数据，不考虑主机B的接受能力，则可能导致主机B的接受缓冲区满了而无法再接受数据，从而会导致大量的数据丢包，引发重传机制。而在重传的过程中，若主机B的接收缓冲区情况仍未好转，则会将大量的时间浪费在重传数据上，降低传送数据的效率。所以引入流量控制机制，主机B通过告诉主机A自己接收缓冲区的大小，来使主机A控制发送的数据量。流量控制与TCP协议报头中的窗口大小有关。</p>
</li>
</ul>
<h2 id="详细讲一下拥塞控制？"><a class="header-anchor" href="#详细讲一下拥塞控制？"> </a>详细讲一下拥塞控制？</h2>
<p>TCP 一共使用了四种算法来实现拥塞控制：</p>
<ul>
<li>慢开始 (slow-start)；</li>
<li>拥塞避免 (congestion avoidance)；</li>
<li>快速重传 (fast retransmit)；</li>
<li>快速恢复 (fast recovery)。</li>
</ul>
<p>发送方维持一个叫做拥塞窗口cwnd（congestion window）的状态变量。当cwndssthresh时，改用拥塞避免算法。</p>
<p>**慢开始：**不要一开始就发送大量的数据，由小到大逐渐增加拥塞窗口的大小。</p>
<p>**拥塞避免：**拥塞避免算法让拥塞窗口缓慢增长，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1而不是加倍。这样拥塞窗口按线性规律缓慢增长。</p>
<img src="https://img-blog.csdnimg.cn/20200429112750357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMjE0OTUz,size_16,color_FFFFFF,t_70" alt="慢启动和拥塞避免算法" style="zoom:50%;">
<p>**快速重传：**我们可以剔除一些不必要的拥塞报文，提高网络吞吐量。比如接收方在收到一个失序的报文段后就立即发出重复确认，而不要等到自己发送数据时捎带确认。快重传规定：<strong>发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。</strong></p>
<p><img src="https://i.loli.net/2021/10/13/IXkwAp1M5Q3TuFc.png" alt="快速重传"></p>
<p>**快速恢复：**主要是配合快速重传。当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半（为了预防网络发生拥塞），但接下来并不执行慢开始算法，因为如果网络出现拥塞的话就不会收到好几个重复的确认，收到三个重复确认说明网络状况还可以。</p>
<img src="https://mmbiz.qpic.cn/mmbiz_png/EyPNic5dZCg8JDrl1hhM8jUQEp18q0ibDjtD9rOMAIB3bUxp1k9z2dmX7hy6vjomOwaRNLrnW4ULrZhRQiaZcY8tA/640" alt="快速恢复" style="zoom: 80%;">
<h2 id="详细讲一下TCP的滑动窗口？"><a class="header-anchor" href="#详细讲一下TCP的滑动窗口？"> </a>详细讲一下TCP的滑动窗口？</h2>
<p>在进行数据传输时，如果传输的数据比较大，就需要拆分为多个数据包进行发送。TCP 协议需要对数据进行确认后，才可以发送下一个数据包。这样一来，就会在等待确认应答包环节浪费时间。</p>
<p>为了避免这种情况，TCP引入了窗口概念。窗口大小指的是不需要等待确认应答包而可以继续发送数据包的最大值。</p>
<img src="https://mmbiz.qpic.cn/mmbiz_png/EyPNic5dZCg8JDrl1hhM8jUQEp18q0ibDjic1FZqHQRVkdgx8EsoqZBXdEmpDjoB4AacTRYMmzf3ribhFxmWK16pSg/640" alt="图片" style="zoom:67%;">
<p>从上面的图可以看到滑动窗口左边的是已发送并且被确认的分组，滑动窗口右边是还没有轮到的分组。</p>
<p>滑动窗口里面也分为两块，一块是已经发送但是未被确认的分组，另一块是窗口内等待发送的分组。随着已发送的分组不断被确认，窗口内等待发送的分组也会不断被发送。整个窗口就会往右移动，让还没轮到的分组进入窗口内。</p>
<p>可以看到滑动窗口起到了一个限流的作用，也就是说当前滑动窗口的大小决定了当前 TCP 发送包的速率，而滑动窗口的大小取决于拥塞控制窗口和流量控制窗口的两者间的最小值。</p>
<h2 id="拆包和粘包"><a class="header-anchor" href="#拆包和粘包"> </a>拆包和粘包</h2>
<p>TODO</p>
<h2 id="WebSocket-和-Ajax-的区别"><a class="header-anchor" href="#WebSocket-和-Ajax-的区别"> </a>WebSocket 和 Ajax 的区别</h2>
<p>Ajax即异步JavaScript和XML，是一种创建交互式网页的应用的网页开发技术</p>
<p>Websocket是HTML5的一种新协议，实现了浏览器和服务器的实时通信</p>
<p><strong>生命周期不同：</strong></p>
<ul>
<li>websocket是长连接，会话一直保持</li>
<li>ajax发送接收之后就会断开</li>
</ul>
<p><strong>适用范围不同：</strong></p>
<ul>
<li>
<p>websocket 用于前后端实时交互数据</p>
</li>
<li>
<p>ajax非实时</p>
</li>
</ul>
<p><strong>发起人不同：</strong></p>
<ul>
<li>WebSocket 服务器端和客户端相互推送</li>
<li>ajax客户端发起</li>
</ul>
<h2 id="了解-WebSocket-吗？"><a class="header-anchor" href="#了解-WebSocket-吗？"> </a>了解 WebSocket 吗？</h2>
<p>WebSocket是长轮询（持久连接）。</p>
<p>短轮询：比如在一个电商场景，商品的库存可能会变化，所以需要及时反映给用户，所以客户端会不停的发请求，然后服务器端会不停的去查变化，不管变不变，都返回，这个是短轮询。</p>
<p>长轮询：表现为如果没有变，就不返回，而是等待变或者超时（一般是十几秒）才返回，如果没有返回，客户端也不需要一直发请求，所以减少了双方的压力。</p>
<h2 id="HTTP如何实现长连接？在什么时候会超时？"><a class="header-anchor" href="#HTTP如何实现长连接？在什么时候会超时？"> </a>HTTP如何实现长连接？在什么时候会超时？</h2>
<p>通过在头部（请求和响应头）设置<code>Connection: keep-alive</code>，来实现长连接。</p>
<p>HTTP/1.0协议支持，但默认关闭；从HTTP/1.1协议以后，连接默认都是长连接。</p>
<p>实际上HTTP没有长短连接，只有TCP有。TCP长连接可以复用一个TCP连接来发起多次HTTP请求，这样可以减少资源消耗，比如一次请求HTML，可能还需要请求后续的JS/CSS/图片等。</p>
<p><img src="https://i.loli.net/2021/10/13/4wTojYJOG5Ztniv.png" alt="长连接超时"></p>
<p>上图中的Keep-Alive: timeout=20，表示这个TCP通道可以保持20秒。另外还可能有max=XXX，表示这个长连接最多接收XXX次请求就断开。对于客户端来说，如果服务器没有告诉客户端超时时间也没关系，服务端可能主动发起四次握手断开TCP连接，客户端能够知道该TCP连接已经无效；另外TCP还有心跳包来检测当前连接是否还活着，方法很多，避免浪费资源。</p>
<h2 id="Cookie-和-Session"><a class="header-anchor" href="#Cookie-和-Session"> </a>Cookie 和 Session</h2>
<ol>
<li>
<p><strong>cookie数据存放在客户的浏览器上，session数据放在服务器上.</strong></p>
<p>简单的说，当你登录一个网站的时候，如果web服务器端使用的是session，那么所有的数据都保存在服务器上面，客户端每次请求服务器的时候会发送当前会话的session_id，服务器根据当前session_id判断相应的用户数据标志，以确定用户是否登录，或具有某种权限。</p>
<p>由于数据是存储在服务器上面，所以你不能伪造，但是如果你能够获取某个登录用户的session_id，用特殊的浏览器伪造该用户的请求也是能够成功的。</p>
<p>session_id是服务器和客户端链接时候随机分配的，一般来说是不会有重复，但如果有大量的并发请求，也不是没有重复的可能性。</p>
<p>Session是由应用服务器维持的一个服务器端的存储空间，用户在连接服务器时，会由服务器生成一个唯一的SessionID，用该SessionID 为标识符来存取服务器端的Session存储空间。而SessionID这一数据则是保存到客户端，用Cookie保存的，用户提交页面时，会将这一SessionID提交到服务器端，来存取Session数据。这一过程，是不用开发人员干预的。所以一旦客户端禁用Cookie，那么Session也会失效。</p>
<p>session是因为HTTP无状态而诞生的。</p>
<p><strong>注意</strong>：session不因因为浏览器的关闭而删除。但是存有session ID的cookie的默认过期时间是会话级的。也就是说，用户关闭了浏览器，那么存储在客户端的session ID便会丢失，但是存储在服务器端的session数据并不会被立即删除。从客户端即浏览器看来，好像session被删除了一样，其实是因为丢失了session ID，所以找不到原来的session数据了。</p>
</li>
<li>
<p><strong>cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session。</strong></p>
</li>
<li>
<p><strong>设置cookie时间可以使cookie过期；但是使用session-destory()，我们将会销毁会话。</strong></p>
</li>
<li>
<p><strong>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用cookie。</strong></p>
</li>
<li>
<p><strong>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie；Session对象没有对存储的数据量的限制，其中可以保存更为复杂的数据类型。</strong></p>
</li>
</ol>
<p><em>注意:</em></p>
<ul>
<li>session很容易失效,用户体验很差；</li>
<li>虽然cookie不安全,但是可以加密；</li>
<li>cookie也分为永久和暂时存在的；</li>
<li>浏览器 有禁止cookie功能，但一般用户都不会设置；</li>
<li>一定要设置失效时间,要不然浏览器关闭就消失了；</li>
</ul>
<p><strong>两者最大的区别在于生存周期，一个是IE启动到IE关闭(浏览器页面一关，session就消失了)；一个是预先设置的生存周期，或永久的保存于本地的文件(cookie)。</strong></p>
<h2 id="Token"><a class="header-anchor" href="#Token"> </a>Token</h2>
<h3 id="为什么要引入-Token？"><a class="header-anchor" href="#为什么要引入-Token？"> </a>为什么要引入 Token？</h3>
<p>Token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，Token便应运而生。</p>
<h3 id="什么是-Token？"><a class="header-anchor" href="#什么是-Token？"> </a>什么是 Token？</h3>
<p>Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。</p>
<h3 id="使用-Token的目的"><a class="header-anchor" href="#使用-Token的目的"> </a>使用 Token的目的</h3>
<p>为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</p>
<h2 id="DDOS攻击"><a class="header-anchor" href="#DDOS攻击"> </a>DDOS攻击</h2>
<h3 id="什么是DDOS攻击"><a class="header-anchor" href="#什么是DDOS攻击"> </a>什么是DDOS攻击</h3>
<p>分布式拒绝服务攻击（Distributed denial of service attack）向目标系统同时提出数量庞大的服务请求。</p>
<h3 id="DDOS攻击方式"><a class="header-anchor" href="#DDOS攻击方式"> </a>DDOS攻击方式</h3>
<ul>
<li>通过使网络过载来干扰甚至阻断正常的网络通讯；</li>
<li>通过向服务器提交大量请求，使服务器超负荷；</li>
<li>阻断某一用户访问服务器；</li>
<li>阻断某服务与特定系统或个人的通讯。</li>
</ul>
<h3 id="如何应对DDOS攻击"><a class="header-anchor" href="#如何应对DDOS攻击"> </a>如何应对DDOS攻击</h3>
<ul>
<li>黑名单</li>
<li>DDOS 清洗：对用户请求数据进行实时监控，及时发现DDOS攻击等异常流量，在不影响正常业务开展的情况下清洗掉这些异常流量。</li>
<li>CDN加速：CDN的全称是Content Delivery Network，即内容分发网络。其目的是通过在现有的Internet中增加一层新的网络架构，将网站的内容发布到最接近用户的网络“边缘”，使用户可以就近取得所需的内容，提高用户访问网站的响应速度。CDN有别于镜像，因为它比镜像更智能，或者可以做这样一个比喻：CDN=更智能的镜像+缓存+流量导流。因而，CDN可以明显提高Internet网络中信息流动的效率。从技术上全面解决由于网络带宽小、用户访问量大、网点分布不均等问题，提高用户访问网站的响应速度。</li>
<li>高防服务器：高防服务器主要是指能独立硬防御50Gbps以上的服务器，能够帮助网站拒绝服务攻击，定期扫描网络主节点。</li>
</ul>
<h2 id="XSS"><a class="header-anchor" href="#XSS"> </a>XSS</h2>
<p>TODO</p>
<blockquote>
<p>“XSS是跨站脚本攻击(Cross Site Scripting)，为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。”</p>
</blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/26177815">浅谈XSS攻击的那些事（附常用绕过姿势）</a></p>
<h3 id="XSS的危害"><a class="header-anchor" href="#XSS的危害"> </a>XSS的危害</h3>
<ul>
<li>窃取网页浏览中的cookie值</li>
<li>劫持流量实现恶意跳转</li>
</ul>
<h3 id="防范手段"><a class="header-anchor" href="#防范手段"> </a>防范手段</h3>
<ul>
<li>首先是过滤。对诸如<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;a&gt;</code>等标签进行过滤。</li>
<li>其次是编码。像一些常见的符号，如<code>&lt;&gt;</code>在输入的时候要对其进行转换编码，这样做浏览器是不会对该标签进行解释执行的，同时也不影响显示效果。</li>
<li>最后是限制。通过以上的案例我们不难发现xss攻击要能达成往往需要较长的字符串，因此对于一些可以预期的输入可以通过限制长度强制截断来进行防御。</li>
</ul>
<h2 id="CSRF攻击"><a class="header-anchor" href="#CSRF攻击"> </a>CSRF攻击</h2>
<p>CSRF（Cross-site request forgery，中文为<strong>跨站请求伪造</strong>）是一种利用网站可信用户的权限去执行未授权的命令的一种恶意攻击。通过<strong>伪装可信用户的请求来利用信任该用户的网站</strong>，这种攻击方式虽然不是很流行，但是却难以防范，其危害也不比其他安全漏洞小。</p>
<blockquote>
<p>CSRF也称作<strong>one-click attack</strong>或者<strong>session riding</strong>，其简写有时候也会使用<strong>XSRF</strong>。</p>
</blockquote>
<h3 id="什么是CSRF？"><a class="header-anchor" href="#什么是CSRF？"> </a>什么是CSRF？</h3>
<p>简单点说，CSRF攻击就是 <strong>攻击者利用受害者的身份，以受害者的名义发送恶意请求</strong>。</p>
<blockquote>
<p><strong>与XSS（Cross-site scripting，跨站脚本攻击）不同的是，XSS的目的是获取用户的身份信息，攻击者窃取到的是用户的身份（session/cookie），而CSRF则是利用用户当前的身份去做一些未经过授权的操作。</strong></p>
</blockquote>
<p>CSRF攻击最早在2001年被发现，由于它的请求是从用户的IP地址发起的，因此在服务器上的web日志中可能无法检测到是否受到了CSRF攻击，正是由于它的这种隐蔽性，很长时间以来都没有被公开的报告出来，直到2007年才真正的被人们所重视。</p>
<h3 id="CSRF有哪些危害"><a class="header-anchor" href="#CSRF有哪些危害"> </a>CSRF有哪些危害</h3>
<p>CSRF可以盗用受害者的身份，完成受害者在web浏览器有权限进行的任何操作，想想吧，能做的事情太多了。</p>
<ul>
<li>以你的名义发送诈骗邮件，消息</li>
<li>用你的账号购买商品</li>
<li>用你的名义完成虚拟货币转账</li>
<li>泄露个人隐私</li>
<li>…</li>
</ul>
<h3 id="产生原理以及利用方式"><a class="header-anchor" href="#产生原理以及利用方式"> </a>产生原理以及利用方式</h3>
<p>要完成一个CSRF攻击，必须具备以下几个条件：</p>
<ul>
<li>受害者已经登录到了目标网站（你的网站）并且没有退出</li>
<li>受害者有意或者无意的访问了攻击者发布的页面或者链接地址</li>
</ul>
<p>整个步骤大致是这个样子的：</p>
<ol>
<li>用户小明在你的网站A上面登录了，A返回了一个session ID（使用cookie存储）</li>
<li>小明的浏览器保持着在A网站的登录状态，事实上几乎所有的网站都是这样做的，一般至少是用户关闭浏览器之前用户的会话是不会结束的</li>
<li>攻击者小强给小明发送了一个链接地址，小明打开了这个地址，查看了网页的内容</li>
<li>小明在打开这个地址的时候，这个页面已经自动的对网站A发送了一个请求，这时候因为A网站没有退出，因此只要请求的地址是A的就会携带A的cookie信息，也就是使用A与小明之间的会话</li>
<li>这时候A网站肯定是不知道这个请求其实是小强伪造的网页上发送的，而是误以为小明就是要这样操作，这样小强就可以随意的更改小明在A上的信息，以小明的身份在A网站上进行操作</li>
</ol>
<h4 id="利用方式"><a class="header-anchor" href="#利用方式"> </a>利用方式</h4>
<p>利用CSRF攻击，主要包含两种方式，一种是基于GET请求方式的利用，另一种是基于POST请求方式的利用。</p>
<h5 id="GET请求利用"><a class="header-anchor" href="#GET请求利用"> </a>GET请求利用</h5>
<p>使用GET请求方式的利用是最简单的一种利用方式，其隐患的来源主要是由于在开发系统的时候没有按照HTTP动词的正确使用方式来使用造成的。<strong>对于GET请求来说，它所发起的请求应该是只读的，不允许对网站的任何内容进行修改</strong>。</p>
<p>但是事实上并不是如此，很多网站在开发的时候，<strong>研发人员错误的认为GET/POST的使用区别</strong>仅仅是在于发送请求的数据是在Body中还是在请求地址中，以及请求内容的大小不同。<strong>对于一些危险的操作比如删除文章，用户授权等允许使用GET方式发送请求，在请求参数中加上文章或者用户的ID，这样就造成了只要请求地址被调用，数据就会产生修改。</strong></p>
<p>现在假设攻击者（用户ID=121）想将自己的身份添加为网站的管理员，他在网站A上面发了一个帖子，里面包含一张图片，其地址为<code>http://a.com/user/grant_super_user/121</code></p>
<pre class="line-numbers language-none"><code class="language-none">&lt;img src="http://a.com/user/grant_super_user/121" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>设想管理员看到这个帖子的时候，这个图片肯定会自动加载显示的。于是在管理员不知情的情况下，一个赋予用户管理员权限的操作已经悄悄的以他的身份执行了。这时候攻击者121就获取到了网站的管理员权限。</p>
<h5 id="POST请求利用"><a class="header-anchor" href="#POST请求利用"> </a>POST请求利用</h5>
<p>相对于GET方式的利用，POST方式的利用更加复杂一些，难度也大了一些。攻击者需要伪造一个能够自动提交的表单来发送POST请求。</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;
$(function() {
    $('#CSRF_forCSRFm').trigger('submit');
});
&lt;/script&gt;
&lt;form action="http://a.com/user/grant_super_user" id="CSRF_form" method="post"&gt;
    &lt;input name="uid" value="121" type="hidden"&gt;
&lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>只要想办法实现用户访问的时候自动提交表单就可以了。</p>
<h4 id="防范原理"><a class="header-anchor" href="#防范原理"> </a>防范原理</h4>
<p>防范CSRF攻击，其实本质就是要求网站<strong>能够识别出哪些请求是非正常用户主动发起的</strong>。这就要求我们<strong>在请求中嵌入一些额外的授权数据，让网站服务器能够区分出这些未授权的请求</strong>，比如说在请求参数中添加一个字段，这个字段的值从登录用户的Cookie或者页面中获取的（这个字段的值必须对每个用户来说是随机的，不能有规律可循）。攻击者伪造请求的时候是无法获取页面中与登录用户有关的一个随机值或者用户当前cookie中的内容的，因此就可以避免这种攻击。</p>
<h4 id="防范技术"><a class="header-anchor" href="#防范技术"> </a>防范技术</h4>
<h5 id="Synchronizer-token-pattern"><a class="header-anchor" href="#Synchronizer-token-pattern"> </a>Synchronizer token pattern</h5>
<p>**令牌同步模式（Synchronizer token pattern，简称STP）**是在用户请求的页面中的所有表单中嵌入一个token，在服务端验证这个token的技术。token可以是任意的内容，但是一定要保证无法被攻击者猜测到或者查询到。攻击者在请求中无法使用正确的token，因此可以判断出未授权的请求。</p>
<p><strong>简单实现STP</strong>：</p>
<p>首先在index.php中，创建一个表单，在表单中，<strong>我们将session中存储的token放入到隐藏域</strong>，这样，表单提交的时候token会随表单一起提交</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;?php
$token = sha1(uniqid(rand(), true));
$_SESSION['token'] = $token;
?&gt;
&lt;form action="buy.php" method="post"&gt;
    &lt;input type="hidden" name="token" value="&lt;?=$token; ?&gt;" /&gt;
    ... 表单内容
&lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在服务端校验请求参数的<code>buy.php</code>中，对表单提交过来的token与session中存储的token进行比对，如果一致说明token是有效的</p>
<pre class="line-numbers language-none"><code class="language-none">if ($_POST['token'] != $_SESSION['token']) {
    // TOKEN无效
    throw new Exception('Token无效，请求为伪造请求');
}
// TOKEN有效，表单内容处理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于攻击者来说，在伪造请求的时候是无法获取到用户页面中的这个<code>token</code>值的，因此就可以识别出其创建的伪造请求。</p>
<h5 id="Cookie-to-Header-Token"><a class="header-anchor" href="#Cookie-to-Header-Token"> </a>Cookie-to-Header Token</h5>
<p>对于使用Js作为主要交互技术的网站，<strong>将CSRF的token写入到cookie中</strong></p>
<pre class="line-numbers language-none"><code class="language-none">Set-Cookie: CSRF-token=i8XNjC4b8KVok4uw5RftR38Wgp2BFwql; expires=Thu, 23-Jul-2015 10:25:33 GMT; Max-Age=31449600; Path=/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后使用javascript读取token的值，在发送http请求的时候将其作为请求的header</p>
<pre class="line-numbers language-none"><code class="language-none">X-CSRF-Token: i8XNjC4b8KVok4uw5RftR38Wgp2BFwql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>最后服务器验证请求头中的token是否合法。</p>
<h5 id="验证码"><a class="header-anchor" href="#验证码"> </a>验证码</h5>
<p><strong>使用验证码可以杜绝CSRF攻击</strong>，但是这种方式要求每个请求都输入一个验证码，显然没有哪个网站愿意使用这种粗暴的方式，用户体验太差，用户会疯掉的。</p>
<h1 id="DOM和BOM"><a class="header-anchor" href="#DOM和BOM"> </a>DOM和BOM</h1>
<p><img src="https://pic2.zhimg.com/80/v2-40a88bb93b2d5fa298a6efbbe8752c7d_720w.jpg" alt="BOM和DOM"></p>
<h1 id="其它"><a class="header-anchor" href="#其它"> </a>其它</h1>
<h2 id="前端性能优化的方法？"><a class="header-anchor" href="#前端性能优化的方法？"> </a>前端性能优化的方法？</h2>
<ol>
<li><strong>减少http请求次数</strong>：<strong>CSS Sprites（雪碧图）</strong>, JS、CSS源码压缩、<strong>图片大小控制合适</strong>；网页Gzip，CDN托管，data缓存 ，<strong>图片服务器</strong>。</li>
<li><strong>使用模板</strong>：前端模板 JS+数据，减少由于HTML标签导致的带宽浪费。</li>
<li><strong>减少AJAX请求</strong>：前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数。</li>
<li><strong>用innerHTML代替DOM操作</strong>：减少DOM操作次数，优化javascript性能。</li>
<li><strong>使用className</strong>：当需要设置的样式很多时设置className而不是直接操作style。</li>
<li>少用全局变量，缓存DOM节点查找的结果。</li>
<li>减少IO读取操作。</li>
<li>避免使用CSS Expression(css表达式)又称Dynamic properties(动态属性)。</li>
<li><strong>图片预加载</strong>：将样式表放在顶部，将脚本放在底部加上时间戳。</li>
<li><strong>避免在页面的主体布局中使用table</strong>：table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。</li>
</ol>
<h2 id="SQL索引"><a class="header-anchor" href="#SQL索引"> </a>SQL索引</h2>
<p>TODO: SQL索引</p>
]]></content>
      <categories>
        <category>前端面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题（精华版）</title>
    <url>/2022/06/03/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E7%B2%BE%E5%8D%8E%E7%89%88%EF%BC%89/</url>
    <content><![CDATA[<h1 id="写在前面"><a class="header-anchor" href="#写在前面"> </a>写在前面</h1>
<table>
<thead>
<tr>
<th style="text-align:center">Easy</th>
<th style="text-align:center">Medium</th>
<th style="text-align:center">Hard</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">😍</td>
<td style="text-align:center">😏</td>
<td style="text-align:center">🤔</td>
</tr>
</tbody>
</table>
<h1 id="🤔-829-连续整数求和"><a class="header-anchor" href="#🤔-829-连续整数求和"> </a>🤔 829. 连续整数求和</h1>
<h2 id="题目描述"><a class="header-anchor" href="#题目描述"> </a>题目描述</h2>
<p><a href="https://leetcode.cn/problems/consecutive-numbers-sum/">829. 连续整数求和</a></p>
<blockquote>
<p>给定一个正整数 n，返回 连续正整数满足所有数字之和为 n 的组数 。</p>
<p><strong>示例 1:</strong></p>
<p>输入: n = 5<br>
输出: 2<br>
解释: 5 = 2 + 3，共有两组连续整数([5],[2,3])求和后为 5。</p>
<p><strong>示例 2:</strong></p>
<p>输入: n = 9<br>
输出: 3<br>
解释: 9 = 4 + 5 = 2 + 3 + 4</p>
<p><strong>示例 3:</strong></p>
<p>输入: n = 15<br>
输出: 4<br>
解释: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5</p>
<p><strong>提示:</strong></p>
<p>1 &lt;= n &lt;= 109</p>
</blockquote>
<h2 id="解法：找规律"><a class="header-anchor" href="#解法：找规律"> </a>解法：找规律</h2>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**
 * @param {number} n
 * @return {number}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">consecutiveNumbersSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> sum <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> sum<span class="token punctuation">)</span> <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="思路"><a class="header-anchor" href="#思路"> </a>思路</h3>
<p>当 $n = 9$ 时，由于 $2 + 3 + 4 = 9$，设 $x = 2$，则 $x + (x + 1) + (x + 2) = 9$ 。</p>
<p><strong>现在开始找规律！</strong></p>
<p>当连续 1 个正整数之和等于 n 时：<br>
$$<br>
n = x<br>
$$<br>
当连续 2 个正整数之和等于 n 时：<br>
$$<br>
n = x + (x + 1)<br>
= (2 * x) + 1<br>
$$<br>
当连续 3 个正整数之和等于 n 时：<br>
$$<br>
n = x + (x + 1) + (x + 2)<br>
= (3 * x) + (x + 2)<br>
$$<br>
当连续 4 个正整数之和等于 n 时：<br>
$$<br>
n = x + (x + 1) + (x + 2) + (x + 3)<br>
= (4 * x) + (1 + 2 + 3)<br>
$$<br>
当连续 i 个正整数之和等于 n 时：<br>
$$<br>
n = x + (x + 1) + (x + 2) + (x + 3) + … + (x + (i - 1))<br>
= (i * x) + (1 + 2 + 3 + … + (i - 1))<br>
$$<br>
变形可得：<br>
$$<br>
x = \frac{n - (1 + 2 + 3 + … + (i - 1))}{i}<br>
$$<br>
由等差数列的求和公式 $S = \frac{(1+n)*n}{2}$，可将上式写为：<br>
$$<br>
x = \frac{n - sum}{i}<br>
= \frac{n - \frac{(1 + (i-1)) * (i-1)}{2}}{i}<br>
$$<br>
<strong>综上所述，当 x 为正整数，也就是 <code>(n - sum) % i === 0</code> 时，说明存在连续 i 个正整数之和等于 n，所以 <code>res++</code> 。</strong></p>
<p><strong>且当 <code>n - sum &lt;= 0</code> 时，说明已没有比 i 个更多的连续正整数之和等于 n，所以应跳出循环。</strong></p>
<h2 id="提交记录"><a class="header-anchor" href="#提交记录"> </a>提交记录</h2>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode.cn/submissions/detail/321134294/">通过</a></td>
<td style="text-align:left">64 ms</td>
<td style="text-align:left">41.1 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2022/06/03 02:39</td>
<td style="text-align:left">找规律</td>
</tr>
</tbody>
</table>
<h1 id="🤔-732-我的日程安排表-III"><a class="header-anchor" href="#🤔-732-我的日程安排表-III"> </a>🤔 732. 我的日程安排表 III</h1>
<h2 id="题目描述-v2"><a class="header-anchor" href="#题目描述-v2"> </a>题目描述</h2>
<p><a href="https://leetcode.cn/problems/my-calendar-iii/">732. 我的日程安排表 III</a></p>
<blockquote>
<p>当 k 个日程安排有一些时间上的交叉时（例如 k 个日程安排都在同一时间内），就会产生 k 次预订。</p>
<p>给你一些日程安排 [start, end) ，请你在每个日程安排添加后，返回一个整数 k ，表示所有先前日程安排会产生的最大 k 次预订。</p>
<p>实现一个 MyCalendarThree 类来存放你的日程安排，你可以一直添加新的日程安排。</p>
<p>MyCalendarThree() 初始化对象。<br>
int book(int start, int end) 返回一个整数 k ，表示日历中存在的 k 次预订的最大值。</p>
<p><strong>示例：</strong></p>
<p>输入：<br>
[“MyCalendarThree”, “book”, “book”, “book”, “book”, “book”, “book”]<br>
[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]<br>
输出：<br>
[null, 1, 1, 2, 3, 3, 3]</p>
<p>解释：<br>
MyCalendarThree myCalendarThree = new MyCalendarThree();<br>
myCalendarThree.book(10, 20); // 返回 1 ，第一个日程安排可以预订并且不存在相交，所以最大 k 次预订是 1 次预订。<br>
myCalendarThree.book(50, 60); // 返回 1 ，第二个日程安排可以预订并且不存在相交，所以最大 k 次预订是 1 次预订。<br>
myCalendarThree.book(10, 40); // 返回 2 ，第三个日程安排 [10, 40) 与第一个日程安排相交，所以最大 k 次预订是 2 次预订。<br>
myCalendarThree.book(5, 15); // 返回 3 ，剩下的日程安排的最大 k 次预订是 3 次预订。<br>
myCalendarThree.book(5, 10); // 返回 3<br>
myCalendarThree.book(25, 55); // 返回 3</p>
<p>提示：</p>
<p>0 &lt;= start &lt; end &lt;= 109<br>
每个测试用例，调用 book 函数最多不超过 400次</p>
</blockquote>
<h2 id="解法：插旗法-差分数组"><a class="header-anchor" href="#解法：插旗法-差分数组"> </a>解法：插旗法 / 差分数组</h2>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">MyCalendarThree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>booked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/** 
 * @param {number} start 
 * @param {number} end
 * @return {number}
 */</span>
<span class="token class-name">MyCalendarThree</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">book</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 当前旗子数</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>booked<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>booked<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>booked<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 进入 =&gt; 插旗</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>booked<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>booked<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>booked<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 离开 =&gt; 拔旗</span>

  <span class="token comment">// 对 map 的 key 排序</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>booked<span class="token punctuation">)</span><span class="token punctuation">;</span>
  arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>booked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>booked<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    flags <span class="token operator">+=</span> value<span class="token punctuation">;</span>
    k <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> k<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * Your MyCalendarThree object will be instantiated and called as such:
 * var obj = new MyCalendarThree()
 * var param_1 = obj.book(start,end)
 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="思路-v2"><a class="header-anchor" href="#思路-v2"> </a>思路</h3>
<p>此方法适合<strong>解区间的最大重叠数量（或最大并行数量）的题目</strong>。</p>
<blockquote>
<p>何为<strong>插旗法</strong>？</p>
<p>进入一个区间的时候将该点旗子数+1，代表插上一面 🚩 ；离开时将该点旗子数-1，代表拔出一面 🚩 。</p>
<p>若区间之间不重合，则任意连续两个点的旗子数之和必然等于 0 ，如一个为 +1，下一个为 -1；若区间之间重合，则存在连续两个点的旗子数之和必然大于 0，如一个为 +1，下一个也为 +1。</p>
</blockquote>
<p>举个例子的话：</p>
<p>① [10, 20]；② [50, 60]；③ [10, 40]；④ [5, 15]</p>
<p>① 时的插旗坐标 &lt;10, 1&gt; &lt;20, -1&gt;，此时任意两个连续点的旗子数之和都为 0。</p>
<p>② 时的插旗坐标 &lt;10, 1&gt; &lt;20, -1&gt; &lt;50, 1&gt; &lt;60, -1&gt;，此时任意两个连续点的旗子数之和都为 0。</p>
<p>③ 时的插旗坐标 &lt;10, 2&gt; &lt;20, -1&gt; &lt;40, -1&gt; &lt;50, 1&gt; &lt;60, -1&gt;，此时存在两点 &lt;10, 2&gt; 和 &lt;20, -1&gt; 的旗子数之和为 1，说明区间存在重叠！</p>
<p>④ 时的插旗坐标 &lt;5, 1&gt; &lt;10, 2&gt; &lt;15, -1&gt; &lt;20, -1&gt; &lt;40, -1&gt; &lt;50, 1&gt; &lt;60, -1&gt;，此时存在两点 &lt;5, 1&gt; 和 &lt;10, 2&gt; 的旗子数之和为 3，说明区间又存在重叠了！</p>
<p>我们还会注意到，如果将所有点的旗子数依次（<strong>必须将点由小到大排序</strong>）累加，<strong>累加过程中出现的最大值，即为区间重叠的最大次数</strong>。对应代码的第 21- 24 行。</p>
<p>在本方法中，我们<strong>使用 <code>Map</code> 来存储插旗坐标</strong>，且正如上文所说，<strong>每次更新 <code>Map</code> 都需要对 <code>Map</code> 中的 <code>key</code> 即点的坐标由小到大排序</strong>。对应 16 - 19 行代码。</p>
<h2 id="提交记录-v2"><a class="header-anchor" href="#提交记录-v2"> </a>提交记录</h2>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode.cn/submissions/detail/322046704/">通过</a></td>
<td style="text-align:left">816 ms</td>
<td style="text-align:left">52 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2022/06/06 01:56</td>
<td style="text-align:left">插旗法</td>
</tr>
</tbody>
</table>
<h1 id="😍-1037-有效的回旋镖"><a class="header-anchor" href="#😍-1037-有效的回旋镖"> </a>😍 1037. 有效的回旋镖</h1>
<h2 id="题目描述-v3"><a class="header-anchor" href="#题目描述-v3"> </a>题目描述</h2>
<p><a href="https://leetcode.cn/problems/valid-boomerang/">1037. 有效的回旋镖</a></p>
<blockquote>
<p>给定一个数组 points ，其中 points[i] = [xi, yi] 表示 X-Y 平面上的一个点，如果这些点构成一个 回旋镖 则返回 true 。</p>
<p><strong>回旋镖</strong> 定义为一组三个点，这些点 各不相同 且 <strong>不在一条直线上</strong> 。</p>
<p><strong>示例 1：</strong></p>
<p>输入：points = [[1,1],[2,3],[3,2]]<br>
输出：true</p>
<p><strong>示例 2：</strong></p>
<p>输入：points = [[1,1],[2,2],[3,3]]<br>
输出：false</p>
<p>提示：</p>
<p>points.length == 3<br>
points[i].length == 2<br>
0 &lt;= xi, yi &lt;= 100</p>
</blockquote>
<h2 id="解法：点斜式判断三点是否共线"><a class="header-anchor" href="#解法：点斜式判断三点是否共线"> </a>解法：点斜式判断三点是否共线</h2>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**
 * @param {number[][]} points
 * @return {boolean}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isBoomerang</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">points</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> points<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  points <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>points<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>points<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token comment">// 点斜式 y - y1 = k(x - x1)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当然，我这个方法不够简洁，判断三点是否共线可以看这篇文章<a href="https://leetcode.cn/problems/valid-boomerang/solution/by-nehzil-if8z/">《数学推导不在一条直线公式》</a>。</p>
<p>将本题收录在本篇博客中，是想强调上述代码的<strong>第 7 行</strong>：对 <code>points</code> 进行去重时，使用的方法。</p>
<p><strong>我们都知道，数组去重可以使用 <code>Array.from(new Set(要去重的数组))</code> ，但是由于本题中 <code>points</code> 的元素为数组，因此那样做无法达到去重的目的。所以，我使用 <code>points.map(e =&gt; e.toString())</code> 将 <code>points</code> 的元素全部变为字符串，再对 <code>points</code> 进行去重，然后再将去重后的 <code>points</code> 中的每个字符串元素转回数组。注意 ⚠️ ，如果原来的 <code>points</code> 为 <code>[[0,1],[0,1],[2,1]]</code> 的话，去重后的 <code>points</code> 将为 <code>[['0','1'],['2','1']]</code> 。由于不影响后面的运算，因此就没有继续对其处理。</strong></p>
<h1 id="🤔-30-串联所有单词的子串"><a class="header-anchor" href="#🤔-30-串联所有单词的子串"> </a>🤔 30. 串联所有单词的子串</h1>
<h2 id="题目描述-v4"><a class="header-anchor" href="#题目描述-v4"> </a>题目描述</h2>
<p><a href="https://leetcode.cn/problems/substring-with-concatenation-of-all-words/">30. 串联所有单词的子串</a></p>
<blockquote>
<p>给定一个字符串 s 和一些 长度相同 的单词 words 。找出 s 中恰好可以由 words 中所有单词串联形成的子串的起始位置。</p>
<p>注意子串要与 words 中的单词完全匹配，中间不能有其他字符 ，但不需要考虑 words 中单词串联的顺序。</p>
<p><strong>示例 1：</strong></p>
<p>输入：s = “barfoothefoobarman”, words = [“foo”,“bar”]<br>
输出：[0,9]<br>
解释：<br>
从索引 0 和 9 开始的子串分别是 “barfoo” 和 “foobar” 。<br>
输出的顺序不重要, [9,0] 也是有效答案。</p>
<p><strong>示例 2：</strong></p>
<p>输入：s = “wordgoodgoodgoodbestword”, words = [“word”,“good”,“best”,“word”]<br>
输出：[]<br>
示例 3：</p>
<p>输入：s = “barfoofoobarthefoobarman”, words = [“bar”,“foo”,“the”]<br>
输出：[6,9,12]</p>
<p>提示：</p>
<p>1 &lt;= s.length &lt;= 104<br>
s 由小写英文字母组成<br>
1 &lt;= words.length &lt;= 5000<br>
1 &lt;= words[i].length &lt;= 30<br>
words[i] 由小写英文字母组成</p>
</blockquote>
<h2 id="⛔️-解法：回溯算法【超时】"><a class="header-anchor" href="#⛔️-解法：回溯算法【超时】"> </a>⛔️ 解法：回溯算法【超时】</h2>
<p>最近做题生疏了，看到这道题第一反应竟然是回溯算法 😅。</p>
<p>思路：将 <code>words</code> 中的所有元素进行全排列（需要考虑重复元素），然后对字符串 <code>s</code> 使用 <code>indexOf()</code> 方法，求出全排列后的每个元素在 <code>s</code> 中的下标。</p>
<p>例如：<code>s = "barfoothefoobarfooman" words = ["foo","bar","foo"]</code>，对 <code>words</code> 进行全排列，得 <code>subStrs = [ 'foobarfoo', 'foofoobar', 'barfoofoo' ]</code>，再对 <code>subStrs</code> 中的每个元素求出其在 <code>s</code> 中的下标即可。</p>
<p>代码如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**
 * @param {string} s
 * @param {string[]} words
 * @return {number[]}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">findSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> words</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> subStrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> track <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  words<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">word<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">backtrack</span><span class="token punctuation">(</span>track<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> str <span class="token keyword">of</span> subStrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> idx <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>idx <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
      idx <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token parameter">track<span class="token punctuation">,</span> start</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>track<span class="token punctuation">.</span>length <span class="token operator">===</span> words<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> str <span class="token operator">=</span> track<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subStrs<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> subStrs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      track<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">backtrack</span><span class="token punctuation">(</span>track<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      track<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然鹅，在执行 <a href="https://leetcode.cn/submissions/detail/328273906/testcase/">这个用例</a> 时，会超出时间限制。<a href="https://leetcode.cn/submissions/detail/328273906/">查看提交记录</a></p>
<h2 id="解法：滑动窗口"><a class="header-anchor" href="#解法：滑动窗口"> </a>解法：滑动窗口</h2>
<p>**既然这道题是子串问题，那么我们第一时间就应该想到用“滑动窗口”来解决这道题。**起初，我是这样写的：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**
 * @param {string} s
 * @param {string[]} words
 * @return {number[]}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">findSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> words</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> need <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> word <span class="token keyword">of</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    need<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">?</span> need<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> need<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> strR <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> right <span class="token operator">+</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    right <span class="token operator">+=</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>strR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>strR<span class="token punctuation">)</span> <span class="token operator">?</span> window<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>strR<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>strR<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> window<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>strR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>strR<span class="token punctuation">)</span> <span class="token operator">===</span> window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>strR<span class="token punctuation">)</span><span class="token punctuation">)</span> valid<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>valid <span class="token operator">===</span> need<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">===</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">*</span> words<span class="token punctuation">.</span>length<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> strL <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> left <span class="token operator">+</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
      left <span class="token operator">+=</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>strL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>strL<span class="token punctuation">)</span> <span class="token operator">===</span> window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>strL<span class="token punctuation">)</span><span class="token punctuation">)</span> valid<span class="token operator">--</span><span class="token punctuation">;</span>
        window<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>strL<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>strL<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意，题干中有说 <code>words</code> 中的单词的长度都相同，所以<strong>滑动窗口可以每次滑动 <code>words[0].length</code> 个字符</strong>，如代码第 17 行和第 26 行所示。</p>
<p>但是当执行 <a href="https://leetcode.cn/submissions/detail/328272142/">这个用例</a> 时，出现了错误。简单来说就是当 <code>s = "ababaab" words = ["ab","ba","ba"]</code> 时，输出 <code>[]</code> 而不是 <code>[1]</code>，所以我们应该<strong>考虑截断 <code>s</code> 的第 <code>0 ~ words[0].length - 1</code> 个字符</strong>。就像在上例中，我们需要将 <code>s</code> 截断为 <code>"babaab"</code> 才能求出正确答案。</p>
<p>因此，<strong>正确的代码</strong>如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**
 * @param {string} s
 * @param {string[]} words
 * @return {number[]}
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">findSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> words</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> need <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> word <span class="token keyword">of</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    need<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">?</span> need<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> need<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> start <span class="token operator">&lt;</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> start<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> left <span class="token operator">=</span> start<span class="token punctuation">,</span> right <span class="token operator">=</span> start<span class="token punctuation">;</span>
    <span class="token keyword">let</span> valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> strR <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> right <span class="token operator">+</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
      right <span class="token operator">+=</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>strR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        window<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>strR<span class="token punctuation">)</span> <span class="token operator">?</span> window<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>strR<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>strR<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> window<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>strR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>strR<span class="token punctuation">)</span> <span class="token operator">===</span> window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>strR<span class="token punctuation">)</span><span class="token punctuation">)</span> valid<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">while</span> <span class="token punctuation">(</span>valid <span class="token operator">===</span> need<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">===</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">*</span> words<span class="token punctuation">.</span>length<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> strL <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> left <span class="token operator">+</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        left <span class="token operator">+=</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>strL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>need<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>strL<span class="token punctuation">)</span> <span class="token operator">===</span> window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>strL<span class="token punctuation">)</span><span class="token punctuation">)</span> valid<span class="token operator">--</span><span class="token punctuation">;</span>
          window<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>strL<span class="token punctuation">,</span> window<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>strL<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="提交记录-v3"><a class="header-anchor" href="#提交记录-v3"> </a>提交记录</h2>
<table>
<thead>
<tr>
<th style="text-align:left">提交结果</th>
<th style="text-align:left">执行用时</th>
<th style="text-align:left">内存消耗</th>
<th style="text-align:left">语言</th>
<th style="text-align:left">提交时间</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://leetcode.cn/submissions/detail/328273906/">超出时间限制</a></td>
<td style="text-align:left">N/A</td>
<td style="text-align:left">N/A</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2022/06/23 02:08</td>
<td style="text-align:left">⛔️ 回溯算法</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://leetcode.cn/submissions/detail/328273002/">通过</a></td>
<td style="text-align:left">76 ms</td>
<td style="text-align:left">43.4 MB</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2022/06/23 01:50</td>
<td style="text-align:left">滑动窗口</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://leetcode.cn/submissions/detail/328272142/">解答错误</a></td>
<td style="text-align:left">N/A</td>
<td style="text-align:left">N/A</td>
<td style="text-align:left">JavaScript</td>
<td style="text-align:left">2022/06/23 01:37</td>
<td style="text-align:left">⛔️ 应考虑截断</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
</search>
